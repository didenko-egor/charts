{"version":3,"file":"index.js","sources":["../../src/useContextMenu/index.ts"],"sourcesContent":["import React, { useEffect } from 'react';\n\n/**\n * Хук для отмены стандартного действия браузера и\n * вызова переданного колбэка при наступлении события 'contextmenu' на целевом элементе.\n *\n * Может быть кейс, когда ссылка внутри ref изменится,\n * но обработчик будет висеть на старом элементе из-за специфики работы ref.\n * Чтобы правильно обновлять ссылку на целевой элемент необходимо передать третьим аргументом значение,\n * которое изменяется с течением времени также, как ref.\n * @param {React.RefObject<HTMLElement>} ref Ссылка на элемент, на котором будет вызываться переданный колбэк\n * @param {(event: MouseEvent) => void} callback колбэк вызываемый при попытке пользователя вызвать контекстное меню\n * @param {unknown} updateTrigger любое значение, которое меняется вместе с ref(пример: key).\n * @returns {void}\n */\nconst useContextMenu = (\n  ref: React.RefObject<HTMLElement>,\n  callback: (event: MouseEvent) => void,\n  updateTrigger?: unknown\n): void => {\n  useEffect(() => {\n    const { current: triggerElement } = ref;\n\n    if (triggerElement) {\n      const handleContextMenu: EventListener = (event => {\n        event.preventDefault();\n        callback(event as MouseEvent);\n      });\n\n      triggerElement.addEventListener('contextmenu', handleContextMenu);\n\n      return () => triggerElement.removeEventListener('contextmenu', handleContextMenu);\n    }\n\n    return undefined;\n  }, [ref, callback, updateTrigger]);\n};\n\nexport default useContextMenu;\n"],"names":["useContextMenu","ref","callback","updateTrigger","useEffect","triggerElement","current","handleContextMenu_1","event","preventDefault","addEventListener","removeEventListener"],"mappings":"kCAeA,IAAMA,EAAiB,SACrBC,EACAC,EACAC,GAEAC,GAAU,WACA,IAASC,EAAmBJ,EAAGK,QAEvC,GAAID,EAAgB,CAClB,IAAME,EAAoC,SAAAC,GACxCA,EAAMC,iBACNP,EAASM,IAKX,OAFAH,EAAeK,iBAAiB,cAAeH,GAExC,WAAM,OAAAF,EAAeM,oBAAoB,cAAeJ,OAIhE,CAACN,EAAKC,EAAUC"}