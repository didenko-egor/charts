{"version":3,"file":"index.js","sources":["../../../src/misc/getImageUrl/index.ts"],"sourcesContent":["export interface GetImageUrlOptions {\n  /** Ширина изображения */\n  width?: number;\n\n  /** Высота изображения */\n  height?: number;\n}\n\nexport interface GetImageUrlReturnType {\n  /** Ссылка на изображение */\n  src: string;\n\n  /** Адаптивная ссылка на изображение для дисплеев retina (2x) */\n  srcSet?: string;\n}\n\nfunction getResizePart(width: number, height: number, multiplier?: number): string {\n  return `resize/${ multiplier ? width * multiplier : width }x${ multiplier ? height * multiplier : height }/`;\n}\n\n/**\n * Возвращает объект:\\\n * src - ссылка на изображение, собранная из baseUrl, path и опциональных параметров.\\\n * srcset - адаптивная ссылка на изображение для дисплеев retina (2x). Формируется только если переданы width и height\n * @param baseUrl {string} Ссылка на ресурс (CDN).\n * @param path {string} Путь к изображению.\n * @param options {GetImageUrlOptions} Опциональные параметры формирования ссылки на изображение\n * @returns {GetImageUrlReturnType}\n */\nexport default function getImageUrl(\n  baseUrl: string,\n  path: string,\n  options: GetImageUrlOptions = {}\n): GetImageUrlReturnType {\n  const { width, height } = options;\n  const isResized = width && height;\n\n  if (!isResized) {\n    return { src: baseUrl + path };\n  }\n\n  return {\n    src: baseUrl + getResizePart(width, height) + path,\n    srcSet: `${ baseUrl + getResizePart(width, height, 2) + path } 2x`\n  };\n}\n"],"names":["getResizePart","width","height","multiplier","concat","getImageUrl","baseUrl","path","options","src","srcSet"],"mappings":"AAgBA,SAASA,EAAcC,EAAeC,EAAgBC,GACpD,MAAO,UAAAC,OAAWD,EAAaF,EAAQE,EAAaF,cAAWE,EAAaD,EAASC,EAAaD,EAAM,KAYlF,SAAAG,EACtBC,EACAC,EACAC,QAAA,IAAAA,IAAAA,EAAgC,IAExB,IAAAP,EAAkBO,EAAOP,MAAlBC,EAAWM,EAAON,OAGjC,OAFkBD,GAASC,EAMpB,CACLO,IAAKH,EAAUN,EAAcC,EAAOC,GAAUK,EAC9CG,OAAQ,GAAAN,OAAIE,EAAUN,EAAcC,EAAOC,EAAQ,GAAKK,EAAU,QAL3D,CAAEE,IAAKH,EAAUC"}