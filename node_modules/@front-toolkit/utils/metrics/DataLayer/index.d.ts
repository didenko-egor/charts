type WindowWithDataLayer = typeof window & {
    dataLayer: any[];
};
/**
* A wrapper class for window.dataLayer used for sending data to Google Tag Manager.
*/
declare class DataLayer {
    /**
     * Checks the validity of the reference currently stored in mDataLayer.
     */
    get inSync(): boolean;
    /**
     * An instance of DataLayer.
     */
    private static instance;
    /**
     * A reference to window.dataLayer object.
     */
    private mDataLayer?;
    private constructor();
    static getInstance(): DataLayer;
    /**
     * Sets mDataLayer to reference window.dataLayer.
     * @remarks
     * mDataLayer remains undefined on server in ssr environments.
     */
    /**
     * Sets mDataLayer to reference window.dataLayer.
     * @remarks
     * mDataLayer remains undefined on server in ssr environments.
     */
    init(): void;
    /**
     * Adds an object to dataLayer.
     *
     * @remarks
     * - Before usage, GTM container should be initialized in the target project and should not be re-initialized later.
     * https://developers.google.com/tag-platform/tag-manager/web
     *
     * - Does nothing when run on server in ssr environments.
     * @param obj {Object} - an object, which holds events or variables to be passed to Google Tag Manager via dataLayer.
     */
    /**
     * Adds an object to dataLayer.
     *
     * @remarks
     * - Before usage, GTM container should be initialized in the target project and should not be re-initialized later.
     * https://developers.google.com/tag-platform/tag-manager/web
     *
     * - Does nothing when run on server in ssr environments.
     * @param obj {Object} - an object, which holds events or variables to be passed to Google Tag Manager via dataLayer.
     */
    push(obj: any): void;
}
export { WindowWithDataLayer, DataLayer };
