{"version":3,"file":"index.js","sources":["../../../src/services/fullscreenService/index.ts"],"sourcesContent":["import { noOp } from '../../misc';\nimport { ExtendedDocument, ExtendedHTMLDivElement } from './types';\n\nclass FullscreenService {\n  private readonly extendedDocument = document as ExtendedDocument;\n\n  private onChangeHandler = noOp;\n\n  isInitialized = false;\n\n  get fullscreenEnabled(): boolean {\n    if (!this.extendedDocument) {\n      return false;\n    }\n\n    return this.extendedDocument.fullscreenEnabled\n    || this.extendedDocument.webkitFullscreenEnabled\n    || this.extendedDocument.mozFullScreenEnabled\n    || this.extendedDocument.msFullscreenEnabled;\n  }\n\n  get fullscreenElement(): Element | null | undefined {\n    if (!this.extendedDocument) {\n      return undefined;\n    }\n\n    return this.extendedDocument.fullscreenElement\n    || this.extendedDocument.webkitFullscreenElement\n    || this.extendedDocument.mozFullScreenElement\n    || this.extendedDocument.msFullscreenElement;\n  }\n\n  get hasFullscreenElement(): boolean {\n    return Boolean(this.fullscreenElement);\n  }\n\n  static requestFullscreen(element: ExtendedHTMLDivElement | null): Promise<void> {\n    if (!element) {\n      return Promise.reject(new Error('fullscreenService: invalid element passed to requestFullscreen()'));\n    }\n\n    if (element.requestFullscreen) {\n      return element.requestFullscreen();\n    }\n\n    if (element.mozRequestFullScreen) {\n      return element.mozRequestFullScreen();\n    }\n\n    if (element.webkitRequestFullScreen) {\n      return element.webkitRequestFullScreen();\n    }\n\n    if (element.msRequestFullscreen) {\n      return element.msRequestFullscreen();\n    }\n\n    return Promise.reject(new Error('fullscreenService: element does not support fullscreen mode'));\n  }\n\n  exitFullscreen(): Promise<void> {\n    if (!this.extendedDocument) {\n      return Promise.reject(new Error('fullscreenService: document is not defined'));\n    }\n\n    if (this.extendedDocument.exitFullscreen) {\n      return this.extendedDocument.exitFullscreen();\n    }\n\n    if (this.extendedDocument.mozCancelFullScreen) {\n      return this.extendedDocument.mozCancelFullScreen();\n    }\n\n    if (this.extendedDocument.webkitExitFullscreen) {\n      return this.extendedDocument.webkitExitFullscreen();\n    }\n\n    if (this.extendedDocument.msExitFullscreen) {\n      return this.extendedDocument.msExitFullscreen();\n    }\n\n    return Promise.reject(new Error('fullscreenService: document does not support exitFullscreen()'));\n  }\n\n  // TODO: сделать определение vendor-specific методов однократным и перенести в init()\n\n  init(onChangeHandler: () => void): void {\n    if (this.isInitialized) {\n      return;\n    }\n\n    this.onChangeHandler = onChangeHandler;\n\n    this.extendedDocument.addEventListener('fullscreenchange', this.onChangeHandler);\n    this.extendedDocument.addEventListener('webkitfullscreenchange', this.onChangeHandler);\n    this.extendedDocument.addEventListener('mozfullscreenchange', this.onChangeHandler);\n    this.extendedDocument.addEventListener('MSFullscreenChange', this.onChangeHandler);\n\n    this.isInitialized = true;\n  }\n\n  destroy(): void {\n    if (!this.isInitialized) {\n      return;\n    }\n\n    this.extendedDocument.removeEventListener('fullscreenchange', this.onChangeHandler);\n    this.extendedDocument.removeEventListener('webkitfullscreenchange', this.onChangeHandler);\n    this.extendedDocument.removeEventListener('mozfullscreenchange', this.onChangeHandler);\n    this.extendedDocument.removeEventListener('MSFullscreenChange', this.onChangeHandler);\n\n    this.isInitialized = false;\n  }\n}\nexport default FullscreenService;\n"],"names":["FullscreenService","this","extendedDocument","document","onChangeHandler","noOp","isInitialized","Object","defineProperty","prototype","get","fullscreenEnabled","webkitFullscreenEnabled","mozFullScreenEnabled","msFullscreenEnabled","fullscreenElement","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement","Boolean","requestFullscreen","element","mozRequestFullScreen","webkitRequestFullScreen","msRequestFullscreen","Promise","reject","Error","exitFullscreen","mozCancelFullScreen","webkitExitFullscreen","msExitFullscreen","init","addEventListener","destroy","removeEventListener"],"mappings":"wCAGA,IAAAA,EAAA,WAAA,SAAAA,IACmBC,KAAgBC,iBAAGC,SAE5BF,KAAeG,gBAAGC,EAE1BJ,KAAaK,eAAG,EAyGlB,OAvGEC,OAAAC,eAAIR,EAAiBS,UAAA,oBAAA,CAArBC,IAAA,WACE,QAAKT,KAAKC,mBAIHD,KAAKC,iBAAiBS,mBAC1BV,KAAKC,iBAAiBU,yBACtBX,KAAKC,iBAAiBW,sBACtBZ,KAAKC,iBAAiBY,sDAG3BP,OAAAC,eAAIR,EAAiBS,UAAA,oBAAA,CAArBC,IAAA,WACE,GAAKT,KAAKC,iBAIV,OAAOD,KAAKC,iBAAiBa,mBAC1Bd,KAAKC,iBAAiBc,yBACtBf,KAAKC,iBAAiBe,sBACtBhB,KAAKC,iBAAiBgB,qDAG3BX,OAAAC,eAAIR,EAAoBS,UAAA,uBAAA,CAAxBC,IAAA,WACE,OAAOS,QAAQlB,KAAKc,oDAGff,EAAiBoB,kBAAxB,SAAyBC,GACvB,OAAKA,EAIDA,EAAQD,kBACHC,EAAQD,oBAGbC,EAAQC,qBACHD,EAAQC,uBAGbD,EAAQE,wBACHF,EAAQE,0BAGbF,EAAQG,oBACHH,EAAQG,sBAGVC,QAAQC,OAAO,IAAIC,MAAM,gEAnBvBF,QAAQC,OAAO,IAAIC,MAAM,sEAsBpC3B,EAAAS,UAAAmB,eAAA,WACE,OAAK3B,KAAKC,iBAIND,KAAKC,iBAAiB0B,eACjB3B,KAAKC,iBAAiB0B,iBAG3B3B,KAAKC,iBAAiB2B,oBACjB5B,KAAKC,iBAAiB2B,sBAG3B5B,KAAKC,iBAAiB4B,qBACjB7B,KAAKC,iBAAiB4B,uBAG3B7B,KAAKC,iBAAiB6B,iBACjB9B,KAAKC,iBAAiB6B,mBAGxBN,QAAQC,OAAO,IAAIC,MAAM,kEAnBvBF,QAAQC,OAAO,IAAIC,MAAM,gDAwBpC3B,EAAIS,UAAAuB,KAAJ,SAAK5B,GACCH,KAAKK,gBAITL,KAAKG,gBAAkBA,EAEvBH,KAAKC,iBAAiB+B,iBAAiB,mBAAoBhC,KAAKG,iBAChEH,KAAKC,iBAAiB+B,iBAAiB,yBAA0BhC,KAAKG,iBACtEH,KAAKC,iBAAiB+B,iBAAiB,sBAAuBhC,KAAKG,iBACnEH,KAAKC,iBAAiB+B,iBAAiB,qBAAsBhC,KAAKG,iBAElEH,KAAKK,eAAgB,IAGvBN,EAAAS,UAAAyB,QAAA,WACOjC,KAAKK,gBAIVL,KAAKC,iBAAiBiC,oBAAoB,mBAAoBlC,KAAKG,iBACnEH,KAAKC,iBAAiBiC,oBAAoB,yBAA0BlC,KAAKG,iBACzEH,KAAKC,iBAAiBiC,oBAAoB,sBAAuBlC,KAAKG,iBACtEH,KAAKC,iBAAiBiC,oBAAoB,qBAAsBlC,KAAKG,iBAErEH,KAAKK,eAAgB,IAExBN"}