{"version":3,"file":"index.js","sources":["../../src/Modal/index.tsx"],"sourcesContent":["/* eslint-disable jsx-a11y/click-events-have-key-events,jsx-a11y/no-static-element-interactions */\nimport React, { useEffect } from 'react';\nimport { cssDecorator } from '@front-toolkit/utils';\nimport { ScrollBox } from 'shared/ScrollBox';\n\nimport { IconClose } from '../icons';\n\nimport styles from './Modal.scss';\n\nconst cd = cssDecorator(styles);\n\nexport interface ModalProps {\n  /** Колбэк закрытия модального окна */\n  onClose: () => void;\n\n  /** Режим отображения  */\n  displayMode: 'small_mobile' | 'mobile' | 'desktop';\n\n  /** Флаг, true, если необходимо, чтобы кнопка закрытия модального окна скроллилась вместе с его содержимым  */\n  staticCloseButton?: boolean;\n\n  /** Колбэк для блокировки скролла */\n  onScrollLock?: (value: boolean) => void;\n\n  /** Z-index для компонента */\n  zIndex?: number;\n\n  /** Верхний отступ для компонента в режиме mobile, px */\n  topIndentMobile?: number;\n\n  /** Режим, при котором отключается оборачивание модального окна в ScrollBox,\n   *  при этом модальное окно растягивается на всю высоту родителя   */\n  disableInternalScroll?: boolean;\n\n  /** Флаг траурного режжима */\n  isMourning?: boolean;\n}\n\nexport const Modal: React.FC<ModalProps> = ({\n  children,\n  displayMode = 'mobile',\n  staticCloseButton = false,\n  onClose,\n  onScrollLock,\n  zIndex = 400,\n  topIndentMobile = 28,\n  disableInternalScroll,\n  isMourning\n}) => {\n  useEffect(() => {\n    if (onScrollLock) {\n      onScrollLock(true);\n    }\n\n    return (): void => {\n      if (onScrollLock) {\n        onScrollLock(false);\n      }\n    };\n  /* eslint-disable-next-line react-hooks/exhaustive-deps */\n  }, []);\n\n  const isDesktop = displayMode === 'desktop';\n  const isSmallMobile = displayMode === 'small_mobile';\n\n  const iconClose = (\n    <div className={ cd('icon', { is_static: staticCloseButton }) } onClick={ onClose }>\n      <IconClose />\n    </div>\n  );\n\n  const modalInner = (\n    <>\n      { staticCloseButton && iconClose }\n      { children }\n    </>\n  );\n\n  return (\n    <div\n      className={ styles.overlay }\n      style={ { zIndex, paddingTop: isSmallMobile || isDesktop ? 0 : topIndentMobile } }\n      onClick={ onClose }\n    >\n      <div\n        className={ cd('wrapper', { is_desktop: isDesktop, stretch_to_parent_height: disableInternalScroll, mourning: isMourning }) }\n        onClick={ ((event: React.MouseEvent): void => event.stopPropagation()) }\n      >\n        { !disableInternalScroll\n          ? <ScrollBox overrideWrapperClassName={ styles.scrollbar }>{ modalInner }</ScrollBox>\n          : modalInner }\n        { !staticCloseButton && iconClose }\n      </div>\n    </div>\n  );\n};\n"],"names":["cd","cssDecorator","styles","Modal","_a","children","_b","displayMode","_c","staticCloseButton","onClose","onScrollLock","_d","zIndex","_e","topIndentMobile","disableInternalScroll","isMourning","useEffect","isDesktop","isSmallMobile","iconClose","React","className","is_static","onClick","IconClose","modalInner","overlay","style","paddingTop","is_desktop","stretch_to_parent_height","mourning","event","stopPropagation","ScrollBox","overrideWrapperClassName","scrollbar"],"mappings":"sOASA,IAAMA,EAAKC,EAAaC,GA6BXC,EAA8B,SAACC,OAC1CC,aACAC,gBAAAC,aAAc,WACdC,sBAAAC,gBACAC,YACAC,iBACAC,WAAAC,aAAS,MACTC,oBAAAC,aAAkB,KAClBC,0BACAC,eAEAC,GAAU,WAKR,OAJIP,GACFA,GAAa,GAGR,WACDA,GACFA,GAAa,MAIhB,IAEH,IAAMQ,EAA4B,YAAhBZ,EACZa,EAAgC,iBAAhBb,EAEhBc,EACJC,uBAAKC,UAAYvB,EAAG,OAAQ,CAAEwB,UAAWf,IAAuBgB,QAAUf,GACxEY,gBAACI,SAICC,EACJL,gCACIb,GAAqBY,EACrBhB,GAIN,OACEiB,uBACEC,UAAYrB,EAAO0B,QACnBC,MAAQ,CAAEhB,SAAQiB,WAAYV,GAAiBD,EAAY,EAAIJ,GAC/DU,QAAUf,GAEVY,uBACEC,UAAYvB,EAAG,UAAW,CAAE+B,WAAYZ,EAAWa,yBAA0BhB,EAAuBiB,SAAUhB,IAC9GQ,iBAAYS,GAAkC,OAAAA,EAAMC,iBAAiB,GAElEnB,EAECW,EADAL,gBAACc,GAAUC,yBAA2BnC,EAAOoC,WAAcX,IAE5DlB,GAAqBY,GAIhC"}