/// <reference types="react" />
import React from 'react';
import { CSSProperties } from "react";
import { AlignDropDown, OnChange, OnClickItem, OnScrollLock, SharedSelectDropDownProps } from "./sharedTypes-e165a393";
interface DropDownProps extends SharedSelectDropDownProps {
    /** Данные для элемента-сброса к дефолту */
    resetLabel: string;
    /** Хэш-мап активных элементов (для упрощения фильтрации и меток) */
    activeMap: Set<string>;
    /** Обработчик клика по элементу списка */
    onClickItem: OnClickItem;
    /** Активный - элемент сброса к дефолту */
    isReset: boolean;
    /** Метод закрытия выпадашки */
    onCloseDropDown: VoidFunction;
    /** Метод для вызова блокировки прокрутки приложением */
    onScrollLock?: OnScrollLock;
    /** zIndex списка, если стандартный не подходит */
    zIndex?: number;
    /** Выравнивание списка по отношению к элементу-мишени */
    alignDropDown?: AlignDropDown;
    /** Минимальная позиция top относительно вьюпорта */
    minTop?: number;
    /** Максимальная позиция bottom относительно вьюпорта */
    maxBottom?: number;
    /** Режим мультиселект: позволяет выбирать несколько элементов */
    isMultiselect?: boolean;
}
type InheritedProps = SharedSelectDropDownProps & Pick<DropDownProps, 'isMultiselect' | 'minTop' | 'maxBottom' | 'zIndex' | 'onScrollLock' | 'alignDropDown' | 'onCloseDropDown'>;
interface SelectDropDownProps extends InheritedProps {
    /** Узел, который будет встроен в мишень */
    children: React.ReactNode;
    /** Состояние открыт/закрыт */
    isOpen: boolean;
    /** Ширина контейнера-мишени */
    targetWidth?: CSSProperties['width'];
    /** Текст элемента для сброса к дефолту */
    itemResetLabel: string;
    /** Обработчик изменения набора выбранных */
    onChange: OnChange;
    /** ID для тестирования */
    dataTestId?: string;
    /** Флаг траурного режима */
    isMourning?: boolean;
}
export { DropDownProps, SelectDropDownProps };
