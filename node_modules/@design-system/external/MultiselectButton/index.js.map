{"version":3,"file":"index.js","sources":["../../src/MultiselectButton/index.tsx"],"sourcesContent":["import React, {\n  useEffect,\n  useMemo,\n  useState\n} from 'react';\nimport { Button } from 'external/src/Button';\n\nimport { MultiselectButtonProps } from './types';\nimport { CHARS_AND_INDENTS, DEFAULT_PROPS } from './constants';\n\nimport styles from './styles.scss';\n\n// TODO: оптимизировать разбиение по словам\nconst generateSummaryLabel = (maxChars: number, labelsArray: string[], separator = ', '): string => {\n  let result = labelsArray[0] || '';\n\n  if (!labelsArray.length) { return ''; }\n\n  if (result.length > maxChars) {\n    const splitLabel = result.split(' ');\n\n    return splitLabel.length > 1\n      ? generateSummaryLabel(maxChars, splitLabel, ' ')\n      : `${ result.slice(0, maxChars - 1) }...`;\n  }\n\n  let shown = 1;\n\n  labelsArray.some((label, index): boolean => {\n    if (!index) { return false; } // первый элемент уже обработан - возвращаем false, чтобы обработать следующие\n\n    if (result.length + label.length + 2 > maxChars) { return true; }\n\n    shown += 1;\n    result += `${ separator }${ label }`;\n\n    return false;\n  });\n\n  if (labelsArray.length > shown) {\n    result += '...';\n  }\n\n  return result;\n};\n\nconst MultiselectButton: React.FC<MultiselectButtonProps> = props => {\n  const {\n    items,\n    activeValues,\n    onClick,\n    defaultButtonLabel,\n    type = DEFAULT_PROPS.type,\n    size = DEFAULT_PROPS.size,\n    listWidth = DEFAULT_PROPS.listWidth,\n    isMourning\n  } = props;\n  const [resizeTrackerElement, setResizeTracker] = useState<HTMLDivElement | null>(null);\n  const [blockWidth, setBlockWidth] = useState(0);\n  const [activeLabel, setActiveLabel] = useState('');\n  const { charWidth, buttonPaddingX } = CHARS_AND_INDENTS[size];\n  const activeMap = useMemo(() => (new Set(activeValues)), [activeValues]);\n  const activeLabels = useMemo(\n    (): string[] => items.reduce((result, item) => {\n      if (activeMap.has(item.value)) {\n        result.push(item.label);\n      }\n\n      return result;\n    }, [] as string[]),\n    [items, activeMap]\n  );\n\n  useEffect((): VoidFunction | undefined => {\n    if (resizeTrackerElement) {\n      const onResize = (): void => setBlockWidth(Math.max(resizeTrackerElement.offsetWidth - buttonPaddingX, 0));\n      const resizeObserver = new ResizeObserver(onResize);\n\n      onResize();\n      resizeObserver.observe(resizeTrackerElement);\n\n      return (): void => resizeObserver.disconnect();\n    }\n\n    return undefined;\n  }, [resizeTrackerElement, buttonPaddingX]);\n\n  useEffect((): void => {\n    const maxTextWidth = Math.min(listWidth, blockWidth);\n    const maxCharCount = Math.floor(maxTextWidth / charWidth) || 1;\n    const newLabel = generateSummaryLabel(maxCharCount, activeLabels);\n\n    setActiveLabel(newLabel);\n  }, [blockWidth, activeLabels, listWidth, charWidth]);\n\n  return (\n    <div className={ styles.multiselect_button } ref={ setResizeTracker }>\n      <Button\n        text={ activeLabel || defaultButtonLabel }\n        size={ size }\n        onClick={ onClick }\n        type={ type }\n        stretch\n        isMourning={ isMourning }\n      />\n    </div>\n  );\n};\n\nMultiselectButton.defaultProps = DEFAULT_PROPS as Partial<MultiselectButtonProps>;\n\nexport { MultiselectButton, DEFAULT_PROPS };\n\nexport default React.memo(MultiselectButton);\n"],"names":["generateSummaryLabel","maxChars","labelsArray","separator","result","length","splitLabel","split","slice","shown","some","label","index","MultiselectButton","props","items","activeValues","onClick","defaultButtonLabel","_a","type","DEFAULT_PROPS","_b","size","_c","listWidth","isMourning","_d","useState","resizeTrackerElement","setResizeTracker","_e","blockWidth","setBlockWidth","_f","activeLabel","setActiveLabel","_g","CHARS_AND_INDENTS","charWidth","buttonPaddingX","activeMap","useMemo","Set","activeLabels","reduce","item","has","value","push","useEffect","onResize","Math","max","offsetWidth","resizeObserver_1","ResizeObserver","observe","disconnect","maxTextWidth","min","maxCharCount","floor","newLabel","React","className","styles","multiselect_button","ref","Button","text","stretch","defaultProps","memo"],"mappings":"4PAaA,IAAMA,EAAuB,SAACC,EAAkBC,EAAuBC,gBAAAA,QACrE,IAAIC,EAASF,EAAY,IAAM,GAE/B,IAAKA,EAAYG,OAAU,MAAO,GAElC,GAAID,EAAOC,OAASJ,EAAU,CAC5B,IAAMK,EAAaF,EAAOG,MAAM,KAEhC,OAAOD,EAAWD,OAAS,EACvBL,EAAqBC,EAAUK,EAAY,KACvCF,EAAOI,MAAM,EAAGP,EAAW,SAGrC,IAAIQ,EAAQ,EAiBZ,OAfAP,EAAYQ,MAAK,SAACC,EAAOC,GACvB,QAAKA,IAEDR,EAAOC,OAASM,EAAMN,OAAS,EAAIJ,IAEvCQ,GAAS,EACTL,GAAU,GAAID,EAAcQ,GAErB,OAGLT,EAAYG,OAASI,IACvBL,GAAU,OAGLA,CACT,EAEMS,EAAsD,SAAAC,GAExD,IAAAC,EAQED,QAPFE,EAOEF,eANFG,EAMEH,UALFI,EAKEJ,qBAJFK,EAIEL,OAJFM,aAAOC,EAAcD,OACrBE,EAGER,OAHFS,aAAOF,EAAcE,OACrBC,EAEEV,YAFFW,aAAYJ,EAAcI,YAC1BC,EACEZ,aACEa,EAA2CC,EAAgC,MAA1EC,OAAsBC,OACvBC,EAA8BH,EAAS,GAAtCI,OAAYC,OACbC,EAAgCN,EAAS,IAAxCO,OAAaC,OACdC,EAAgCC,EAAkBf,GAAhDgB,cAAWC,mBACbC,EAAYC,GAAQ,WAAM,WAAKC,IAAI3B,KAAgB,CAACA,IACpD4B,EAAeF,GACnB,WAAgB,OAAA3B,EAAM8B,QAAO,SAACzC,EAAQ0C,GAKpC,OAJIL,EAAUM,IAAID,EAAKE,QACrB5C,EAAO6C,KAAKH,EAAKnC,OAGZP,IACN,MACH,CAACW,EAAO0B,IAyBV,OAtBAS,GAAU,WACR,GAAIrB,EAAsB,CACxB,IAAMsB,EAAW,WAAY,OAAAlB,EAAcmB,KAAKC,IAAIxB,EAAqByB,YAAcd,EAAgB,KACjGe,EAAiB,IAAIC,eAAeL,GAK1C,OAHAA,IACAI,EAAeE,QAAQ5B,GAEhB,WAAY,OAAA0B,EAAeG,iBAInC,CAAC7B,EAAsBW,IAE1BU,GAAU,WACR,IAAMS,EAAeP,KAAKQ,IAAInC,EAAWO,GACnC6B,EAAeT,KAAKU,MAAMH,EAAepB,IAAc,EACvDwB,EAAW/D,EAAqB6D,EAAcjB,GAEpDR,EAAe2B,KACd,CAAC/B,EAAYY,EAAcnB,EAAWc,IAGvCyB,uBAAKC,UAAYC,EAAOC,mBAAqBC,IAAMtC,GACjDkC,gBAACK,GACCC,KAAOnC,GAAejB,EACtBK,KAAOA,EACPN,QAAUA,EACVG,KAAOA,EACPmD,WACA7C,WAAaA,IAIrB,EAEAb,EAAkB2D,aAAenD,EAIjC,MAAe2C,EAAMS,KAAK5D"}