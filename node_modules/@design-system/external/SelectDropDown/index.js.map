{"version":3,"file":"index.js","sources":["../../src/SelectDropDown/index.tsx"],"sourcesContent":["// TODO написать тесты\nimport React, {\n  CSSProperties,\n  useCallback,\n  useEffect,\n  useState\n} from 'react';\nimport { createPortal } from 'react-dom';\nimport { ScrollBox } from 'shared/ScrollBox';\nimport { cssDecorator } from '@front-toolkit/utils';\n\nimport { SelectDropDownProps } from './types';\nimport { DEFAULT_PROPS, MAX_LIST_HEIGHT } from './constants';\nimport SelectList from './SelectList';\n\nimport styles from './styles.scss';\n\nconst cd = cssDecorator(styles);\n\nconst SelectDropDown: React.FC<SelectDropDownProps> = props => {\n  const {\n    isOpen: isOpenProp = DEFAULT_PROPS.isOpen,\n    items,\n    activeValues,\n    itemResetLabel,\n    onChange,\n    onScrollLock,\n    onCloseDropDown,\n    targetWidth: targetWidthProp,\n    dataTestId,\n    listWidth = DEFAULT_PROPS.listWidth,\n    zIndex = DEFAULT_PROPS.zIndex,\n    isMultiselect = DEFAULT_PROPS.isMultiselect,\n    alignDropDown = DEFAULT_PROPS.alignDropDown,\n    minTop = DEFAULT_PROPS.minTop,\n    maxBottom = DEFAULT_PROPS.maxBottom,\n    children,\n    isMourning\n  } = props;\n  const [wrapperStyle, setWrapperStyle] = useState<CSSProperties>({ opacity: 0 });\n  const [targetNode, setTargetNode] = useState<HTMLDivElement | null>(null);\n  const isOpen = isOpenProp && Boolean(targetNode);\n\n  const putTargetRefToState = useCallback(node => setTargetNode(node), []);\n\n  useEffect(() => {\n    if (!targetNode || !isOpen) { return; }\n\n    const targetRectangle = targetNode.getBoundingClientRect();\n\n    const {\n      left: targetLeft,\n      width: targetWidthInPixels,\n      top: targetTop\n    } = targetRectangle;\n    const maxViewportBottom = window.innerHeight - maxBottom;\n    const top = Math.max(targetTop, minTop);\n    const availableHeight = Math.max(maxViewportBottom - top, 0);\n    const maxHeight = Math.min(MAX_LIST_HEIGHT, availableHeight);\n    let leftShift = 0;\n\n    switch (alignDropDown) {\n      case 'right':\n        leftShift = targetWidthInPixels - listWidth;\n        break;\n\n      case 'center':\n        leftShift = (targetWidthInPixels - listWidth) / 2;\n        break;\n\n      default:\n        break;\n    }\n\n    setWrapperStyle({\n      width: listWidth,\n      maxHeight,\n      left: Math.max(targetLeft + leftShift, 0),\n      top,\n      zIndex: zIndex + 1,\n      opacity: 1\n    });\n  }, [\n    minTop,\n    maxBottom,\n    listWidth,\n    targetNode,\n    isOpen,\n    alignDropDown,\n    zIndex,\n    isMourning\n  ]);\n\n  useEffect((): VoidFunction | undefined => {\n    if (isOpen) {\n      window.addEventListener('resize', onCloseDropDown);\n\n      if (onScrollLock) { onScrollLock(true); }\n\n      return (): void => {\n        window.removeEventListener('resize', onCloseDropDown);\n\n        if (onScrollLock) { onScrollLock(false); }\n      };\n    }\n\n    return undefined;\n  }, [isOpen, onCloseDropDown, onScrollLock]);\n\n  return (\n    <>\n      { /* eslint-disable-next-line jsx-a11y/click-events-have-key-events,jsx-a11y/no-static-element-interactions */ }\n      <div\n        data-test-id={ dataTestId }\n        className={ styles.target_wrapper }\n        ref={ putTargetRefToState }\n        style={ { width: targetWidthProp } }\n      >\n        { children }\n      </div>\n      { isOpen && (\n        createPortal(\n          <>\n            { /* eslint-disable jsx-a11y/click-events-have-key-events, jsx-a11y/no-static-element-interactions */ }\n            <div\n              className={ styles.overlay }\n              onClick={ onCloseDropDown }\n              style={ { zIndex } }\n            />\n            <div\n              data-test-id={ dataTestId ? `${ dataTestId }__dropdown` : undefined }\n              className={ cd('fixed_wrapper', { mourning: isMourning }) }\n              style={ wrapperStyle }\n            >\n              <ScrollBox overrideWrapperClassName={ styles.scrollbar }>\n                <SelectList\n                  onChange={ onChange }\n                  itemResetLabel={ itemResetLabel }\n                  items={ items }\n                  activeValues={ activeValues }\n                  isMultiselect={ isMultiselect }\n                  onCloseDropDown={ onCloseDropDown }\n                  isMourning={ isMourning }\n                />\n              </ScrollBox>\n            </div>\n          </>,\n          document.body\n        )\n      ) }\n    </>\n  );\n};\n\nSelectDropDown.defaultProps = DEFAULT_PROPS;\n\nexport { SelectDropDown };\n\nexport default React.memo(SelectDropDown);\n"],"names":["cd","cssDecorator","styles","SelectDropDown","props","_a","isOpenProp","DEFAULT_PROPS","isOpen","items","activeValues","itemResetLabel","onChange","onScrollLock","onCloseDropDown","targetWidthProp","dataTestId","_b","listWidth","_c","zIndex","_d","isMultiselect","_e","alignDropDown","_f","minTop","_g","maxBottom","children","isMourning","_h","useState","opacity","wrapperStyle","setWrapperStyle","_j","targetNode","setTargetNode","Boolean","putTargetRefToState","useCallback","node","useEffect","targetRectangle","getBoundingClientRect","targetLeft","targetWidthInPixels","targetTop","maxViewportBottom","window","innerHeight","top","Math","max","availableHeight","maxHeight","min","MAX_LIST_HEIGHT","leftShift","width","left","addEventListener","removeEventListener","React","className","target_wrapper","ref","style","createPortal","overlay","onClick","undefined","mourning","ScrollBox","overrideWrapperClassName","scrollbar","SelectList","document","body","defaultProps","memo"],"mappings":"mWAiBA,IAAMA,EAAKC,EAAaC,GAElBC,EAAgD,SAAAC,GAElD,IAAAC,EAiBED,SAjBME,aAAaC,EAAcC,SACnCC,EAgBEL,QAfFM,EAeEN,eAdFO,EAcEP,iBAbFQ,EAaER,WAZFS,EAYET,eAXFU,EAWEV,kBAVWW,EAUXX,cATFY,EASEZ,aARFa,EAQEb,YARFc,aAAYX,EAAcW,YAC1BC,EAOEf,SAPFgB,aAASb,EAAca,SACvBC,EAMEjB,gBANFkB,aAAgBf,EAAce,gBAC9BC,EAKEnB,gBALFoB,aAAgBjB,EAAciB,gBAC9BC,EAIErB,SAJFsB,aAASnB,EAAcmB,SACvBC,EAGEvB,YAHFwB,aAAYrB,EAAcqB,YAC1BC,EAEEzB,WADF0B,EACE1B,aACE2B,EAAkCC,EAAwB,CAAEC,QAAS,IAApEC,OAAcC,OACfC,EAA8BJ,EAAgC,MAA7DK,OAAYC,OACb9B,EAASF,GAAciC,QAAQF,GAE/BG,EAAsBC,GAAY,SAAAC,GAAQ,OAAAJ,EAAcI,KAAO,IAkErE,OAhEAC,GAAU,WACR,GAAKN,GAAe7B,EAApB,CAEA,IAAMoC,EAAkBP,EAAWQ,wBAG3BC,EAGJF,OAFKG,EAELH,QADGI,EACHJ,MACEK,EAAoBC,OAAOC,YAAcvB,EACzCwB,EAAMC,KAAKC,IAAIN,EAAWtB,GAC1B6B,EAAkBF,KAAKC,IAAIL,EAAoBG,EAAK,GACpDI,EAAYH,KAAKI,IAAIC,EAAiBH,GACxCI,EAAY,EAEhB,OAAQnC,GACN,IAAK,QACHmC,EAAYZ,EAAsB7B,EAClC,MAEF,IAAK,SACHyC,GAAaZ,EAAsB7B,GAAa,EAOpDiB,EAAgB,CACdyB,MAAO1C,EACPsC,YACAK,KAAMR,KAAKC,IAAIR,EAAaa,EAAW,GACvCP,MACAhC,OAAQA,EAAS,EACjBa,QAAS,OAEV,CACDP,EACAE,EACAV,EACAmB,EACA7B,EACAgB,EACAJ,EACAU,IAGFa,GAAU,WACR,GAAInC,EAKF,OAJA0C,OAAOY,iBAAiB,SAAUhD,GAE9BD,GAAgBA,GAAa,GAE1B,WACLqC,OAAOa,oBAAoB,SAAUjD,GAEjCD,GAAgBA,GAAa,MAKpC,CAACL,EAAQM,EAAiBD,IAG3BmD,gCAEEA,sCACiBhD,EACfiD,UAAY/D,EAAOgE,eACnBC,IAAM3B,EACN4B,MAAQ,CAAER,MAAO7C,IAEfc,GAEFrB,GACA6D,EACEL,gCAEEA,uBACEC,UAAY/D,EAAOoE,QACnBC,QAAUzD,EACVsD,MAAQ,CAAEhD,YAEZ4C,sCACiBhD,EAAiBA,oBAA0BwD,EAC1DP,UAAYjE,EAAG,gBAAiB,CAAEyE,SAAU3C,IAC5CsC,MAAQlC,GAER8B,gBAACU,GAAUC,yBAA2BzE,EAAO0E,WAC3CZ,gBAACa,GACCjE,SAAWA,EACXD,eAAiBA,EACjBF,MAAQA,EACRC,aAAeA,EACfY,cAAgBA,EAChBR,gBAAkBA,EAClBgB,WAAaA,OAKrBgD,SAASC,MAKnB,EAEA5E,EAAe6E,aAAezE,EAI9B,MAAeyD,EAAMiB,KAAK9E"}