/// <reference types="react" />
import { FocusEventHandler, RefObject } from 'react';
import { InputIcon } from "./shared/BaseInput/WithIcons/index";
import { BaseInputSize } from "./types-3e12d472";
interface ShareableInputProps {
    /** id поля ввода */
    id?: string;
    /** Атрибут name поля ввода  */
    name?: string;
    /** Атрибут value поля ввода */
    value?: string;
    /** Флаг pseudo поля ввода */
    pseudo?: boolean;
    /** Флаг для отключение поля ввода */
    disabled?: boolean;
    /** Флаг отображения подсказки / ошибки */
    showHint?: boolean;
    /** Флаг о наличии ошибки в поле ввода */
    isError?: boolean;
    /** Флаг отображения лейбла сбоку от поля ввода */
    labelAside?: boolean;
    /** Атрибут placeholder поля ввода */
    placeholder?: string;
    /** ref на поля ввода */
    inputRef?: RefObject<HTMLInputElement>;
    /** Массив svg иконок для поля ввода */
    icons?: Array<InputIcon>;
    /** Позиционирование иконок слева от поля ввода */
    iconsLeft?: boolean;
    /** id поля ввода для тестов */
    dataTestId?: string;
    /** id хинта для тестов */
    dataTestHintId?: string;
    /** Флаг uncontrolled режима для input */
    uncontrolled?: boolean;
    /** Максимальное количество символов инпута */
    maxLength?: number;
    /** Счетчик количества введенных символов */
    counter?: React.ReactNode;
    /** Имя поля, передается в onChange дополнительным аргументом */
    fieldName?: string;
    /** Отключает по дефолту заданную минимальную ширину инпута */
    withoutDefaultMinWidth?: boolean;
    /** Тип инпута */
    inputType?: 'text' | 'tel' | 'email' | 'date';
    /** Флаг для фокусировки поля ввода после маунта компонента */
    autoFocus?: boolean;
    /** Коллбэк для события клика на поле ввода */
    onClick?: React.MouseEventHandler;
    /** Коллбэк для события нажатия клавиш, создающих символы (буквы, цифры, пунктуация и т.д.), в поле ввода */
    onKeyPress?: React.KeyboardEventHandler;
    /** Коллбэк для события ввода в поле ввода */
    onChange?: (value: string, fieldName?: string) => void;
    /** Коллбэк для события focus */
    onFocus?(): void;
    /** Коллбэк для события blur */
    onBlur?: FocusEventHandler;
    /** Колбэк на событие вызова контекстного меню */
    onContextMenu?: (event: React.MouseEvent) => void;
    /** Коллбэк для события нажатия любых клавиш в поле ввода, в отличии от {@link onKeyPress} */
    onKeyDown?: React.KeyboardEventHandler;
}
interface InputHintProps {
    /** Флаг disabled */
    disabled?: boolean;
    /** Флаг isError */
    isError?: boolean;
    /** ID для тестов */
    dataTestId?: string;
    /** Текст подсказки / сообщения об ошибке */
    hintMessage?: string;
    /** Цвет подсказки (отобразится если нет сообщения об ошибке и Input не disabled) */
    hintColor?: 'primary' | 'secondary' | 'tass_secondary' | 'tass' | 'negative_dark';
}
interface InputLabelProps<Size extends BaseInputSize> {
    /** Текст ярлыка */
    text?: string;
    /** Размер ярлыка */
    size?: Size;
    /** ID поля ввода, связанного с ярлыком */
    htmlFor?: string;
}
export { ShareableInputProps, InputHintProps, InputLabelProps };
