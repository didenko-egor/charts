{"version":3,"file":"index.js","sources":["../../../src/typography/Text/index.tsx"],"sourcesContent":["import React from 'react';\nimport { cssDecorator } from '@front-toolkit/utils';\nimport {\n  withInherit,\n  WithInheritProps,\n  DEFAULT_PROPS as DEFAULT_PROPS_BY_WITH_INHERIT\n} from 'shared/HOCs/withInherit';\nimport {\n  withLinkMemo,\n  LinkWrapperProps,\n  DEFAULT_PROPS as DEFAULT_PROPS_BY_LINK\n} from 'external/src/Link';\nimport { FontColor } from 'external/types/common';\nimport { getStoryComponent } from 'shared/storyHelper';\n\nimport styles from './styles.scss';\n\nconst cd = cssDecorator(styles);\n\nexport type TextFontWeight = 'bold' | 'regular';\n\nexport type TextSize =\n  'extra_large'\n  | 'large'\n  | 'default'\n  | 'small';\n\nexport type TagName =\n  'p'\n  | 'span'\n  | 'strong'\n  | 'em'\n  | 'u'\n  | 'sub'\n  | 'sup'\n  | 'del';\n\n// Заготовка на случай расширения набора цветов для отдельных компонентов\nexport type TextFontColor = FontColor;\n\nexport interface TextPropsBase {\n  /** Имя тега */\n  tagName?: TagName;\n\n  /** Тип (размер) текста */\n  size?: TextSize;\n\n  /** Насыщенность шрифта */\n  fontWeight?: TextFontWeight;\n\n  /** Цвет текста */\n  color?: TextFontColor;\n\n  /** Флаг для использования шрифта PT Serif */\n  serif?: boolean;\n\n  /** ID для тестирования */\n  dataTestId?: string;\n\n  /** Дочерние элементы */\n  children: React.ReactNode;\n\n  /** Флаг для наследования цвета текста от родителя */\n  inheritColor?: boolean;\n\n  /** Флаг для использования нативных стилей тега */\n  useNativeStyle?: boolean;\n}\n\nexport const DEFAULT_PROPS = {\n  tagName: 'p',\n  size: 'default',\n  color: 'primary',\n  fontWeight: 'regular',\n  inheritColor: false,\n  useNativeStyle: false\n};\n\nconst Text: React.FC<TextPropsBase> = ({\n  tagName = DEFAULT_PROPS.tagName,\n  size = DEFAULT_PROPS.size,\n  fontWeight = DEFAULT_PROPS.fontWeight,\n  color = DEFAULT_PROPS.color,\n  inheritColor = DEFAULT_PROPS.inheritColor,\n  serif,\n  dataTestId,\n  useNativeStyle,\n  children\n}) => {\n  const textClasses = cd(\n    'text',\n    {\n      serif,\n      [`size_${ size }`]: true,\n      [`font_weight_${ fontWeight }`]: !(useNativeStyle && tagName === 'strong'),\n      [`color_${ color }`]: !inheritColor,\n      is_underlined: tagName === 'u'\n    }\n  );\n\n  return React.createElement(\n    tagName,\n    {\n      'data-test-id': dataTestId,\n      className: textClasses\n    },\n    children\n  );\n};\n\ntype InheritableTextProps = TextPropsBase & WithInheritProps;\n\nconst DEFAULT_PROPS_WITH_INHERIT = {\n  ...DEFAULT_PROPS,\n  ...DEFAULT_PROPS_BY_WITH_INHERIT\n} as InheritableTextProps;\n\nconst StoryComponent = getStoryComponent<InheritableTextProps, LinkWrapperProps>(\n  DEFAULT_PROPS_WITH_INHERIT as InheritableTextProps,\n  DEFAULT_PROPS_BY_LINK as LinkWrapperProps\n);\n\nconst InheritableText = withInherit<TextPropsBase>(Text);\n\nexport { StoryComponent };\n\nexport default withLinkMemo<InheritableTextProps>(InheritableText);\n\nexport type TextProps = InheritableTextProps & LinkWrapperProps;\n"],"names":["cd","cssDecorator","styles","DEFAULT_PROPS","tagName","size","color","fontWeight","inheritColor","useNativeStyle","getStoryComponent","__assign","DEFAULT_PROPS_BY_WITH_INHERIT","DEFAULT_PROPS_BY_LINK","withLinkMemo","withInherit","_a","_c","_d","_e","_f","_g","serif","dataTestId","children","textClasses","_b","React","createElement","className"],"mappings":"sZAiBA,IAAMA,EAAKC,EAAaC,GAoDXC,EAAgB,CAC3BC,QAAS,IACTC,KAAM,UACNC,MAAO,UACPC,WAAY,UACZC,cAAc,EACdC,gBAAgB,GA0CKC,EALYC,OAC9BR,GACAS,GAKHC,GAGF,MAIeC,EAJSC,GA5Cc,SAACC,SACrCC,YAAAb,aAAUD,EAAcC,UACxBc,SAAAb,aAAOF,EAAcE,OACrBc,eAAAZ,aAAaJ,EAAcI,aAC3Ba,UAAAd,aAAQH,EAAcG,QACtBe,iBAAAb,aAAeL,EAAcK,eAC7Bc,UACAC,eACAd,mBACAe,aAEMC,EAAczB,EAClB,YAEEsB,UACC,QAASjB,IAAU,EACpBqB,EAAC,eAAgBnB,KAAkBE,GAA8B,WAAZL,GACrDsB,EAAC,SAAUpB,IAAYE,EACvBkB,gBAA2B,MAAZtB,MAInB,OAAOuB,EAAMC,cACXxB,EACA,CACE,eAAgBmB,EAChBM,UAAWJ,GAEbD,EAEJ"}