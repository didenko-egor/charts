{"version":3,"file":"withLinkMemo.js","sources":["../../src/Link/withLinkMemo.tsx"],"sourcesContent":["import React, { forwardRef } from 'react';\nimport 'focus-visible';\nimport { FontColor } from 'external/types/common';\n\nimport { LinkWrapper, LinkWrapperProps } from './LinkWrapper';\n\nexport type DefaultPropsPassedByLink = {\n  color: FontColor;\n  inline: boolean;\n};\n\nfunction withLinkMemo<T extends LinkWrapperProps>(\n  NonMemoizedComponent: React.ComponentType<T>\n): React.FC<T & LinkWrapperProps> {\n  type ExportedComponentProps = T & LinkWrapperProps;\n  const displayName = NonMemoizedComponent.displayName || NonMemoizedComponent.name || 'Component';\n\n  // тут тип лучше явно не передавать, чтобы не отхватить непередаваемую боль\n  const ComponentWithLink = forwardRef<unknown, ExportedComponentProps>((\n    props,\n    ref: React.Ref<unknown>\n  ) => {\n    const {\n      dataTestId,\n      href,\n      rel,\n      target,\n      onClick,\n      color,\n      children,\n      withoutUnderline,\n      disabled,\n      ...rest\n    } = props;\n    const wrappedComponentProps = {\n      ...rest,\n      color,\n      onClick,\n      dataTestId\n    } as T;\n\n    if (href) {\n      wrappedComponentProps.dataTestId = undefined;\n      wrappedComponentProps.onClick = undefined;\n\n      return (\n        <LinkWrapper\n          ref={ ref }\n          href={ href }\n          rel={ rel }\n          onClick={ onClick }\n          target={ target }\n          withoutUnderline={ withoutUnderline }\n          color={ color }\n          dataTestId={ dataTestId }\n          disabled={ disabled }\n        >\n          <NonMemoizedComponent { ...wrappedComponentProps }>\n            { children }\n          </NonMemoizedComponent>\n        </LinkWrapper>\n      );\n    }\n\n    return (\n      <NonMemoizedComponent { ...wrappedComponentProps } ref={ ref }>\n        { children }\n      </NonMemoizedComponent>\n    );\n  });\n\n  ComponentWithLink.displayName = `withLink(${ displayName })`;\n\n  return React.memo(ComponentWithLink as React.FC<ExportedComponentProps>);\n}\n\nexport { withLinkMemo };\n"],"names":["withLinkMemo","NonMemoizedComponent","displayName","name","ComponentWithLink","forwardRef","props","ref","dataTestId","href","rel","target","onClick","color","children","withoutUnderline","disabled","rest","wrappedComponentProps","__assign","undefined","React","LinkWrapper","memo"],"mappings":"wJAWA,SAASA,EACPC,GAGA,IAAMC,EAAcD,EAAqBC,aAAeD,EAAqBE,MAAQ,YAG/EC,EAAoBC,GAA4C,SACpEC,EACAC,GAGE,IAAAC,EAUEF,aATFG,EASEH,OARFI,EAQEJ,MAPFK,EAOEL,SANFM,EAMEN,UALFO,EAKEP,QAJFQ,EAIER,WAHFS,EAGET,mBAFFU,EAEEV,WADCW,IACDX,EAXE,iGAYAY,EAAwBC,OACzBF,IACHJ,QACAD,UACAJ,eAGF,OAAIC,GACFS,EAAsBV,gBAAaY,EACnCF,EAAsBN,aAAUQ,EAG9BC,gBAACC,GACCf,IAAMA,EACNE,KAAOA,EACPC,IAAMA,EACNE,QAAUA,EACVD,OAASA,EACTI,iBAAmBA,EACnBF,MAAQA,EACRL,WAAaA,EACbQ,SAAWA,GAEXK,gBAACpB,OAA0BiB,GACvBJ,KAORO,gBAACpB,OAA0BiB,GAAwBX,IAAMA,IACrDO,MAOR,OAFAV,EAAkBF,YAAc,YAAaA,MAEtCmB,EAAME,KAAKnB,EACpB"}