{"version":3,"file":"LinkWrapper.js","sources":["../../src/Link/LinkWrapper.tsx"],"sourcesContent":["import React, { useMemo, forwardRef, PropsWithChildren } from 'react';\nimport { cssDecorator } from '@front-toolkit/utils';\nimport { FontColor } from 'external/types/common';\n\nimport styles from './styles.scss';\n\nconst cd = cssDecorator(styles);\n\nexport interface LinkWrapperProps {\n  /** URL (только в режиме ссылки) */\n  href?: string;\n\n  /** Атрибут target (только в режиме ссылки) */\n  target?: string;\n\n  /** Атрибут rel (только в режиме ссылки) */\n  rel?: string;\n\n  /** ID для тестирования */\n  dataTestId?: string;\n\n  /** Цвет текста ссылки */\n  color?: FontColor;\n\n  /** Флаг для наследования цвета текста от родителя */\n  inheritColor?: boolean;\n\n  /** Без стартового подчеркивания */\n  withoutUnderline?: boolean;\n\n  /** Коллбэк, вызываемый при нажатии на ссылку */\n  onClick?: React.MouseEventHandler<HTMLAnchorElement>;\n\n  /** Флаг, ссылка неактивна */\n  disabled?: boolean;\n}\n\n/** Дефолтные значения, применимые к экспортируемым компонентам */\nexport const DEFAULT_PROPS = {\n  target: '_blank',\n  color: 'primary',\n  disabled: false,\n  withoutUnderline: false\n};\n\nconst LinkWrapper = forwardRef<unknown, PropsWithChildren<LinkWrapperProps>>((\n  {\n    href,\n    target = DEFAULT_PROPS.target,\n    rel,\n    dataTestId,\n    onClick,\n    // TODO: use color prop\n    // color = DEFAULT_PROPS.color,\n    children,\n    withoutUnderline = DEFAULT_PROPS.withoutUnderline,\n    disabled = DEFAULT_PROPS.disabled\n  },\n  ref\n) => {\n  const className = useMemo(\n    () => cd(\n      'link_wrapper',\n      {\n        disabled,\n        without_underline: withoutUnderline\n      }\n    ),\n    [withoutUnderline, disabled]\n  );\n\n  const onClickHandler: React.MouseEventHandler<HTMLAnchorElement> = (event): void => {\n    if (disabled) {\n      event.preventDefault();\n    } else if (onClick) {\n      onClick(event);\n    }\n  };\n\n  return (\n    <a\n      ref={ ref as React.Ref<HTMLAnchorElement> }\n      onClick={ onClickHandler }\n      data-test-id={ dataTestId }\n      href={ href }\n      rel={ rel }\n      target={ target }\n      className={ className }\n    >\n      { children }\n    </a>\n  );\n});\n\nLinkWrapper.displayName = 'LinkWrapper';\n\nexport { LinkWrapper };\n"],"names":["cd","cssDecorator","styles","DEFAULT_PROPS","target","color","disabled","withoutUnderline","LinkWrapper","forwardRef","_a","ref","href","_b","rel","dataTestId","onClick","children","_c","_d","className","useMemo","without_underline","React","event","preventDefault","displayName"],"mappings":"uIAMA,IAAMA,EAAKC,EAAaC,GAgCXC,EAAgB,CAC3BC,OAAQ,SACRC,MAAO,UACPC,UAAU,EACVC,kBAAkB,GAGdC,EAAcC,GAAyD,SAC3EC,EAYAC,OAXEC,SACAC,WAAAT,aAASD,EAAcC,SACvBU,QACAC,eACAC,YAGAC,aACAC,qBAAAX,aAAmBJ,EAAcI,mBACjCY,aAAAb,aAAWH,EAAcG,WAIrBc,EAAYC,GAChB,WAAM,OAAArB,EACJ,eACA,CACEM,WACAgB,kBAAmBf,MAGvB,CAACA,EAAkBD,IAWrB,OACEiB,qBACEZ,IAAMA,EACNK,QAX+D,SAACQ,GAC9DlB,EACFkB,EAAMC,iBACGT,GACTA,EAAQQ,mBAQOT,EACfH,KAAOA,EACPE,IAAMA,EACNV,OAASA,EACTgB,UAAYA,GAEVH,EAGR,IAEAT,EAAYkB,YAAc"}