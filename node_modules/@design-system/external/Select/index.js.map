{"version":3,"file":"index.js","sources":["../../src/Select/index.tsx"],"sourcesContent":["// TODO написать тесты\nimport React, { useCallback, useState } from 'react';\nimport { MultiselectButtonProps } from 'external/src/MultiselectButton/types';\nimport { SelectDropDownProps } from 'external/src/SelectDropDown/types';\nimport { DEFAULT_PROPS as MULTISELECT_BUTTON_DEFAULTS } from 'external/src/MultiselectButton/constants';\nimport { DEFAULT_PROPS as DROP_DOWN_DEFAULTS } from 'external/src/SelectDropDown/constants';\nimport { MultiselectButton } from 'external/src/MultiselectButton';\nimport SelectDropDown from 'external/src/SelectDropDown'; // eslint-disable-line import/no-named-as-default\n\n/* eslint-disable react/default-props-match-prop-types */\nexport const DEFAULT_PROPS: Partial<SelectProps> = {\n  buttonType: MULTISELECT_BUTTON_DEFAULTS.type,\n  minTop: DROP_DOWN_DEFAULTS.minTop,\n  maxBottom: DROP_DOWN_DEFAULTS.maxBottom,\n  isMultiselect: DROP_DOWN_DEFAULTS.isMultiselect,\n  zIndex: DROP_DOWN_DEFAULTS.zIndex,\n  listWidth: DROP_DOWN_DEFAULTS.listWidth,\n  alignDropDown: DROP_DOWN_DEFAULTS.alignDropDown,\n  buttonSize: MULTISELECT_BUTTON_DEFAULTS.size\n};\n/* eslint-enable react/default-props-match-prop-types */\n\ntype SkippedProps = 'isOpen'\n| 'itemResetLabel'\n| 'onCloseDropDown'\n| 'children';\n\nexport type SelectProps = Omit<SelectDropDownProps, SkippedProps> & {\n  /** Текст кнопки по умолчанию */\n  defaultButtonLabel: string;\n\n  /** Текст элемента для сброса к дефолту, если отличается от defaultButtonLabel */\n  itemResetLabel?: string;\n\n  /** Размер кнопки */\n  buttonSize?: MultiselectButtonProps['size'];\n\n  /** Оформление кнопки */\n  buttonType?: MultiselectButtonProps['type'];\n\n  /** Обработчик клика на кнопку открытия модального окна (для метрик) */\n  onOpenButtonClick?: () => void;\n\n  /** Флаг траурного режима */\n  isMourning?: boolean;\n};\n\nconst Select: React.FC<SelectProps> = props => {\n  const {\n    items,\n    defaultButtonLabel,\n    activeValues,\n    itemResetLabel,\n    onChange,\n    onScrollLock,\n    onOpenButtonClick,\n    targetWidth,\n    dataTestId,\n    buttonType = DEFAULT_PROPS.buttonType,\n    minTop = DEFAULT_PROPS.minTop,\n    maxBottom = DEFAULT_PROPS.maxBottom,\n    isMultiselect = DEFAULT_PROPS.isMultiselect,\n    zIndex = DEFAULT_PROPS.zIndex,\n    listWidth = DEFAULT_PROPS.listWidth,\n    alignDropDown = DEFAULT_PROPS.alignDropDown,\n    buttonSize = DEFAULT_PROPS.buttonSize,\n    isMourning\n  } = props;\n  const [isOpen, setIsOpen] = useState(false);\n  const onSetClosed = useCallback(() => setIsOpen(false), []);\n  const onSetOpen = useCallback(() => {\n    if (onOpenButtonClick) {\n      onOpenButtonClick();\n    }\n\n    setIsOpen(true);\n  }, [onOpenButtonClick]);\n\n  return (\n    <SelectDropDown\n      isMultiselect={ isMultiselect }\n      isOpen={ isOpen }\n      activeValues={ activeValues }\n      items={ items }\n      itemResetLabel={ itemResetLabel || defaultButtonLabel }\n      minTop={ minTop }\n      maxBottom={ maxBottom }\n      dataTestId={ dataTestId }\n      zIndex={ zIndex }\n      listWidth={ listWidth }\n      targetWidth={ targetWidth }\n      onScrollLock={ onScrollLock }\n      onChange={ onChange }\n      onCloseDropDown={ onSetClosed }\n      alignDropDown={ alignDropDown }\n      isMourning={ isMourning }\n    >\n      <MultiselectButton\n        defaultButtonLabel={ defaultButtonLabel }\n        listWidth={ listWidth }\n        activeValues={ activeValues }\n        items={ items }\n        onClick={ onSetOpen }\n        dataTestId={ dataTestId ? `select-target-${ dataTestId }` : undefined }\n        type={ buttonType }\n        size={ buttonSize }\n        isMourning={ isMourning }\n      />\n    </SelectDropDown>\n  );\n};\n\nSelect.defaultProps = DEFAULT_PROPS;\n\nexport { Select };\nexport default React.memo<SelectProps>(Select);\n"],"names":["DEFAULT_PROPS","buttonType","MULTISELECT_BUTTON_DEFAULTS","type","minTop","DROP_DOWN_DEFAULTS","maxBottom","isMultiselect","zIndex","listWidth","alignDropDown","buttonSize","size","Select","props","items","defaultButtonLabel","activeValues","itemResetLabel","onChange","onScrollLock","onOpenButtonClick","targetWidth","dataTestId","_a","_b","_c","_d","_e","_f","_g","_h","isMourning","_j","useState","isOpen","setIsOpen","onSetClosed","useCallback","onSetOpen","React","SelectDropDown","onCloseDropDown","MultiselectButton","onClick","undefined","defaultProps","memo"],"mappings":"sSAUaA,EAAsC,CACjDC,WAAYC,EAA4BC,KACxCC,OAAQC,EAAmBD,OAC3BE,UAAWD,EAAmBC,UAC9BC,cAAeF,EAAmBE,cAClCC,OAAQH,EAAmBG,OAC3BC,UAAWJ,EAAmBI,UAC9BC,cAAeL,EAAmBK,cAClCC,WAAYT,EAA4BU,MA6BpCC,EAAgC,SAAAC,GAElC,IAAAC,EAkBED,QAjBFE,EAiBEF,qBAhBFG,EAgBEH,eAfFI,EAeEJ,iBAdFK,EAcEL,WAbFM,EAaEN,eAZFO,EAYEP,oBAXFQ,EAWER,cAVFS,EAUET,aATFU,EASEV,aATFb,aAAaD,EAAcC,aAC3BwB,EAQEX,SARFV,aAASJ,EAAcI,SACvBsB,EAOEZ,YAPFR,aAAYN,EAAcM,YAC1BqB,EAMEb,gBANFP,aAAgBP,EAAcO,gBAC9BqB,EAKEd,SALFN,aAASR,EAAcQ,SACvBqB,EAIEf,YAJFL,aAAYT,EAAcS,YAC1BqB,EAGEhB,gBAHFJ,aAAgBV,EAAcU,gBAC9BqB,EAEEjB,aAFFH,aAAaX,EAAcW,aAC3BqB,EACElB,aACEmB,EAAsBC,GAAS,GAA9BC,OAAQC,OACTC,EAAcC,GAAY,WAAM,OAAAF,GAAU,KAAQ,IAClDG,EAAYD,GAAY,WACxBjB,GACFA,IAGFe,GAAU,KACT,CAACf,IAEJ,OACEmB,gBAACC,GACClC,cAAgBA,EAChB4B,OAASA,EACTlB,aAAeA,EACfF,MAAQA,EACRG,eAAiBA,GAAkBF,EACnCZ,OAASA,EACTE,UAAYA,EACZiB,WAAaA,EACbf,OAASA,EACTC,UAAYA,EACZa,YAAcA,EACdF,aAAeA,EACfD,SAAWA,EACXuB,gBAAkBL,EAClB3B,cAAgBA,EAChBsB,WAAaA,GAEbQ,gBAACG,GACC3B,mBAAqBA,EACrBP,UAAYA,EACZQ,aAAeA,EACfF,MAAQA,EACR6B,QAAUL,EACVhB,WAAaA,EAAa,iBAAkBA,OAAgBsB,EAC5D1C,KAAOF,EACPW,KAAOD,EACPqB,WAAaA,IAIrB,EAEAnB,EAAOiC,aAAe9C,EAGtB,MAAewC,EAAMO,KAAkBlC"}