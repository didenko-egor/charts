{"version":3,"file":"index.js","sources":["../../src/Carousel/index.tsx"],"sourcesContent":["import React, {\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState\n} from 'react';\nimport Swiper from 'shared/Swiper';\nimport { cssDecorator } from '@front-toolkit/utils';\nimport { CustomLinkType } from 'shared/types/customLink';\n\nimport { IconArrowLeft, IconArrowRight } from 'external/src/icons';\n\nimport { BuiltInTheme, builtInThemes, CarouselColorTheme } from './types';\nimport CarouselHeader from './Header';\nimport CarouselBody from './Body';\n\nimport styles from './Carousel.module.scss';\n\nconst cd = cssDecorator(styles);\n\n// Следить за соответствием с переменными в scss\nconst SLIDE_WIDTH_DEFAULT = 244;\nconst SLIDE_WIDTH_SMALL = 188;\n\nexport interface CarouselProps {\n  /** Заголовок карусели */\n  title: string;\n\n  /** Массив компонентов для размещения в слайдах */\n  content: React.ReactNode[];\n\n  /** Палитра цветов UI-элеметнов карусели */\n  theme: BuiltInTheme | CarouselColorTheme;\n\n  /** Ссылка для перехода по клику на заголовок */\n  href?: string;\n\n  /** Растягивать содержимое по вертикали, так чтобы оно заходило под заголовок */\n  fillHeader?: boolean;\n\n  /** Флаг инверсии цвета заголовка */\n  invertTitle?: boolean;\n\n  /** Флаг инверсии цвета UI-элеметнов */\n  invertControls?: boolean;\n\n  /** Флаг отображения уменьшенных (мобильных) слайдов */\n  smallSlides?: boolean;\n\n  /** Флаг переключения режима карусели (компактный: 2 слайда, полный: 4 слайда) */\n  twoSlides?: boolean;\n\n  /** id для тестирования */\n  dataTestId?: string;\n\n  /** Пользовательский компонент ссылки заголовка.\n   * Используется вместо встроенного для дополнительной стилизации и оборачивания в next/link\n   * */\n  customLink?: CustomLinkType;\n\n  /** Флаг траурного режима */\n  isMourning?: boolean;\n\n  /** Коллбэк, вызываемый при прокрутке карусели.\n   * В качестве аргумента передаются индекс первого и последнего слайда в текущем блоке\n  */\n  onChange?: (firstIndex: number, lastIndex: number) => void;\n\n  /** Коллбэк, вызываемый при клике на кнопки прокрутки карусели */\n  onControlsClick?: () => void;\n\n  /** Коллбэк, вызываемый при клике на заголовок карусели */\n  onTitleClick?: (url?: string, titleText?: string) => void;\n}\n\nconst Carousel: React.FC<CarouselProps> = ({\n  title,\n  theme,\n  content,\n  fillHeader,\n  invertTitle,\n  invertControls,\n  smallSlides,\n  twoSlides,\n  href,\n  dataTestId,\n  customLink,\n  isMourning,\n  onChange,\n  onControlsClick,\n  onTitleClick\n}) => {\n  const isRecommender = theme === 'recommender';\n\n  const [carouselRef, setCarouselRef] = useState<HTMLDivElement | null>(null);\n  const [overlayButton, setOverlayButton] = useState<'left' | 'right' | null>(null);\n  const [slidesCount] = useState(content.length);\n  const [slideFilmOffset, setSlideFilmOffset] = useState(0);\n  const [blocksCount, setBlocksCount] = useState(0);\n  const [currentBlockIndex, setCurrentBlockIndex] = useState(0);\n\n  const firstSlideIndex = useRef(0);\n  const lastSlideIndex = useRef(content.length - 1);\n\n  const slideWidth = useMemo(() => (smallSlides ? SLIDE_WIDTH_SMALL : SLIDE_WIDTH_DEFAULT), [smallSlides]);\n  const slidesInBlock = useMemo(() => (twoSlides ? 2 : 4), [twoSlides]);\n\n  const offsetToNthSlidesBlock = useCallback(\n    (blockIndex: number) => {\n      setSlideFilmOffset(blockIndex * slidesInBlock * slideWidth);\n      setCurrentBlockIndex(blockIndex);\n      firstSlideIndex.current = blockIndex * slidesInBlock;\n      lastSlideIndex.current = blockIndex * slidesInBlock + slidesInBlock - 1;\n\n      if (onChange) {\n        onChange(firstSlideIndex.current, lastSlideIndex.current);\n      }\n    },\n    [\n      slideWidth,\n      slidesInBlock,\n      onChange\n    ]\n  );\n\n  const offsetToNextSlidesBlock = useCallback(() => {\n    offsetToNthSlidesBlock(currentBlockIndex + 1);\n  }, [currentBlockIndex, offsetToNthSlidesBlock]);\n\n  const offsetToPreviousSlidesBlock = useCallback(() => {\n    offsetToNthSlidesBlock(currentBlockIndex - 1);\n  }, [currentBlockIndex, offsetToNthSlidesBlock]);\n\n  const handleSwipeLeft = (): void => {\n    if (currentBlockIndex < blocksCount - 1) {\n      offsetToNextSlidesBlock();\n    }\n  };\n\n  const handleSwipeRight = (): void => {\n    if (currentBlockIndex > 0) {\n      offsetToPreviousSlidesBlock();\n    }\n  };\n\n  /** Вычисление количества блоков слайдов при изменении ширины карусели или числа слайдов\n   *  и назначение текущего блока\n  */\n  useEffect(() => {\n    const newBlocksCount = Math.ceil(slidesCount / slidesInBlock);\n    setBlocksCount(newBlocksCount);\n\n    const newBlockIndex = Math.floor(firstSlideIndex.current / slidesInBlock);\n    setCurrentBlockIndex(newBlockIndex);\n    setSlideFilmOffset(newBlockIndex * slidesInBlock * slideWidth);\n\n    firstSlideIndex.current = newBlockIndex * slidesInBlock;\n    lastSlideIndex.current = newBlockIndex * slidesInBlock + slidesInBlock - 1;\n\n    if (onChange) {\n      onChange(firstSlideIndex.current, lastSlideIndex.current);\n    }\n  }, [slidesCount, slidesInBlock, slideWidth, onChange]);\n\n  const carouselClassNames = useMemo(() => cd(\n    'carousel',\n    {\n      small_slides: smallSlides,\n      two_slides: twoSlides,\n      fill_header: fillHeader,\n      recommender: isRecommender,\n      mourning: isMourning\n    }\n  ), [\n    smallSlides,\n    twoSlides,\n    fillHeader,\n    isRecommender,\n    isMourning\n  ]);\n\n  const colorTheme = builtInThemes[theme as keyof typeof builtInThemes] || theme;\n\n  const carouselStyles = useMemo(\n    () => ({\n      '--ds-carousel-background': colorTheme.background\n    } as React.CSSProperties),\n    [colorTheme.background]\n  );\n\n  const switchToNextStepCommand = useMemo(() => ({\n    execute: offsetToNextSlidesBlock,\n    canExecute: currentBlockIndex < blocksCount - 1\n  }), [\n    currentBlockIndex,\n    blocksCount,\n    offsetToNextSlidesBlock\n  ]);\n\n  const switchToPrevStepCommand = useMemo(() => ({\n    execute: offsetToPreviousSlidesBlock,\n    canExecute: currentBlockIndex > 0\n  }), [\n    currentBlockIndex,\n    offsetToPreviousSlidesBlock\n  ]);\n\n  const preventDragEvent = useCallback(\n    (event: React.DragEvent) => {\n      event.preventDefault();\n    },\n    []\n  );\n\n  const onMouseMove = useCallback((event: React.MouseEvent): void => {\n    if (carouselRef && isRecommender) {\n      const { width: carouselWidth, left: carouselLeft } = carouselRef.getBoundingClientRect();\n      const carouselWidthHalved = carouselWidth / 2;\n      const showLeftButton = (event.clientX - carouselLeft) < carouselWidthHalved;\n\n      return showLeftButton ? setOverlayButton('left') : setOverlayButton('right');\n    }\n\n    return setOverlayButton(null);\n  }, [carouselRef, isRecommender]);\n\n  const onMouseLeave = useCallback(() => {\n    setOverlayButton(null);\n  }, []);\n\n  const onRecommenderPrevBtnClick = useCallback(() => {\n    if (onControlsClick) {\n      onControlsClick();\n    }\n    switchToPrevStepCommand.execute();\n  }, [onControlsClick, switchToPrevStepCommand]);\n\n  const onRecommenderNextBtnClick = useCallback(() => {\n    if (onControlsClick) {\n      onControlsClick();\n    }\n    switchToNextStepCommand.execute();\n  }, [onControlsClick, switchToNextStepCommand]);\n\n  return (\n    <div\n      ref={ setCarouselRef }\n      data-test-id={ dataTestId }\n      className={ carouselClassNames }\n      style={ isRecommender ? undefined : carouselStyles }\n      onDragStart={ preventDragEvent }\n    >\n      <CarouselHeader\n        title={ title }\n        theme={ colorTheme }\n        switchToNextStep={ switchToNextStepCommand }\n        switchToPreviousStep={ switchToPrevStepCommand }\n        invertTitle={ invertTitle }\n        invertControls={ invertControls }\n        smallSlides={ smallSlides }\n        href={ href }\n        customLink={ customLink }\n        onControlsClick={ onControlsClick }\n        onTitleClick={ onTitleClick }\n        hideButtons={ isRecommender }\n      />\n      <div\n        className={ cd('body_wrapper', { fill_header: fillHeader, fill_body_background: isRecommender }) }\n        style={ isRecommender ? carouselStyles : undefined }\n      >\n        <Swiper\n          tag=\"div\"\n          onSwipedLeft={ handleSwipeLeft }\n          onSwipedRight={ handleSwipeRight }\n          threshold={ 50 }\n          stretch\n        >\n          <div\n            className={ styles.body_inner_wrapper }\n            onMouseMove={ onMouseMove }\n            onMouseLeave={ onMouseLeave }\n          >\n            <CarouselBody\n              content={ content }\n              slideWidth={ slideWidth }\n              offset={ slideFilmOffset }\n              fillHeader={ fillHeader }\n              smallSlides={ smallSlides }\n              theme={ colorTheme }\n            />\n            { isRecommender && (\n            <>\n              <button\n                className={ cd('button_left', { visible: overlayButton === 'left' }) }\n                type=\"button\"\n                aria-label=\"Назад\"\n                onClick={ onRecommenderPrevBtnClick }\n                disabled={ !switchToPrevStepCommand.canExecute }\n              >\n                <IconArrowLeft />\n              </button>\n              <button\n                className={ cd('button_right', { visible: overlayButton === 'right' }) }\n                type=\"button\"\n                aria-label=\"Вперед\"\n                onClick={ onRecommenderNextBtnClick }\n                disabled={ !switchToNextStepCommand.canExecute }\n              >\n                <IconArrowRight />\n              </button>\n            </>\n            ) }\n          </div>\n        </Swiper>\n      </div>\n    </div>\n  );\n};\n\nexport { Carousel };\n"],"names":["cd","cssDecorator","styles","Carousel","_a","title","theme","content","fillHeader","invertTitle","invertControls","smallSlides","twoSlides","href","dataTestId","customLink","isMourning","onChange","onControlsClick","onTitleClick","isRecommender","_b","useState","carouselRef","setCarouselRef","_c","overlayButton","setOverlayButton","slidesCount","length","_d","slideFilmOffset","setSlideFilmOffset","_e","blocksCount","setBlocksCount","_f","currentBlockIndex","setCurrentBlockIndex","firstSlideIndex","useRef","lastSlideIndex","slideWidth","useMemo","slidesInBlock","offsetToNthSlidesBlock","useCallback","blockIndex","current","offsetToNextSlidesBlock","offsetToPreviousSlidesBlock","useEffect","newBlocksCount","Math","ceil","newBlockIndex","floor","carouselClassNames","small_slides","two_slides","fill_header","recommender","mourning","colorTheme","builtInThemes","carouselStyles","background","switchToNextStepCommand","execute","canExecute","switchToPrevStepCommand","preventDragEvent","event","preventDefault","onMouseMove","getBoundingClientRect","carouselWidth","carouselLeft","carouselWidthHalved","showLeftButton","clientX","onMouseLeave","onRecommenderPrevBtnClick","onRecommenderNextBtnClick","React","ref","className","style","undefined","onDragStart","CarouselHeader","switchToNextStep","switchToPreviousStep","hideButtons","fill_body_background","Swiper","tag","onSwipedLeft","onSwipedRight","threshold","stretch","body_inner_wrapper","CarouselBody","offset","visible","type","onClick","disabled","IconArrowLeft","IconArrowRight"],"mappings":"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"}