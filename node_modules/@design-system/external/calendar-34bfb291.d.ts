import { Locale } from 'date-fns';
import { ItemStyle } from 'react-tiny-virtual-list';
type WeekStartsOnType = 0 | 1 | 2 | 3 | 4 | 5 | 6 | undefined;
type CalendarBaseColorStyles = {
    [key: string]: string;
};
type NewMonthType = {
    /** Номер месяца */
    month: number;
    /** Номер года */
    year: number;
};
type GetMonthType = {
    /** Дата первого дня месяца */
    date: Date;
    /** Массив недель месяца */
    rows: number[][];
};
interface CalendarProps {
    /** ID для тестов */
    dataTestId?: string;
    /** Высота календаря */
    height?: number;
    /** Максимальная дата для выбора */
    maxDate?: Date;
    /** Минимальная дата для выбора */
    minDate?: Date;
    /** Локализация */
    locale?: Locale;
    /** Колбек, срабатывающий при изменении выбранных дат */
    onSelectedDateChange?: (dates: Date[]) => void;
    /** Колбек, срабатывающий при изменении активного года */
    onChangeActiveYear?: (year: number) => void;
    /** Выбор периода */
    range?: boolean;
    /** Высота строки календаря */
    rowHeight?: number;
    /** tabIndex для календаря */
    tabIndex?: number;
    /** Предустановленное значение для календаря */
    value?: Date | Date[];
    /** Дата по умолчанию, если не передано value */
    defaultValue?: Date;
    /** Обозначения дней недели */
    weekdays?: string[];
    /** Стили цвета для календаря */
    colorStyles?: CalendarBaseColorStyles;
    /** Флаг об ошибке */
    isError?: boolean;
}
type MobileCalendarProps = Omit<CalendarProps, 'colorStyles'>;
interface DaysListProps {
    /** Индекс активного месяца */
    activeIndex: number | undefined;
    /** Высота календаря */
    height: number;
    /** Локализация */
    locale: Locale;
    /** Максимальная дата для выбора */
    maxDate: Date;
    /** Минимальная дата для выбора */
    minDate: Date;
    /** Массив месяцев */
    months: NewMonthType[];
    /** Колбек, срабатывающий при изменении активного месяца */
    onMonthChange?: (date: Date) => void;
    /** Колбек, срабатывающий при изменении выбранной даты */
    onSelect?: (date: Date) => void;
    /** Выбор периода */
    range?: boolean;
    /** Высота строки */
    rowHeight: number;
    /** Выбранная дата */
    selected?: Date[];
    /** Сегодняшняя дата */
    today: Date;
}
interface DaysListMonthProps {
    /** Локализация */
    locale: Locale;
    /** Максимальная дата для выбора */
    maxDate: Date;
    /** Минимальная дата для выбора */
    minDate: Date;
    /** Номер месяца */
    month: number;
    /** Дата месяца */
    monthDate: Date;
    /** Колбек, срабатывающий при изменении активного месяца */
    onMonthChange?: (date: Date) => void;
    /** Колбек, срабатывающий при изменении выбранной даты */
    onSelect?: (date: Date) => void;
    /** Выбор периода */
    range?: boolean;
    /** Высота строки */
    rowHeight: number;
    /** Массив недель месяца */
    rows: number[][];
    /** Выбранная дата */
    selected?: Date[];
    /** Номер года */
    style: ItemStyle;
    /** Сегодняшняя дата */
    today: Date;
    /** Номер года */
    year: number;
}
interface DaysListDayProps {
    /** Дата, соответствующая числу в ISO-формате */
    date: string;
    /** Номер дня */
    day: number;
    /** Флаг заблокированного дня */
    isDisabled?: boolean;
    /** Флаг выбранного дня */
    isSelected?: boolean;
    /** Флаг сегодняшнего дня */
    isToday?: boolean;
    /** Флаг дня внутри периода */
    isInRange?: boolean;
    /** Колбек, срабатывающий при изменении выбранной даты */
    onClick?: (date: Date) => void;
    /** Высота строки */
    rowHeight: number;
}
interface MonthListProps {
    /** Активная дата */
    active: Date | undefined;
    /** Локализация */
    locale: Locale;
    /** Массив месяцев */
    months: NewMonthType[];
    /** Колбек при выборе месяца */
    onMonthClick: (date: Date) => void;
    /** Высота строки */
    rowHeight: number;
    /** Сегодняшняя дата */
    today: Date;
}
interface YearsListProps {
    /** Активная дата */
    active: Date | undefined;
    /** Колбек при выборе года */
    onYearClick: (date: Date) => void;
    /** Высота строки */
    rowHeight: number;
    /** Сегодняшняя дата */
    today: Date;
    /** Массив месяцев */
    years: number[];
}
interface WeekdaysProps {
    /** Высота строки */
    rowHeight: number;
    /** Обозначения дней недели */
    weekdays: string[];
    /** Первый день недели */
    weekStartsOn: WeekStartsOnType;
}
interface MonthListMonthProps {
    /** Выводимое значение */
    date: Date;
    /** Флаг сегодняшнего дня */
    isToday?: boolean;
    /** Флаг активного дня */
    isActive?: boolean;
    /** Локализация */
    locale: Locale;
    /** Колбек при выборе месяца */
    onMonthClick: (date: Date) => void;
}
interface MonthListYearProps {
    /** Выводимое значение */
    date: Date;
    /** Флаг сегодняшнего дня */
    isToday?: boolean;
    /** Флаг активного дня */
    isActive?: boolean;
}
interface YearsListYearProps {
    /** Выводимое значение */
    date: Date;
    /** Флаг сегодняшнего дня */
    isToday?: boolean;
    /** Флаг активного дня */
    isActive?: boolean;
    /** Колбек при выборе года */
    onYearClick: (date: Date) => void;
}
export { WeekStartsOnType, CalendarBaseColorStyles, NewMonthType, GetMonthType, CalendarProps, MobileCalendarProps, DaysListProps, DaysListMonthProps, DaysListDayProps, MonthListProps, YearsListProps, WeekdaysProps, MonthListMonthProps, MonthListYearProps, YearsListYearProps };
