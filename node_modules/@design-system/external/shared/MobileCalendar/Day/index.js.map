{"version":3,"file":"index.js","sources":["../../../../../../shared/MobileCalendar/Day/index.tsx"],"sourcesContent":["import React, { useCallback } from 'react';\nimport { cssDecorator } from '@front-toolkit/utils';\nimport Text from 'external/src/typography/Text';\n\nimport { setNoonTime } from '../utils';\n\nimport styles from '../styles.scss';\n\nconst cd = cssDecorator(styles);\n\ninterface DayProps {\n  /** Месяц */\n  month: number;\n\n  /** Год */\n  year: number;\n\n  /** Минимально возможная дата для выбора */\n  minDate?: Date;\n\n  /** Максимально возможная дата для выбора */\n  maxDate?: Date;\n\n  /** Индекс ячейки */\n  index: number;\n\n  /** Индекс ячейки, в которой должен быть первый день месяца */\n  firstDayIndex: number;\n\n  /** Максимальное количество дней в месяце */\n  maxDays: number;\n\n  /** Сегодняшняя дата с установленным временем на 12:00, timestamp */\n  today?: number;\n\n  /** Массив выбранных дат */\n  selectedDates: Date[];\n\n  /** Колбэк при клике на ячейку дня */\n  onClick: (value: Date) => void;\n}\n\nconst Day: React.FC<DayProps> = ({\n  month,\n  year,\n  minDate,\n  maxDate,\n  index,\n  firstDayIndex,\n  maxDays,\n  today,\n  selectedDates,\n  onClick\n}) => {\n  const isInFirstEmptyDays = index <= firstDayIndex;\n  const day = !isInFirstEmptyDays && index - firstDayIndex <= maxDays ? index - firstDayIndex : undefined;\n  const date = day && setNoonTime(new Date(year, month, day));\n  const isToday = date && today === date;\n  const [rangeStart, rangeEnd] = selectedDates;\n  const selected = date && (date > rangeStart?.getTime() && date < rangeEnd?.getTime());\n  const rangeBoundary = date && (setNoonTime(rangeStart) === date || setNoonTime(rangeEnd) === date);\n  const disabled = !!date && ((minDate && date < setNoonTime(minDate)) || (maxDate && date > setNoonTime(maxDate)));\n  const holiday = !!date && [0, 6].includes(new Date(date).getDay());\n\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  const handleClick = useCallback(() => {\n    if (date) {\n      onClick(new Date(date));\n    }\n  }, [date, onClick]);\n\n  if (isInFirstEmptyDays) {\n    return <div />;\n  }\n\n  if (!day) {\n    return null;\n  }\n\n  const buttonClassName = cd('cell', {\n    day,\n    today: isToday,\n    selected,\n    extreme_value: rangeBoundary,\n    disabled,\n    holiday\n  });\n\n  return (\n    <button\n      type=\"button\"\n      className={ buttonClassName }\n      disabled={ disabled }\n      onClick={ handleClick }\n    >\n      <Text size=\"small\" inherit={ rangeBoundary || disabled || holiday }>{ day }</Text>\n    </button>\n  );\n};\n\nexport default React.memo(Day);\n"],"names":["cd","cssDecorator","styles","React","memo","_a","month","year","minDate","maxDate","index","firstDayIndex","maxDays","today","selectedDates","onClick","isInFirstEmptyDays","day","undefined","date","setNoonTime","Date","isToday","rangeStart","rangeEnd","selected","getTime","rangeBoundary","disabled","holiday","includes","getDay","handleClick","useCallback","buttonClassName","extreme_value","type","className","Text","size","inherit"],"mappings":"uNAQA,IAAMA,EAAKC,EAAaC,KA4FTC,EAAMC,MA1DW,SAACC,OAC/BC,UACAC,SACAC,YACAC,YACAC,UACAC,kBACAC,YACAC,UACAC,kBACAC,YAEMC,EAAqBN,GAASC,EAC9BM,GAAOD,GAAsBN,EAAQC,GAAiBC,EAAUF,EAAQC,OAAgBO,EACxFC,EAAOF,GAAOG,EAAY,IAAIC,KAAKd,EAAMD,EAAOW,IAChDK,EAAUH,GAAQN,IAAUM,EAC3BI,EAAwBT,KAAZU,EAAYV,KACzBW,EAAWN,GAASA,GAAOI,eAAAA,EAAYG,YAAaP,GAAOK,eAAAA,EAAUE,WACrEC,EAAgBR,IAASC,EAAYG,KAAgBJ,GAAQC,EAAYI,KAAcL,GACvFS,IAAaT,IAAUX,GAAWW,EAAOC,EAAYZ,IAAcC,GAAWU,EAAOC,EAAYX,IACjGoB,IAAYV,GAAQ,CAAC,EAAG,GAAGW,SAAS,IAAIT,KAAKF,GAAMY,UAGnDC,EAAcC,GAAY,WAC1Bd,GACFJ,EAAQ,IAAIM,KAAKF,MAElB,CAACA,EAAMJ,IAEV,GAAIC,EACF,OAAOb,4BAGT,IAAKc,EACH,OAAO,KAGT,IAAMiB,EAAkBlC,EAAG,OAAQ,CACjCiB,MACAJ,MAAOS,EACPG,WACAU,cAAeR,EACfC,WACAC,YAGF,OACE1B,0BACEiC,KAAK,SACLC,UAAYH,EACZN,SAAWA,EACXb,QAAUiB,GAEV7B,gBAACmC,GAAKC,KAAK,QAAQC,QAAUb,GAAiBC,GAAYC,GAAYZ,GAG5E"}