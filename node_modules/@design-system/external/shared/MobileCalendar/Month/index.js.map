{"version":3,"file":"index.js","sources":["../../../../../../shared/MobileCalendar/Month/index.tsx"],"sourcesContent":["/* eslint-disable react/no-array-index-key */\nimport React, {\n  useState,\n  useCallback,\n  useEffect,\n  useMemo\n} from 'react';\nimport { cssDecorator } from '@front-toolkit/utils';\n\nimport { getMaxDaysInMonth, setNoonTime } from '../utils';\nimport Day from '../Day';\n\nimport styles from '../styles.scss';\n\nconst cd = cssDecorator(styles);\n\nconst WEEKDAYS = ['П', 'В', 'С', 'Ч', 'П', 'С', 'В'];\nconst MAX_CELLS = 42;\n\ninterface MonthProps {\n  /** Месяц */\n  month: number;\n\n  /** Год */\n  year: number;\n\n  /** Массив выбранных дат */\n  selectedDates: Date[];\n\n  /** Минимально возможная дата для выбора */\n  minDate?: Date;\n\n  /** Максимально возможная дата для выбора */\n  maxDate?: Date;\n\n  /** Колбэк при клике на ячейку дня */\n  handleDayClick: (value: Date) => void;\n}\n\nconst Month: React.FC<MonthProps> = ({\n  month,\n  year,\n  selectedDates,\n  minDate,\n  maxDate,\n  handleDayClick\n}) => {\n  const [today, setToday] = useState<number>();\n\n  const firstDayIndex = useMemo(() => (new Date(year, month, 1).getDay() || 7) - 2, [year, month]);\n  const maxDays = useMemo(() => getMaxDaysInMonth(month, year), [year, month]);\n\n  useEffect(() => {\n    setToday(setNoonTime(new Date()));\n  }, []);\n\n  const onClick = useCallback(date => handleDayClick(date), [handleDayClick]);\n\n  const renderedWeekdays = useMemo(() => WEEKDAYS.map((weekday, index) => (\n    <div\n      key={ `${ weekday }_${ index }` }\n      className={ cd('cell', { holiday: [5, 6].includes(index) }) }\n    >\n      { weekday }\n    </div>\n  )), []);\n\n  return (\n    <div className={ styles.cell_box }>\n      { renderedWeekdays }\n      { Array(MAX_CELLS).fill(null).map((_, index) => (\n        <Day\n          key={ `${ index }_${ month }_${ year }` }\n          index={ index }\n          firstDayIndex={ firstDayIndex }\n          maxDays={ maxDays }\n          today={ today }\n          selectedDates={ selectedDates }\n          month={ month }\n          year={ year }\n          minDate={ minDate }\n          maxDate={ maxDate }\n          onClick={ onClick }\n        />\n      )) }\n    </div>\n  );\n};\n\nexport default React.memo(Month);\n"],"names":["cd","cssDecorator","styles","WEEKDAYS","React","memo","_a","month","year","selectedDates","minDate","maxDate","handleDayClick","_b","useState","today","setToday","firstDayIndex","useMemo","Date","getDay","maxDays","getMaxDaysInMonth","useEffect","setNoonTime","onClick","useCallback","date","renderedWeekdays","map","weekday","index","key","className","holiday","includes","cell_box","Array","fill","_","Day"],"mappings":"sQAcA,IAAMA,EAAKC,EAAaC,GAElBC,EAAW,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,OAyEjCC,EAAMC,MAlDe,SAACC,OACnCC,UACAC,SACAC,kBACAC,YACAC,YACAC,mBAEMC,EAAoBC,IAAnBC,OAAOC,OAERC,EAAgBC,GAAQ,WAAM,OAAC,IAAIC,KAAKX,EAAMD,EAAO,GAAGa,UAAY,GAAK,IAAG,CAACZ,EAAMD,IACnFc,EAAUH,GAAQ,WAAM,OAAAI,EAAkBf,EAAOC,KAAO,CAACA,EAAMD,IAErEgB,GAAU,WACRP,EAASQ,EAAY,IAAIL,SACxB,IAEH,IAAMM,EAAUC,GAAY,SAAAC,GAAQ,OAAAf,EAAee,KAAO,CAACf,IAErDgB,EAAmBV,GAAQ,WAAM,OAAAf,EAAS0B,KAAI,SAACC,EAASC,GAAU,OACtE3B,uBACE4B,IAAUF,MAAaC,EACvBE,UAAYjC,EAAG,OAAQ,CAAEkC,QAAS,CAAC,EAAG,GAAGC,SAASJ,MAEhDD,QAEF,IAEJ,OACE1B,uBAAK6B,UAAY/B,EAAOkC,UACpBR,EACAS,MArDU,IAqDOC,KAAK,MAAMT,KAAI,SAACU,EAAGR,GAAU,OAC9C3B,gBAACoC,GACCR,IAAUD,MAAWxB,MAAWC,EAChCuB,MAAQA,EACRd,cAAgBA,EAChBI,QAAUA,EACVN,MAAQA,EACRN,cAAgBA,EAChBF,MAAQA,EACRC,KAAOA,EACPE,QAAUA,EACVC,QAAUA,EACVc,QAAUA,OAKpB"}