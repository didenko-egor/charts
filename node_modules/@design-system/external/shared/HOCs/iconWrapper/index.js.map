{"version":3,"file":"index.js","sources":["../../../../../../shared/HOCs/iconWrapper/index.tsx"],"sourcesContent":["import React from 'react';\n\nimport styles from './styles.scss';\n\nexport interface IconProps {\n  /** Цвет иконки */\n  color?: string;\n\n  /** Повернуть иконку на обозначенное значение градусов */\n  rotate?: number;\n\n  /** Отразить по горизонтали */\n  flipX?: boolean;\n\n  /** Отразить по вертикали */\n  flipY?: boolean;\n\n  /** ID для тестов */\n  dataTestId?: string;\n}\n\nexport type SvgProps = Record<string, string | React.CSSProperties | undefined>;\ntype IconWrapperType = (Component: React.ComponentType<SvgProps>) => React.FC<IconProps>;\n\n/** Определить CSS scale для отражения */\nconst getScale = (flipX?: boolean, flipY?: boolean): string | undefined => (\n  flipX || flipY\n    ? `scale(${ flipX ? -1 : 1 },${ flipY ? -1 : 1 })`\n    : undefined\n);\n\n/** Преобразовать величину в CSS rotate */\nconst getRotate = (value?: number): string | undefined => (\n  value ? `rotate(${ value }deg)` : undefined\n);\n\n/** Получить значение свойства CSS transform */\nconst getTransformStyle = (\n  rotate?: number,\n  flipX?: boolean,\n  flipY?: boolean\n): string | undefined => (\n  [\n    getRotate(rotate),\n    getScale(flipX, flipY)\n  ]\n    .filter(Boolean)\n    .join(' ')\n  || undefined\n);\n\nexport const iconWrapper: IconWrapperType = Component => {\n  const wrapper: React.FC<IconProps> = ({\n    color,\n    rotate = undefined,\n    flipX = false,\n    flipY = false,\n    dataTestId\n  }) => {\n    const transformStyle = getTransformStyle(rotate, flipX, flipY);\n\n    /** Получение стилей без учета незаданных (undefined) */\n    const styleProp: React.CSSProperties | undefined = color || transformStyle\n      ? {}\n      : undefined;\n    if (styleProp) {\n      if (color) styleProp.color = color;\n      if (transformStyle) styleProp.transform = transformStyle;\n    }\n\n    return (\n      <Component\n        className={ styles.icon }\n        style={ styleProp }\n        data-test-id={ dataTestId }\n        role=\"img\"\n      />\n    );\n  };\n\n  wrapper.displayName = `withIcon(${ Component?.displayName || Component.name || 'unknown' })`;\n\n  return wrapper;\n};\n"],"names":["getScale","flipX","flipY","undefined","iconWrapper","Component","wrapper","_a","color","_b","rotate","_c","_d","dataTestId","transformStyle","value","filter","Boolean","join","getTransformStyle","styleProp","transform","React","className","styles","icon","style","role","displayName","name"],"mappings":"qDAyBA,IAAMA,EAAW,SAACC,EAAiBC,GAAwC,OACzED,GAASC,EACL,UAAUD,GAAS,EAAI,QAAOC,GAAS,EAAI,YAC3CC,GAuBOC,EAA+B,SAAAC,GAC1C,IAAMC,EAA+B,SAACC,OACpCC,UACAC,WAAAC,kBAASP,IACTQ,UAAAV,gBACAW,UAAAV,gBACAW,eAEMC,EAtBgB,SACxBJ,EACAT,EACAC,GACuB,MACvB,EAViBa,EAWLL,EAVZK,EAAQ,UAAWA,cAAeZ,GAWhCH,EAASC,EAAOC,IAEfc,OAAOC,SACPC,KAAK,WACLf,EAhBa,IAACY,EA2BQI,CAAkBT,EAAQT,EAAOC,GAGlDkB,EAA6CZ,GAASM,EACxD,QACAX,EAMJ,OALIiB,IACEZ,IAAOY,EAAUZ,MAAQA,GACzBM,IAAgBM,EAAUC,UAAYP,IAI1CQ,gBAACjB,GACCkB,UAAYC,EAAOC,KACnBC,MAAQN,iBACOP,EACfc,KAAK,SAOX,OAFArB,EAAQsB,YAAc,cAAavB,eAAAA,EAAWuB,cAAevB,EAAUwB,MAAQ,eAExEvB,CACT"}