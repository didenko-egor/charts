/// <reference types="react" />
import { FontCommon, FontColor } from "../../../common-03e05004";
import React from 'react';
import { TextProps as ExternalTextProps } from "../../../typography/Text/index";
// =============  Text
type TextFontWeight = "bold" | "regular" | "inherit";
type TextSize = "extra_large" | "large" | "default" | "small" | "extra_small" | "inherit";
type FontSize = TextSize;
type FontWeight = TextFontWeight;
type TextSize$0 = FontSize;
type TextFontWeight$0 = FontWeight;
// Заготовка на случай расширения набора цветов для отдельных компонентов
type TextFontColor = FontColor;
interface TextProps extends FontCommon {
    /** Тип (размер) текста */
    size?: TextSize$0;
    /** Насыщенность шрифта */
    fontWeight?: TextFontWeight$0;
    /** Флаг для курсивного начертания */
    italic?: boolean;
    /** Значение для встаки в одноименное свойство элемента */
    title?: string;
}
type CoreTextProps = TextProps;
type WrappedComponentProps = ExternalTextProps | CoreTextProps;
/** TODO подумать над переименование данного пропса,
 * в связи с тем, что есть схожий по неймингу, но отличный по смыслу - inheritColor
 * https://jira.corp.tass.ru/browse/TNA-788
 */
interface WithInheritProps {
    /** Флаг для использования наследуемых стилей вместо стилей по умолчанию */
    inherit?: boolean;
}
declare const DEFAULT_PROPS: {
    inherit: boolean;
};
declare function withInherit<T extends WrappedComponentProps>(WrappedComponent: React.ComponentType<T & WithInheritProps>): React.FC<T & WithInheritProps>;
export { TextSize$0 as TextSize, TextFontWeight$0 as TextFontWeight, TextFontColor, TextProps, withInherit, WithInheritProps, WrappedComponentProps, DEFAULT_PROPS };
