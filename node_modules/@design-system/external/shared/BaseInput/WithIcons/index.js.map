{"version":3,"file":"index.js","sources":["../../../../../../shared/BaseInput/WithIcons/index.tsx"],"sourcesContent":["import React, { useMemo } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport { cssDecorator } from '@front-toolkit/utils';\nimport type { ComponentStyles } from 'shared/types/common';\n\nimport type { BaseInputSize, InputElementTypes } from '../types';\n\nexport interface InputIcon {\n  /** Svg иконка  */\n  icon: React.ReactElement;\n\n  /** Флаг для отключение иконки */\n  disabled?: boolean;\n\n  /** Колбэк onClick для взаимодействия с иконкой  */\n  onClick?: VoidFunction;\n\n  /** Колбэк onMouseDown для взаимодействия с иконкой  */\n  onMouseDown?: React.MouseEventHandler;\n}\n\nexport interface WithIconsProps {\n  /** Массив объектов с иконкой, колбэком клика и полем disabled  */\n  icons?: Array<InputIcon>;\n\n  /** Флаг для отключения всех иконок  */\n  disabled?: boolean;\n\n  /** Размер поля ввода */\n  size?: BaseInputSize;\n\n  /** Стили HOC'а withIcons */\n  styles: ComponentStyles;\n\n  /** html-tag инпута */\n  inputElement?: InputElementTypes;\n\n  /** Счетчик количества введенных символов */\n  counter?: React.ReactNode;\n\n  /** Позиционирование иконок слева от поля ввода */\n  iconsLeft?: boolean;\n\n  /** Инпут  */\n  children: React.ReactNode;\n}\n\nconst WithIcons: React.FC<WithIconsProps> = ({\n  icons,\n  disabled,\n  size,\n  styles,\n  inputElement,\n  counter,\n  iconsLeft,\n  children\n}) => {\n  const cd = useMemo(() => cssDecorator(styles), [styles]);\n  const iconsData = useMemo(() => icons?.map(icon => ({ ...icon, id: uuidv4() })), [icons]);\n\n  if (iconsData?.length) {\n    return (\n      <div className={ styles.container }>\n        { !iconsLeft && children }\n        <div className={ cd('icons_wrapper', {\n          left: iconsLeft\n        }) }\n        >\n          { iconsData?.map(icon => (\n            <span\n              role=\"button\"\n              tabIndex={ -1 } // TODO ждем от Леши необходимость управлять с клавиатуры иконками в инпуте\n              className={ cd(\n                'icon',\n                {\n                  disabled: disabled || icon.disabled,\n                  [`${ size }`]: size,\n                  default_cursor: !icon.onClick && !icon.onMouseDown,\n                  left: iconsLeft\n                }\n              ) }\n              key={ icon.id }\n              onClick={ icon.onClick }\n              onKeyPress={ icon.onClick }\n              onMouseDown={ icon.onMouseDown }\n            >\n              { icon.icon }\n            </span>\n          )) }\n        </div>\n        { iconsLeft && children }\n      </div>\n    );\n  }\n\n  const counterStyles = counter\n    ? cd('counter', {\n      [`${ inputElement }`]: true\n    })\n    : undefined;\n\n  return (\n    <div className={ styles.container }>\n      { children }\n      { counter && <div className={ counterStyles }>{ counter }</div> }\n    </div>\n  );\n};\n\nexport { WithIcons };\n"],"names":["WithIcons","_a","icons","disabled","size","styles","inputElement","counter","iconsLeft","children","cd","useMemo","cssDecorator","iconsData","map","icon","id","uuidv4","length","React","className","container","left","role","tabIndex","onClick","onMouseDown","key","onKeyPress","counterStyles","undefined"],"mappings":"sJA+CMA,EAAsC,SAACC,SAC3CC,UACAC,aACAC,SACAC,WACAC,iBACAC,YACAC,cACAC,aAEMC,EAAKC,GAAQ,WAAM,OAAAC,EAAaP,KAAS,CAACA,IAC1CQ,EAAYF,GAAQ,WAAM,OAAAT,eAAAA,EAAOY,KAAI,SAAAC,GAAQ,cAAMA,IAAMC,GAAIC,WAAc,CAACf,IAElF,GAAIW,eAAAA,EAAWK,OACb,OACEC,uBAAKC,UAAYf,EAAOgB,YACnBb,GAAaC,EAChBU,uBAAKC,UAAYV,EAAG,gBAAiB,CACnCY,KAAMd,KAGJK,eAAAA,EAAWC,KAAI,SAAAC,SAAQ,OACvBI,wBACEI,KAAK,SACLC,UAAY,EACZJ,UAAYV,EACV,WAEEP,SAAUA,GAAYY,EAAKZ,UAC3BF,EAAC,GAAIG,GAAUA,EACfH,kBAAiBc,EAAKU,UAAYV,EAAKW,YACvCzB,OAAMO,MAGVmB,IAAMZ,EAAKC,GACXS,QAAUV,EAAKU,QACfG,WAAab,EAAKU,QAClBC,YAAcX,EAAKW,aAEjBX,EAAKA,UAIXP,GAAaC,GAKrB,IAAMoB,EAAgBtB,EAClBG,EAAG,kBACF,GAAIJ,IAAkB,WAEvBwB,EAEJ,OACEX,uBAAKC,UAAYf,EAAOgB,WACpBZ,EACAF,GAAWY,uBAAKC,UAAYS,GAAkBtB,GAGtD"}