{"version":3,"file":"index.js","sources":["../../src/AsyncTagSelect/index.tsx"],"sourcesContent":["import React, {\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState\n} from 'react';\nimport debounce from 'lodash.debounce';\nimport { v4 as uuidv4 } from 'uuid';\nimport { SelectProps, BaseSelectItem } from 'core/types/select';\nimport { BaseSelect } from 'core/shared';\nimport { BaseInput } from 'shared/BaseInput';\nimport { useFormContext } from 'shared/Form/formContext';\nimport { Mark } from 'core/src/Mark';\nimport { FieldWrapper } from 'core/src/FieldWrapper';\nimport { xorSelectItem, getUniqueSelectItems } from 'utils';\n\nimport inputStyles from 'shared/BaseInput/coreStyles.scss';\nimport iconsStyles from 'shared/BaseInput/WithIcons/coreStyles.scss';\n\nimport { IconPlus } from '../icons';\n\nimport styles from './styles.scss';\n\nconst emptyWrapperStyles = {};\n\ntype AsyncTagSelectProps = {\n  /** Выбранные по умолчанию тэги */\n  defaultSelectedItems?: BaseSelectItem[];\n\n  /** Колбэк для подгрузки элементов списка при вводе */\n  onAsyncChange: (value: string) => Promise<BaseSelectItem[]>;\n\n  /** Колбэк получает обновленный список выбранных тэгов при его изменении */\n  onSelectedItemsChange: (selectedItems: string[], fieldName?: string) => void;\n} & Pick<SelectProps, 'id' | 'label' | 'disabled' | 'labelAside' | 'labelWidth' | 'size' | 'dataTestId' | 'fieldName'>;\n\nconst AsyncTagSelect: React.FC<AsyncTagSelectProps> = ({\n  id,\n  label,\n  disabled,\n  labelAside,\n  labelWidth,\n  fieldName,\n  size = 'default',\n  dataTestId = 'async_tag_select_id',\n  defaultSelectedItems = [],\n  onAsyncChange,\n  onSelectedItemsChange\n}) => {\n  const { LABEL_WIDTH, LABEL_ASIDE, SIZE } = useFormContext({ labelWidth, labelAside, size });\n\n  const inputRef = useRef<HTMLInputElement>(null);\n  const isMounted = useRef(false);\n\n  const sortedDefaultItems = useMemo(() => {\n    const sortItems = [...defaultSelectedItems];\n\n    return sortItems.sort((a, b) => {\n      if (a.disabled === b.disabled) {\n        return 0;\n      }\n\n      return a.disabled ? -1 : 1;\n    });\n  }, [defaultSelectedItems]);\n\n  const [isOpenDropdown, setIsOpenDropdown] = useState(false);\n  const [inputValue, setInputValue] = useState('');\n  const [isFilterItems, setIsFilterItems] = useState(false);\n  const [showAddButton, setShowAddButton] = useState(false);\n  const [dropdownItems, setDropdownItems] = useState<BaseSelectItem[]>(sortedDefaultItems);\n  const [addedByUserItems, setAddedByUserItems] = useState<BaseSelectItem[]>([]);\n  const [selectedItems, setSelectedItems] = useState<BaseSelectItem[]>(sortedDefaultItems);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const onCloseDropdown = useCallback((): void => {\n    setIsOpenDropdown(false);\n    setIsFilterItems(false);\n    setShowAddButton(false);\n  }, []);\n\n  const onItemClickHandler = useCallback((value: string): void => {\n    const clickedItem = dropdownItems.find(item => item.value === value);\n\n    setSelectedItems(prevState => xorSelectItem(prevState, clickedItem));\n    setInputValue('');\n    onCloseDropdown();\n  }, [dropdownItems, onCloseDropdown]);\n\n  const isShowAddButtonDeb = useMemo(\n    () => !!inputValue.trim() && !dropdownItems.find(item => item.label === inputValue.trim()),\n    [dropdownItems, inputValue]\n  );\n\n  const debouncedChangeHandler = useMemo(() => debounce((newInputValue: string): void => {\n    onAsyncChange(newInputValue).then(data => {\n      setDropdownItems(getUniqueSelectItems(data, sortedDefaultItems).concat(addedByUserItems));\n      setIsLoading(false);\n    }).catch(() => {\n      setIsLoading(false);\n    });\n  }, 500), [addedByUserItems, sortedDefaultItems, onAsyncChange]);\n\n  const onChangeHandler = useCallback((newInputValue: string): void => {\n    setInputValue(newInputValue);\n\n    if (newInputValue.trim()) {\n      setIsFilterItems(true);\n      setIsOpenDropdown(true);\n      setIsLoading(true);\n      debouncedChangeHandler(newInputValue.trim());\n    }\n  }, [debouncedChangeHandler]);\n\n  const onFocusHandler = useCallback(() => {\n    if (inputValue.trim()) {\n      setIsFilterItems(true);\n      setIsOpenDropdown(true);\n      setIsLoading(true);\n\n      debouncedChangeHandler(inputValue.trim());\n    }\n  }, [debouncedChangeHandler, inputValue]);\n\n  const handleClickOutside = useCallback((): void => {\n    setDropdownItems(addedByUserItems);\n    onCloseDropdown();\n  }, [addedByUserItems, onCloseDropdown]);\n\n  const onAddButtonClick = useCallback(() => {\n    const newSelectItem = { label: inputValue.trim(), value: uuidv4() };\n\n    setSelectedItems(prevState => [...prevState, newSelectItem]);\n    setDropdownItems(prevState => [...prevState, newSelectItem]);\n    setAddedByUserItems(prevState => [...prevState, newSelectItem]);\n    setInputValue('');\n    onCloseDropdown();\n\n    inputRef.current?.focus();\n  }, [inputValue, onCloseDropdown]);\n\n  const handleRemoveTag = useCallback((removedTagValue: string) => () => {\n    setSelectedItems(prevState => prevState.filter(item => item.value !== removedTagValue));\n  }, []);\n\n  const addIcon = useMemo(() => [\n    {\n      icon: <IconPlus />,\n      onClick: onAddButtonClick\n    }\n  ], [onAddButtonClick]);\n\n  const activeValues = useMemo(() => selectedItems.map(tag => tag.value), [selectedItems]);\n\n  const filteredItems = useMemo(() => dropdownItems.filter(\n    item => {\n      const trimmedValue = inputValue.trim();\n\n      return item.label.toLowerCase().slice(0, trimmedValue.length) === trimmedValue.toLowerCase();\n    }\n  ), [inputValue, dropdownItems]);\n\n  useEffect(() => {\n    if (isMounted.current) {\n      onSelectedItemsChange(selectedItems.map(item => item.label), fieldName);\n    } else {\n      isMounted.current = true;\n    }\n  }, [selectedItems, fieldName, onSelectedItemsChange]);\n\n  useEffect(() => {\n    if (!inputValue) {\n      onCloseDropdown();\n    } else if (!isLoading) {\n      setShowAddButton(isShowAddButtonDeb);\n    }\n  }, [inputValue, onCloseDropdown, isShowAddButtonDeb, isLoading]);\n\n  return (\n    <FieldWrapper\n      id={ id }\n      dataTestId={ dataTestId }\n      size={ SIZE }\n      disabled={ disabled }\n      label={ label }\n      labelAside={ LABEL_ASIDE }\n      labelWidth={ LABEL_WIDTH }\n    >\n      <BaseSelect\n        size={ SIZE }\n        activeValue={ activeValues }\n        isLoading={ isLoading }\n        items={ isFilterItems ? filteredItems : dropdownItems }\n        isOpenDropdown={ isOpenDropdown }\n        onItemClick={ onItemClickHandler }\n        onCloseDropdown={ handleClickOutside }\n      >\n        <BaseInput\n          id={ id }\n          inputRef={ inputRef }\n          disabled={ disabled }\n          onChange={ onChangeHandler }\n          onFocus={ onFocusHandler }\n          placeholder=\"\"\n          value={ inputValue }\n          icons={ showAddButton ? addIcon : undefined }\n          styles={ inputStyles }\n          iconsStyles={ iconsStyles }\n          wrapperStyles={ emptyWrapperStyles }\n        />\n      </BaseSelect>\n      <div className={ styles.tags }>\n        { selectedItems.map(tag => (\n          <Mark\n            key={ tag.value }\n            text={ tag.label }\n            onClose={ tag.disabled ? undefined : handleRemoveTag(tag.value) }\n            disabled={ disabled }\n            size={ SIZE }\n            dataTestId=\"selected_tag\"\n          />\n        )) }\n      </div>\n    </FieldWrapper>\n  );\n};\n\nconst StoryComponent: React.FC<AsyncTagSelectProps> = () => null;\n\nexport { AsyncTagSelect, StoryComponent, AsyncTagSelectProps };\n"],"names":["emptyWrapperStyles","AsyncTagSelect","_a","id","label","disabled","labelAside","labelWidth","fieldName","_b","size","_c","dataTestId","_d","defaultSelectedItems","onAsyncChange","onSelectedItemsChange","_e","useFormContext","LABEL_WIDTH","LABEL_ASIDE","SIZE","inputRef","useRef","isMounted","sortedDefaultItems","useMemo","sort","a","b","_f","useState","isOpenDropdown","setIsOpenDropdown","_g","inputValue","setInputValue","_h","isFilterItems","setIsFilterItems","_j","showAddButton","setShowAddButton","_k","dropdownItems","setDropdownItems","_l","addedByUserItems","setAddedByUserItems","_m","selectedItems","setSelectedItems","_o","isLoading","setIsLoading","onCloseDropdown","useCallback","onItemClickHandler","value","clickedItem","find","item","prevState","xorSelectItem","isShowAddButtonDeb","trim","debouncedChangeHandler","debounce","newInputValue","then","data","getUniqueSelectItems","concat","onChangeHandler","onFocusHandler","handleClickOutside","onAddButtonClick","newSelectItem","uuidv4","current","focus","handleRemoveTag","removedTagValue","filter","addIcon","icon","React","IconPlus","onClick","activeValues","map","tag","filteredItems","trimmedValue","toLowerCase","slice","length","useEffect","FieldWrapper","BaseSelect","activeValue","items","onItemClick","BaseInput","onChange","onFocus","placeholder","icons","undefined","styles","inputStyles","iconsStyles","wrapperStyles","className","tags","Mark","key","text","onClose"],"mappings":"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"}