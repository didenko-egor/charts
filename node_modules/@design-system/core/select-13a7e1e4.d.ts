/// <reference types="react" />
import React from 'react';
import { ReactNode } from "react";
import { SizeVariant } from "./common-03e05004";
type SelectSize = Exclude<SizeVariant, 'large'>;
type BaseSelectItem = {
    value: string;
    label: string;
    disabled?: boolean;
    icon?: React.ReactElement;
};
interface ExportableBasicSelectProps {
    /** id селекта */
    id?: string;
    /** Массив элементов выпадающего списка */
    items: BaseSelectItem[];
    /** Value активного элемента из выпадающего списка */
    activeValue?: string | string[];
    /** Флаг отображения лейбла сбоку от списка */
    labelAside?: boolean;
    /** Флаг disabled для компонента */
    disabled?: boolean;
    /** Флаг об ошибке */
    isError?: boolean;
    /** Размер компонента */
    size?: SelectSize;
    /** Флаг для показа ошибки или подсказки */
    showHint?: boolean;
    /** Data атрибут */
    dataTestId?: string;
    /** Data атрибут для элементов списка (один на всех) */
    itemDataTestId?: string;
    /** Колбэк выбора item из списка */
    onChange?: (value: string | undefined, fieldName?: string) => void;
    /** Ширина label */
    labelWidth?: number;
    /** Включение режима fixed (совмещено с идентификатором выпадающего списка в этом режиме) */
    fixedModeID?: string;
    /** Имя поля, передается в onChange дополнительным аргументом */
    fieldName?: string;
    /** Подгрузка данных по подскроллу для компонента AsyncSelect */
    onLoadMoreData?: VoidFunction;
}
interface BaseSelectProps extends ExportableBasicSelectProps {
    /** Флаг, открытие выпадающего списка */
    isOpenDropdown?: boolean;
    /** Лейбл селекта */
    label?: React.ReactNode;
    /** Сообщение об ошибке или подсказка */
    hint?: React.ReactNode;
    /** Колбек нажатия на элемент списка */
    onItemClick: (value: string) => void;
    /** Колбек закрытия выпадающего списка */
    onCloseDropdown: VoidFunction;
    /** Флаг подгрузки списка */
    isLoading?: boolean;
    /** Вложенные компоненты */
    children: ReactNode;
}
interface AsyncSelectProps extends ExportableBasicSelectProps {
    /** Колбэк запроса данных к API */
    onAsyncChange: (value: string, fieldName?: string) => void;
    /** Placeholder если не задан activeValue */
    placeholder?: string;
    /** Текст сообщение об ошибке или подскази */
    hintMessage?: string;
    /** Лейбл селекта */
    label?: string;
    /** Коллбэк для события нажатия клавиш, создающих символы (буквы, цифры, пунктуация и т.д.),
     *  передаваемый в BaseInput  */
    inputOnKeyPress?: React.KeyboardEventHandler;
    /** Флаг запроса данных к API при фокусировании поля ввода */
    callAsyncChangeOnFocus?: boolean;
    /** Флаг для подгрузки данных, показывает есть ли еще результаты в запросе */
    hasMoreData?: boolean;
    /** Время в ms для задержки ввода данных */
    debounceTime?: number;
}
interface SelectProps extends ExportableBasicSelectProps {
    /** Placeholder если не задан activeValue */
    placeholder?: string;
    /** Текст сообщение об ошибке или подскази */
    hintMessage?: string;
    /** Лейбл селекта */
    label?: string;
    /** Ширина label */
    labelWidth?: number;
}
type MultiselectProps = Pick<ExportableBasicSelectProps, 'id' | 'items' | 'labelAside' | 'disabled' | 'size' | 'labelWidth' | 'fieldName' | 'dataTestId'> & {
    /** Название списка */
    label?: string;
    /** Выбранные в списке элементы */
    activeValue?: string[];
    /** Разрешить поиск? */
    enableSearch?: boolean;
    /** Колбэк выбора item из списка */
    onChange?: (values: string[], fieldName?: string) => void;
};
export { SelectSize, BaseSelectItem, ExportableBasicSelectProps, BaseSelectProps, AsyncSelectProps, SelectProps, MultiselectProps };
