import { RefObject, ReactNode, ReactElement, ElementType } from 'react';
interface Position {
    x: number;
    y: number;
}
/** Положение меню */
type MenuPosition = Position;
/** Позиция курсора мыши */
type MousePosition = Position;
/** Размер меню */
type MenuSize = 'default' | 'small';
interface ContextMenuViewProps {
    children: ReactElement[];
    /** Координаты курсора, где требуется отобразить меню.
     * undefined - скрыть меню
     */
    mousePosition?: MousePosition;
    size?: MenuSize;
    onClose?: VoidFunction;
}
interface ContextMenuProps {
    trigger: RefObject<HTMLElement>;
    children: ReactElement[];
    size?: MenuSize;
    onHide?: VoidFunction;
    onShow?: VoidFunction;
}
interface MenuProps {
    children: ReactElement | ReactElement[];
    menuPosition?: MenuPosition | null;
    size?: MenuSize;
    /** Метка меню для определения принадлежности к одной группе */
    menuStamp?: string;
    onHide?: VoidFunction;
    onShow?: VoidFunction;
}
interface ItemProps {
    id?: string;
    label?: string;
    Icon?: ElementType;
    hint?: ElementType | string;
    size?: MenuSize;
    children?: ReactNode;
    withSubmenu?: boolean;
    withIcons?: boolean;
    menuId?: string;
    /** Флаг disabled */
    disabled?: boolean;
    onClick?: VoidFunction;
    onMouseDown?: VoidFunction;
}
interface ExpandedMenu {
    parentItemId?: string;
    menuId?: string;
}
interface Context {
    expandedMenu: ExpandedMenu | null;
    hoveredId: string | null;
    setExpandedMenu: (expended: ExpandedMenu | null) => void;
    setHoveredId: (id: string) => void;
}
export { MenuPosition, MousePosition, MenuSize, ContextMenuViewProps, ContextMenuProps, MenuProps, ItemProps, ExpandedMenu, Context };
