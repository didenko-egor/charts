{"version":3,"file":"utils.js","sources":["../../../src/CalendarV2/InputTime/utils.ts"],"sourcesContent":["import { RefObject } from 'react';\n\nconst TIME_REGEX = /^(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$/;\n\n/**\n * Провести валидацию ввода времени\n * @param value Текущее значение в input\n * @param withLength Учитывая длину ввода\n * @returns\n */\nexport function testTimeString(value?: string, withLength = false): boolean {\n  if (!value) return true;\n\n  const isValid = TIME_REGEX.test(value);\n\n  if (!withLength) return isValid;\n\n  /** Валидация полностью введенных значений */\n  if (value.length === 5) {\n    return isValid;\n  }\n\n  /** Если учитывается длина, то валидным считается не полностью введенные данные */\n  return true;\n}\n\nconst emptyArray: never[] = [];\n\n/** Получить часы и минуты из строки */\nexport const getTimes = (timeStr?: string): string[] => {\n  if (timeStr && TIME_REGEX.test(timeStr)) {\n    return timeStr.split(':');\n  }\n\n  return emptyArray;\n};\n\n/** Прокрутить вверх */\nexport const scrollToTop = (containerRef: RefObject<HTMLElement | null>, target: HTMLElement): void => {\n  containerRef.current?.scroll({ top: target.offsetTop, behavior: 'smooth' });\n};\n\n/** Заполнить нулями числа до указанного количества символов */\nexport function zeroPad(value: number, places = 2): string {\n  return String(value).padStart(places, '0');\n}\n\n/** Список часов */\nexport const HOURS = [...Array(24)].map((_, v) => zeroPad(v));\n\n/** Список минут */\nexport const MINUTES = [...Array(60)].map((_, v) => zeroPad(v));\n\n/** Преобразовать дату во внутренний формат */\nexport function formatTimeToString(date?: Date): string {\n  if (!date) return '';\n\n  return `${ zeroPad(date.getHours()) }:${ zeroPad(date.getMinutes()) }`;\n}\n\nexport interface TimeValue {\n  /** Часы */\n  hours: number;\n\n  /** Минуты */\n  minutes: number;\n}\n\n/** Состояние ввода */\nexport interface TimeFormat {\n  /** Ввода пуст? */\n  isEmpty: boolean;\n\n  /** Значение времени */\n  value?: TimeValue;\n}\n\n/** Преобразовать во внешний формат */\nexport function formatToTime(value?: string): TimeFormat {\n  if (!value) return { isEmpty: true };\n\n  const parts = getTimes(value);\n  if (parts.length < 2) return { isEmpty: false };\n\n  return {\n    value: { hours: +parts[0], minutes: +parts[1] },\n    isEmpty: false\n  };\n}\n"],"names":["TIME_REGEX","testTimeString","value","withLength","isValid","test","length","emptyArray","getTimes","timeStr","split","scrollToTop","containerRef","target","current","scroll","top","offsetTop","behavior","zeroPad","places","String","padStart","HOURS","__spreadArray","Array","map","_","v","MINUTES","formatTimeToString","date","getHours","getMinutes","formatToTime","isEmpty","parts","hours","minutes"],"mappings":"sCAEA,IAAMA,EAAa,+CAQHC,EAAeC,EAAgBC,GAC7C,gBAD6CA,OACxCD,EAAO,OAAO,EAEnB,IAAME,EAAUJ,EAAWK,KAAKH,GAEhC,OAAKC,GAGgB,IAAjBD,EAAMI,QAHcF,CAS1B,CAEA,IAAMG,EAAsB,GAGfC,EAAW,SAACC,GACvB,OAAIA,GAAWT,EAAWK,KAAKI,GACtBA,EAAQC,MAAM,KAGhBH,CACT,EAGaI,EAAc,SAACC,EAA6CC,mBACvED,EAAaE,wBAASC,OAAO,CAAEC,IAAKH,EAAOI,UAAWC,SAAU,UAClE,WAGgBC,EAAQjB,EAAekB,GACrC,oBADqCA,KAC9BC,OAAOnB,GAAOoB,SAASF,EAAQ,IACxC,KAGaG,EAAQC,KAAIC,MAAM,QAAKC,KAAI,SAACC,EAAGC,GAAM,OAAAT,EAAQS,MAG7CC,EAAUL,KAAIC,MAAM,QAAKC,KAAI,SAACC,EAAGC,GAAM,OAAAT,EAAQS,eAG5CE,EAAmBC,GACjC,OAAKA,EAEMZ,EAAQY,EAAKC,gBAAiBb,EAAQY,EAAKE,cAFpC,EAGpB,UAoBgBC,EAAahC,GAC3B,IAAKA,EAAO,MAAO,CAAEiC,SAAS,GAE9B,IAAMC,EAAQ5B,EAASN,GACvB,OAAIkC,EAAM9B,OAAS,EAAU,CAAE6B,SAAS,GAEjC,CACLjC,MAAO,CAAEmC,OAAQD,EAAM,GAAIE,SAAUF,EAAM,IAC3CD,SAAS,EAEb"}