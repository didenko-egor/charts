{"version":3,"file":"ControlledInputTime.js","sources":["../../../src/CalendarV2/InputTime/ControlledInputTime.tsx"],"sourcesContent":["import React, {\n  useMemo,\n  useCallback,\n  useRef,\n  useState,\n  useEffect,\n  FocusEventHandler\n} from 'react';\nimport { cssDecorator } from '@front-toolkit/utils';\nimport { ForwardedMaskInput } from 'core/src/MaskedInput';\nimport { InputProps } from 'core/src/Input';\n\nimport { IconTime } from 'core/src/icons';\n\nimport { List } from './List';\nimport {\n  HOURS,\n  MINUTES,\n  getTimes,\n  testTimeString\n} from './utils';\nimport { useInputStyles } from '../hooks/useInputStyles';\nimport { useBodyScrollLock } from '../hooks/useBodyScrollLock';\n\nimport styles from './styles.scss';\n\nconst cd = cssDecorator(styles);\n\nconst TIME_ICONS = [{ icon: <IconTime />, onClick: (): void => {} }];\n\nexport type ControlledInputTimeProps = InputProps & {\n  /** Значение, используемое в качестве плейсхолдера для инпута и маски для ввода */\n  placeholderMask?: string;\n};\n\nexport function ControlledInputTime({\n  id,\n  placeholderMask = 'чч:мм',\n  value,\n  onChange,\n  onBlur,\n  fieldName,\n  size = 'default',\n  labelAside,\n  disabled,\n  isError,\n  ...rest\n}: ControlledInputTimeProps): JSX.Element {\n  const [isInvalid, setIsInvalid] = useState<boolean>(testTimeString(value, true));\n  const [activeHours, activeMinutes] = useMemo(() => getTimes(value), [value]);\n\n  const hoursListRef = useRef<HTMLUListElement | null>(null);\n  const minutesListRef = useRef<HTMLUListElement | null>(null);\n\n  const inputRef = useRef<HTMLInputElement>(null);\n  const {\n    positionStyles,\n    focusOnInput\n  } = useInputStyles({\n    labelAside,\n    size,\n    inputRef\n  });\n\n  const targetRef = useRef<HTMLInputElement>(null);\n\n  useBodyScrollLock({ targetRef });\n\n  const handleHoursChange = useCallback((hour: string) => {\n    focusOnInput();\n\n    if (onChange) {\n      const newValue = `${ hour }:${ activeMinutes || '00' }`;\n      onChange(newValue, fieldName);\n    }\n  }, [activeMinutes, fieldName, focusOnInput, onChange]);\n\n  const handleMinutesChange = useCallback((minute: string) => {\n    focusOnInput();\n\n    if (onChange) {\n      const newValue = `${ activeHours || '00' }:${ minute }`;\n      onChange(newValue, fieldName);\n    }\n  }, [activeHours, fieldName, focusOnInput, onChange]);\n\n  const handleInputChange = useCallback((newValue: string): void => {\n    const isValid = testTimeString(newValue);\n    const isInputValid = !!newValue && isValid;\n\n    /** При невалидном значении проскролить в начало списков */\n    if (!isInputValid) {\n      hoursListRef.current?.scroll({ top: 0, behavior: 'smooth' });\n      minutesListRef.current?.scroll({ top: 0, behavior: 'smooth' });\n    }\n\n    if (onChange) {\n      onChange(newValue, fieldName);\n    }\n  }, [fieldName, onChange]);\n\n  /** Отобразить состояние ошибки при потере фокуса */\n  const handleBlur: FocusEventHandler = useCallback(event => {\n    const isValid = testTimeString(value);\n\n    setIsInvalid(!isValid);\n\n    if (onBlur) onBlur(event);\n  }, [value, onBlur]);\n\n  /** Обновление значения ввода при передаче снаружи */\n  useEffect(() => {\n    const isValid = testTimeString(value, true);\n\n    setIsInvalid(!isValid);\n  }, [value]);\n\n  return (\n    <div\n      className={ cd('time_input', { [`${ size }`]: true }) }\n      ref={ targetRef }\n      role=\"presentation\"\n    >\n      <ForwardedMaskInput\n        { ...rest }\n        disabled={ disabled }\n        id={ id }\n        value={ value }\n        placeholderMask={ placeholderMask }\n        onChange={ handleInputChange }\n        icons={ TIME_ICONS }\n        size={ size }\n        inputRef={ inputRef }\n        isError={ isError || isInvalid }\n        onBlur={ handleBlur }\n        withoutDefaultMinWidth\n      />\n\n      <div\n        className={ styles.dropdown }\n        style={ positionStyles }\n      >\n        <List\n          items={ HOURS }\n          value={ activeHours }\n          onChange={ handleHoursChange }\n          listRef={ hoursListRef }\n        />\n\n        <List\n          items={ MINUTES }\n          value={ activeMinutes }\n          onChange={ handleMinutesChange }\n          listRef={ minutesListRef }\n        />\n      </div>\n    </div>\n  );\n}\n"],"names":["cd","cssDecorator","styles","TIME_ICONS","icon","React","IconTime","onClick","ControlledInputTime","_a","id","_c","placeholderMask","value","onChange","onBlur","fieldName","_d","size","labelAside","disabled","isError","rest","_e","useState","testTimeString","isInvalid","setIsInvalid","_f","useMemo","getTimes","activeHours","activeMinutes","hoursListRef","useRef","minutesListRef","inputRef","_g","useInputStyles","positionStyles","focusOnInput","targetRef","useBodyScrollLock","handleHoursChange","useCallback","hour","handleMinutesChange","minute","handleInputChange","newValue","isValid","current","scroll","top","behavior","handleBlur","event","useEffect","className","_b","ref","role","ForwardedMaskInput","icons","withoutDefaultMinWidth","dropdown","style","List","items","HOURS","listRef","MINUTES"],"mappings":"qkBA0BA,IAAMA,EAAKC,EAAaC,GAElBC,EAAa,CAAC,CAAEC,KAAMC,gBAACC,QAAaC,QAAS,wBAOnCC,EAAoBC,SAClCC,OACAC,oBAAAC,aAAkB,UAClBC,UACAC,aACAC,WACAC,cACAC,SAAAC,aAAO,YACPC,eACAC,aACAC,YACGC,MAX+B,2GAa5BC,EAA4BC,EAAkBC,EAAeZ,GAAO,IAAnEa,OAAWC,OACZC,EAA+BC,GAAQ,WAAM,OAAAC,EAASjB,KAAQ,CAACA,IAA9DkB,OAAaC,OAEdC,EAAeC,EAAgC,MAC/CC,EAAiBD,EAAgC,MAEjDE,EAAWF,EAAyB,MACpCG,EAGFC,EAAe,CACjBnB,aACAD,OACAkB,aALAG,mBACAC,iBAOIC,EAAYP,EAAyB,MAE3CQ,EAAkB,CAAED,cAEpB,IAAME,EAAoBC,GAAY,SAACC,IACrCL,IAEI1B,IAEFA,EADqB+B,OAAUb,GAAiB,MAC7BhB,KAEpB,CAACgB,EAAehB,EAAWwB,EAAc1B,IAEtCgC,EAAsBF,GAAY,SAACG,IACvCP,IAEI1B,IAEFA,GADqBiB,GAAe,UAAUgB,EAC3B/B,KAEpB,CAACe,EAAaf,EAAWwB,EAAc1B,IAEpCkC,EAAoBJ,GAAY,SAACK,WAC/BC,EAAUzB,EAAewB,KACRA,GAAYC,cAIjCjB,EAAakB,wBAASC,OAAO,CAAEC,IAAK,EAAGC,SAAU,qBACjDnB,EAAegB,wBAASC,OAAO,CAAEC,IAAK,EAAGC,SAAU,YAGjDxC,GACFA,EAASmC,EAAUjC,KAEpB,CAACA,EAAWF,IAGTyC,EAAgCX,GAAY,SAAAY,GAChD,IAAMN,EAAUzB,EAAeZ,GAE/Bc,GAAcuB,GAEVnC,GAAQA,EAAOyC,KAClB,CAAC3C,EAAOE,IASX,OANA0C,GAAU,WACR,IAAMP,EAAUzB,EAAeZ,GAAO,GAEtCc,GAAcuB,KACb,CAACrC,IAGFR,uBACEqD,UAAY1D,EAAG,mBAAgB2D,EAAC,GAAIzC,IAAU,MAC9C0C,IAAMnB,EACNoB,KAAK,gBAELxD,gBAACyD,OACMxC,GACLF,SAAWA,EACXV,GAAKA,EACLG,MAAQA,EACRD,gBAAkBA,EAClBE,SAAWkC,EACXe,MAAQ5D,EACRe,KAAOA,EACPkB,SAAWA,EACXf,QAAUA,GAAWK,EACrBX,OAASwC,EACTS,6BAGF3D,uBACEqD,UAAYxD,EAAO+D,SACnBC,MAAQ3B,GAERlC,gBAAC8D,GACCC,MAAQC,EACRxD,MAAQkB,EACRjB,SAAW6B,EACX2B,QAAUrC,IAGZ5B,gBAAC8D,GACCC,MAAQG,EACR1D,MAAQmB,EACRlB,SAAWgC,EACXwB,QAAUnC,KAKpB"}