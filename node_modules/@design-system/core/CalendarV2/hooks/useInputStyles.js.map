{"version":3,"file":"useInputStyles.js","sources":["../../../src/CalendarV2/hooks/useInputStyles.tsx"],"sourcesContent":["import {\n  CSSProperties,\n  RefObject,\n  useCallback,\n  useEffect,\n  useState\n} from 'react';\n\nimport { InputSize } from '../../../types/input';\n\n/** Позиционирование календаря под полем ввода */\nfunction getInputPosition(element: HTMLInputElement): CSSProperties {\n  const rect = element.getBoundingClientRect();\n\n  return {\n    left: `${ rect.left }px`,\n    top: `${ rect.bottom }px`\n  };\n}\n\ninterface UseInputStylesProps {\n  /** Ref input */\n  inputRef?: RefObject<HTMLInputElement>;\n\n  /** Лейбл сбоку? */\n  labelAside?: boolean;\n\n  /** Размер контрола */\n  size?: InputSize;\n}\n\ninterface UseInputStylesResult {\n  /** Стиль для позиционирования календаря */\n  positionStyles: CSSProperties;\n\n  /** Перевести фокус на input */\n  focusOnInput: VoidFunction;\n}\n\n/** Логика установки дополнительных стилей на поле ввода */\nexport function useInputStyles({\n  inputRef, labelAside, size\n}: UseInputStylesProps): UseInputStylesResult {\n  const [positionStyles, setPositionStyles] = useState<CSSProperties>({});\n\n  const focusOnInput = useCallback(() => {\n    inputRef?.current?.focus();\n  }, [inputRef]);\n\n  /** Установка новой позиции календаря */\n  const handlePositionChange = useCallback(() => {\n    if (!inputRef?.current) return;\n    setPositionStyles(getInputPosition(inputRef.current));\n  }, [inputRef]);\n\n  /** Перемещение календаря при изменении labelAside */\n  useEffect(() => {\n    const timer = setTimeout(handlePositionChange, 10);\n\n    return (): void => clearTimeout(timer);\n  }, [labelAside, size, handlePositionChange]);\n\n  /** Перемещение календаря за полем ввода при скролле или изменения размеров окна */\n  useEffect(() => {\n    const element = inputRef?.current;\n    if (element) {\n      element.addEventListener('focusin', handlePositionChange);\n    }\n\n    document.addEventListener('scroll', handlePositionChange);\n    window.addEventListener('resize', handlePositionChange);\n\n    return (): void => {\n      if (element) {\n        element.removeEventListener('focusin', handlePositionChange);\n      }\n      document.removeEventListener('scroll', handlePositionChange);\n      window.removeEventListener('resize', handlePositionChange);\n    };\n  }, [inputRef, handlePositionChange]);\n\n  return {\n    positionStyles,\n    focusOnInput\n  };\n}\n"],"names":["useInputStyles","_a","inputRef","labelAside","size","_b","useState","positionStyles","setPositionStyles","focusOnInput","useCallback","current","focus","handlePositionChange","element","rect","left","getBoundingClientRect","top","bottom","useEffect","timer","setTimeout","clearTimeout","addEventListener","document","window","removeEventListener"],"mappings":"0EAwCgBA,EAAeC,OAC7BC,aAAUC,eAAYC,SAEhBC,EAAsCC,EAAwB,IAA7DC,OAAgBC,OAEjBC,EAAeC,GAAY,2BAC/BR,eAAAA,EAAUS,wBAASC,UAClB,CAACV,IAGEW,EAAuBH,GAAY,WAvC3C,IAA0BI,EAClBC,GAuCCb,eAAAA,EAAUS,UACfH,GAzCsBM,EAyCaZ,EAASS,QAtCvC,CACLK,MAHID,EAAOD,EAAQG,yBAGJD,UACfE,IAASH,EAAKI,iBAqCb,CAACjB,IA4BJ,OAzBAkB,GAAU,WACR,IAAMC,EAAQC,WAAWT,EAAsB,IAE/C,OAAO,WAAY,OAAAU,aAAaF,MAC/B,CAAClB,EAAYC,EAAMS,IAGtBO,GAAU,WACR,IAAMN,EAAUZ,eAAAA,EAAUS,QAQ1B,OAPIG,GACFA,EAAQU,iBAAiB,UAAWX,GAGtCY,SAASD,iBAAiB,SAAUX,GACpCa,OAAOF,iBAAiB,SAAUX,GAE3B,WACDC,GACFA,EAAQa,oBAAoB,UAAWd,GAEzCY,SAASE,oBAAoB,SAAUd,GACvCa,OAAOC,oBAAoB,SAAUd,MAEtC,CAACX,EAAUW,IAEP,CACLN,iBACAE,eAEJ"}