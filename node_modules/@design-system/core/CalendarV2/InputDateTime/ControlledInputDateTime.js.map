{"version":3,"file":"ControlledInputDateTime.js","sources":["../../../src/CalendarV2/InputDateTime/ControlledInputDateTime.tsx"],"sourcesContent":["import React, {\n  useCallback,\n  useContext\n} from 'react';\nimport { cssDecorator } from '@front-toolkit/utils';\nimport { InputWrapper } from 'shared/InputWrapper';\nimport { useFormContext } from 'shared/Form/formContext';\nimport { InputWrapperContext } from 'shared/InputWrapper/InputWrapperContext';\nimport { FormSize } from 'shared/Form/types';\nimport { CalendarPage } from 'core/shared/PageCalendar/types';\nimport { CalendarProps } from 'shared/types/calendar';\n\nimport { getDateTimeInput } from './utils';\nimport { ControlledInputCalendar } from '../InputCalendar/ControlledInputCalendar';\nimport { ControlledInputTime, ControlledInputTimeProps } from '../InputTime/ControlledInputTime';\n\nimport styles from './styles.scss';\n\nconst cd = cssDecorator(styles);\n\nexport interface ControlledInputDateTimeProps {\n  /** Подсказка */\n  hintMessage?: string;\n\n  /** Ярлык */\n  label?: string;\n\n  /** Размер */\n  size?: FormSize;\n\n  /** Флаг, если компенент не активен */\n  disabled?: boolean;\n\n  /** Флаг при ошибке */\n  isError?: boolean;\n\n  /** Флаг расположения ярлыка */\n  labelAside?: boolean;\n\n  /** Свойства для компонента InputCalendar */\n  inputCalendar?: CalendarProps;\n\n  /** Свойства для компонента InputTime */\n  inputTime?: ControlledInputTimeProps;\n\n  /** Начальное значение */\n  value?: string;\n\n  /** Флаг отображения подсказки / ошибки */\n  showHint?: boolean;\n\n  /** Ширина label */\n  labelWidth?: number;\n\n  /** Отключает по дефолту заданную минимальную ширину инпута */\n  withoutDefaultMinWidth?: boolean;\n\n  /** id поля ввода */\n  id?: string;\n\n  /** Страница, на которой открывать календарь */\n  defaultPage?: CalendarPage;\n\n  /** Скрыть выходные? */\n  hideWeekends?: boolean;\n\n  /** Коллбэк, возвращающий выбранную дату и время */\n  onChange?: (value: string) => void;\n}\n\nexport function ControlledInputDateTime({\n  size = 'default',\n  disabled = false,\n  isError = false,\n  labelAside = false,\n  label = '',\n  hintMessage = '',\n  inputCalendar,\n  inputTime,\n  onChange,\n  value,\n  showHint = false,\n  withoutDefaultMinWidth,\n  id,\n  labelWidth,\n  defaultPage,\n  hideWeekends\n}: ControlledInputDateTimeProps): JSX.Element {\n  const parentWrapperSize = useContext(InputWrapperContext)?.size ?? size;\n  const { LABEL_WIDTH, LABEL_ASIDE, SIZE } = useFormContext({ labelWidth, labelAside, size: parentWrapperSize });\n\n  const [dateInput, timeInput] = getDateTimeInput(value);\n\n  const handleChangeDate = useCallback((date: string): void => {\n    if (onChange) {\n      const newV = `${ date }T00:00`;\n      onChange(newV);\n    }\n  }, [onChange]);\n\n  const handleChangeTime = useCallback((time: string) => {\n    if (onChange) {\n      const newValue = `${ dateInput }T${ time }`;\n      onChange(newValue);\n    }\n  }, [dateInput, onChange]);\n\n  return (\n    <InputWrapper\n      label={ label }\n      hint={ hintMessage }\n      styles={ styles }\n      showHint={ showHint }\n      size={ SIZE }\n      disabled={ disabled }\n      labelAside={ LABEL_ASIDE }\n      labelWidth={ LABEL_WIDTH }\n      withoutDefaultMinWidth={ withoutDefaultMinWidth }\n      htmlFor={ id }\n    >\n      <div className={ cd('input_date_time', { [`${ SIZE }`]: true }) }>\n        <ControlledInputCalendar\n          { ...inputCalendar }\n          id={ id }\n          value={ dateInput }\n          onChange={ handleChangeDate }\n          disabled={ disabled }\n          isError={ isError }\n          size={ size }\n          labelAside={ labelAside }\n          defaultPage={ defaultPage }\n          hideWeekends={ hideWeekends }\n          withoutDefaultMinWidth\n        />\n        <ControlledInputTime\n          { ...inputTime }\n          value={ timeInput }\n          onChange={ handleChangeTime }\n          disabled={ disabled }\n          isError={ isError }\n          size={ size }\n          labelAside={ labelAside }\n        />\n      </div>\n    </InputWrapper>\n  );\n}\n"],"names":["cd","cssDecorator","styles","ControlledInputDateTime","_a","_e","size","_f","disabled","_g","isError","_h","labelAside","_j","label","_k","hintMessage","inputCalendar","inputTime","onChange","value","_l","showHint","withoutDefaultMinWidth","id","labelWidth","defaultPage","hideWeekends","parentWrapperSize","useContext","InputWrapperContext","_m","useFormContext","LABEL_WIDTH","LABEL_ASIDE","SIZE","_o","getDateTimeInput","dateInput","timeInput","handleChangeDate","useCallback","date","handleChangeTime","time","React","InputWrapper","hint","htmlFor","className","_b","ControlledInputCalendar","ControlledInputTime"],"mappings":"qlBAkBA,IAAMA,EAAKC,EAAaC,YAoDRC,EAAwBC,aACtCC,SAAAC,aAAO,YACPC,aAAAC,gBACAC,YAAAC,gBACAC,eAAAC,gBACAC,UAAAC,aAAQ,KACRC,gBAAAC,aAAc,KACdC,kBACAC,cACAC,aACAC,UACAC,aAAAC,gBACAC,2BACAC,OACAC,eACAC,gBACAC,iBAEMC,sBAAoBC,EAAWC,yBAAsBxB,oBAAQA,EAC7DyB,EAAqCC,EAAe,CAAEP,aAAYb,aAAYN,KAAMsB,IAAlFK,gBAAaC,gBAAaC,SAE5BC,EAAyBC,EAAiBjB,GAAzCkB,OAAWC,OAEZC,EAAmBC,GAAY,SAACC,GAChCvB,GAEFA,EADiBuB,cAGlB,CAACvB,IAEEwB,EAAmBF,GAAY,SAACG,GAChCzB,GAEFA,EADqBmB,MAAeM,KAGrC,CAACN,EAAWnB,IAEf,OACE0B,gBAACC,GACChC,MAAQA,EACRiC,KAAO/B,EACPd,OAASA,EACToB,SAAWA,EACXhB,KAAO6B,EACP3B,SAAWA,EACXI,WAAasB,EACbT,WAAaQ,EACbV,uBAAyBA,EACzByB,QAAUxB,GAEVqB,uBAAKI,UAAYjD,EAAG,wBAAqBkD,EAAC,GAAIf,IAAU,OACtDU,gBAACM,OACMlC,GACLO,GAAKA,EACLJ,MAAQkB,EACRnB,SAAWqB,EACXhC,SAAWA,EACXE,QAAUA,EACVJ,KAAOA,EACPM,WAAaA,EACbc,YAAcA,EACdC,aAAeA,EACfJ,6BAEFsB,gBAACO,OACMlC,GACLE,MAAQmB,EACRpB,SAAWwB,EACXnC,SAAWA,EACXE,QAAUA,EACVJ,KAAOA,EACPM,WAAaA,MAKvB"}