{"version":3,"file":"useInputDateTime.js","sources":["../../../src/CalendarV2/InputDateTime/useInputDateTime.tsx"],"sourcesContent":["import { useCallback, useEffect, useState } from 'react';\nimport { dayEqual } from 'core/shared/PageCalendar/utils';\n\nimport { formatDateTimeToString, formatToDateTime } from './utils';\n\ninterface UseInputDateTimeProps {\n  /** Дата для отображения в календаре */\n  value?: Date;\n\n  /** Минимальная дата */\n  minDate?: Date;\n\n  /** Максимальная дата */\n  maxDate?: Date;\n\n  /** Дата в календаре изменилась */\n  onChange?: (value?: Date) => void;\n}\n\n/** Логика уведомления об изменении значения в правильном формате */\nexport function useInputDateTime({\n  value,\n  minDate,\n  maxDate,\n  onChange\n}: UseInputDateTimeProps): [string, (value: string) => void] {\n  const [internalValue, setInternalValue] = useState(formatDateTimeToString(value));\n  const [isValid, setIsValid] = useState(true);\n\n  const handleSetValue = useCallback((newValue: string) => {\n    setInternalValue(prev => {\n      if (newValue === prev) {\n        return prev;\n      }\n\n      if (onChange) {\n        const res = formatToDateTime(newValue, minDate, maxDate);\n\n        if (res.value) {\n          onChange(res.value);\n          setIsValid(true);\n        } else if ((res.isEmpty || !res.value) && isValid) {\n          setIsValid(false);\n          onChange();\n        }\n      }\n\n      return newValue;\n    });\n  }, [isValid, maxDate, minDate, onChange]);\n\n  const valueString = formatDateTimeToString(value);\n\n  useEffect(() => {\n    if (!value && internalValue) {\n      return;\n    }\n\n    const internalDate = formatToDateTime(internalValue);\n    let isEqual = false;\n    if (!internalDate.value && !value) {\n      isEqual = true;\n    }\n\n    if (internalDate.value && value) {\n      const dateEqual = dayEqual(value, internalDate.value);\n      const timeEqual = internalDate.value.getHours() === value.getHours()\n        && internalDate.value.getMinutes() === value.getMinutes();\n      isEqual = dateEqual && timeEqual;\n    }\n\n    if (!isEqual) {\n      setInternalValue(formatDateTimeToString(value));\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [valueString]);\n\n  return [internalValue, handleSetValue];\n}\n"],"names":["useInputDateTime","_a","value","minDate","maxDate","onChange","_b","useState","formatDateTimeToString","internalValue","setInternalValue","_c","isValid","setIsValid","handleSetValue","useCallback","newValue","prev","res","formatToDateTime","isEmpty","valueString","useEffect","internalDate","isEqual","dateEqual","dayEqual","timeEqual","getHours","getMinutes"],"mappings":"gOAoBgBA,EAAiBC,OAC/BC,UACAC,YACAC,YACAC,aAEMC,EAAoCC,EAASC,EAAuBN,IAAnEO,OAAeC,OAChBC,EAAwBJ,GAAS,GAAhCK,OAASC,OAEVC,EAAiBC,GAAY,SAACC,GAClCN,GAAiB,SAAAO,GACf,GAAID,IAAaC,EACf,OAAOA,EAGT,GAAIZ,EAAU,CACZ,IAAMa,EAAMC,EAAiBH,EAAUb,EAASC,GAE5Cc,EAAIhB,OACNG,EAASa,EAAIhB,OACbW,GAAW,KACDK,EAAIE,SAAYF,EAAIhB,QAAUU,IACxCC,GAAW,GACXR,KAIJ,OAAOW,OAER,CAACJ,EAASR,EAASD,EAASE,IAEzBgB,EAAcb,EAAuBN,GA0B3C,OAxBAoB,GAAU,WACR,GAAKpB,IAASO,EAAd,CAIA,IAAMc,EAAeJ,EAAiBV,GAClCe,GAAU,EAKd,GAJKD,EAAarB,OAAUA,IAC1BsB,GAAU,GAGRD,EAAarB,OAASA,EAAO,CAC/B,IAAMuB,EAAYC,EAASxB,EAAOqB,EAAarB,OACzCyB,EAAYJ,EAAarB,MAAM0B,aAAe1B,EAAM0B,YACrDL,EAAarB,MAAM2B,eAAiB3B,EAAM2B,aAC/CL,EAAUC,GAAaE,EAGpBH,GACHd,EAAiBF,EAAuBN,OAGzC,CAACmB,IAEG,CAACZ,EAAeK,EACzB"}