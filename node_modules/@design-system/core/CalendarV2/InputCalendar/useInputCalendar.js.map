{"version":3,"file":"useInputCalendar.js","sources":["../../../src/CalendarV2/InputCalendar/useInputCalendar.tsx"],"sourcesContent":["import { useCallback, useEffect, useState } from 'react';\nimport { dayEqual } from 'core/shared/PageCalendar/utils';\n\nimport {\n  formatDateToString,\n  formatStringToDate,\n  formatToDate\n} from './utils';\n\ninterface UseInputCalendarProps {\n  /** Дата для отображения в календаре */\n  value?: Date;\n\n  /** Минимальная дата */\n  minDate?: Date;\n\n  /** Максимальная дата */\n  maxDate?: Date;\n\n  /** Дата в календаре изменилась */\n  onChange?: (value?: Date) => void;\n}\n\n/** Логика уведомления об изменении значения в правильном формате */\nexport function useInputCalendar({\n  value,\n  minDate,\n  maxDate,\n  onChange\n}: UseInputCalendarProps): [string, (value: string) => void] {\n  const [internalValue, setInternalValue] = useState(formatDateToString(value));\n  const [isValid, setIsValid] = useState(true);\n\n  const handleSetValue = useCallback((newValue: string) => {\n    setInternalValue(prev => {\n      if (newValue === prev) {\n        return prev;\n      }\n\n      if (onChange) {\n        const res = formatToDate(newValue, minDate, maxDate);\n\n        if (res.value) {\n          onChange(res.value);\n          setIsValid(true);\n        } else if ((res.isEmpty || !res.value) && isValid) {\n          setIsValid(false);\n          onChange();\n        }\n      }\n\n      return newValue;\n    });\n  }, [isValid, maxDate, minDate, onChange]);\n\n  useEffect(() => {\n    if (!value && internalValue) {\n      return;\n    }\n\n    const internalDate = formatStringToDate(internalValue);\n    let isEqual = false;\n    if (!internalDate && !value) {\n      isEqual = true;\n    }\n\n    if (internalDate && value) {\n      isEqual = dayEqual(value, internalDate);\n    }\n\n    if (!isEqual) {\n      setInternalValue(formatDateToString(value));\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [value?.getFullYear(), value?.getMonth(), value?.getDay()]);\n\n  return [internalValue, handleSetValue];\n}\n"],"names":["useInputCalendar","_a","value","minDate","maxDate","onChange","_b","useState","formatDateToString","internalValue","setInternalValue","_c","isValid","setIsValid","handleSetValue","useCallback","newValue","prev","res","formatToDate","isEmpty","useEffect","internalDate","formatStringToDate","isEqual","dayEqual","getFullYear","getMonth","getDay"],"mappings":"gPAwBgBA,EAAiBC,OAC/BC,UACAC,YACAC,YACAC,aAEMC,EAAoCC,EAASC,EAAmBN,IAA/DO,OAAeC,OAChBC,EAAwBJ,GAAS,GAAhCK,OAASC,OAEVC,EAAiBC,GAAY,SAACC,GAClCN,GAAiB,SAAAO,GACf,GAAID,IAAaC,EACf,OAAOA,EAGT,GAAIZ,EAAU,CACZ,IAAMa,EAAMC,EAAaH,EAAUb,EAASC,GAExCc,EAAIhB,OACNG,EAASa,EAAIhB,OACbW,GAAW,KACDK,EAAIE,SAAYF,EAAIhB,QAAUU,IACxCC,GAAW,GACXR,KAIJ,OAAOW,OAER,CAACJ,EAASR,EAASD,EAASE,IAuB/B,OArBAgB,GAAU,WACR,GAAKnB,IAASO,EAAd,CAIA,IAAMa,EAAeC,EAAmBd,GACpCe,GAAU,EACTF,GAAiBpB,IACpBsB,GAAU,GAGRF,GAAgBpB,IAClBsB,EAAUC,EAASvB,EAAOoB,IAGvBE,GACHd,EAAiBF,EAAmBN,OAGrC,CAACA,eAAAA,EAAOwB,cAAexB,eAAAA,EAAOyB,WAAYzB,eAAAA,EAAO0B,WAE7C,CAACnB,EAAeK,EACzB"}