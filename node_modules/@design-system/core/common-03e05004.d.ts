/// <reference types="react" />
import React from 'react';
type FontIndex = 'sub' | 'sup';
type SizeVariant = 'small' | 'large' | 'default';
type ColorBasicTass = 'tass_dark_30' | 'tass_dark_40' | 'tass_dark_50' | 'tass_dark_60' | 'tass_dark_70' | 'tass_dark_80' | 'tass_dark_90' | 'tass' | 'tass_light_87' | 'tass_light_85' | 'tass_light_70' | 'tass_light_60' | 'tass_light_55' | 'tass_light_50' | 'tass_light_40' | 'tass_light_35' | 'tass_light_30' | 'tass_light_20' | 'tass_light_10' | 'tass_light_5';
type ColorBasicGrey = 'grey_100' | 'grey_90' | 'grey_80' | 'grey_70' | 'grey_60' | 'grey_54' | 'grey_50' | 'grey_40' | 'grey_30' | 'grey_25' | 'grey_20' | 'grey_15' | 'grey_10' | 'grey_5' | 'grey_3' | 'grey_0';
type ColorBasicService = 'negative_dark' | 'negative_light' | 'positive_dark' | 'positive_light' | 'notification_dark' | 'notification_light' | 'transparent';
type ColorInverse = 'primary_inverse';
type ColorBasic = ColorBasicTass | ColorBasicGrey | ColorBasicService | ColorInverse;
type FontColorAliases = 'primary' | 'secondary' | 'tertiary' | 'disabled' | 'text_primary' | 'text_secondary' | 'text_tertiary' | 'text_disabled' | 'text_primary_inverse' | 'link_primary' | 'link_secondary' | 'link_tass';
type BackgroundColorAliases = 'primary' | 'secondary' | 'background_primary' | 'background_secondary' | 'background_tass' | 'background_dark';
type FontColor = ColorBasic | FontColorAliases;
type BackgroundColor = ColorBasic | BackgroundColorAliases;
type HighLightColors = Exclude<BackgroundColor, 'transparent'>;
type FontCommon<InheritColor extends null | 'inherit' = 'inherit'> = {
    /** Флаг для отрисовки строчного представления */
    inline?: boolean;
    /** ID для тестирования */
    dataTestId?: string;
    /** Цвет текста */
    color?: InheritColor extends null ? FontColor : (FontColor | 'inherit');
    /** Выделение текста цветом */
    highlightingColor?: HighLightColors;
    /** Добавляет оформление перечеркнутого текста */
    lineThrough?: boolean;
    /** Добавляет оформление подчеркнутого текста (нативное подчеркивание) */
    underline?: boolean;
    /** Верхний или нижний индекс. ⚠ При использовании принудительно применяется inline отображение   */
    fontIndex?: FontIndex;
    /** Дочерние элементы */
    children: React.ReactNode;
    /** Добавляет text-overflow: ellipsis */
    isEllipsis?: boolean;
};
export { FontIndex, SizeVariant, ColorBasic, FontColorAliases, BackgroundColorAliases, FontColor, BackgroundColor, HighLightColors, FontCommon };
