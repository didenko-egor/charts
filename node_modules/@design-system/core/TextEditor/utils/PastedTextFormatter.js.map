{"version":3,"file":"PastedTextFormatter.js","sources":["../../../src/TextEditor/utils/PastedTextFormatter.ts"],"sourcesContent":["import { ControlsType } from '../EditorControls/types';\n\nclass PastedTextFormatter {\n  text = '';\n\n  controls = {} as ControlsType;\n\n  constructor(text: string, controls: ControlsType = {}) {\n    this.text = text;\n    this.controls = controls;\n  }\n\n  private replacer = (tag: string): void => {\n    this.text = this.text.replace(new RegExp(`<\\\\/?${ tag }[^>]*>`, 'g'), '');\n  };\n\n  private spacesReplacer = (space: string): void => {\n    this.text = this.text.replaceAll(space, ' ');\n  };\n\n  private removeFontFormat = (option: 'acceptable' | 'unacceptable'): void => {\n    const acceptableTags = [\n      'b', 'strong', 'i',\n      'sub', 'sup', 'em'\n    ];\n\n    const unacceptableTags = [\n      'h1', 'h2', 'h3',\n      'h4', 'h5', 'h6',\n      'span', 'o:p', 'meta',\n      '!EndFragment'\n    ];\n\n    const spaceSymbols = ['&nbsp;'];\n\n    const tags = option === 'acceptable' ? acceptableTags : unacceptableTags;\n\n    tags.forEach(this.replacer);\n    spaceSymbols.forEach(this.spacesReplacer);\n  };\n\n  private removeList(): void {\n    const tags = ['ol', 'ul', 'li'];\n\n    tags.forEach(this.replacer);\n  }\n\n  /** Заменяем br что бы сохранить форматирование абзацев */\n  private replaceBR(): void {\n    this.text = this.text.replace(/<br[^>]*>/g, '<p></p>');\n  }\n\n  format(): string {\n    this.replaceBR();\n\n    this.removeFontFormat('unacceptable');\n\n    if (!this.controls) {\n      this.removeFontFormat('acceptable');\n      this.removeList();\n    }\n\n    if (this.controls) {\n      if (!this.controls.formatFont) {\n        this.removeFontFormat('acceptable');\n      }\n\n      if (!this.controls.formatList) {\n        this.removeList();\n      }\n    }\n\n    if (!this.controls.formatLink) {\n      this.replacer('a');\n    }\n\n    return this.text;\n  }\n}\n\nfunction formatPastedText(text: string, controls?: ControlsType): string {\n  const formatter = new PastedTextFormatter(text, controls);\n\n  return formatter.format();\n}\n\nexport default formatPastedText;\n"],"names":["text","controls","this","tag","_this","replace","RegExp","space","replaceAll","option","forEach","replacer","spacesReplacer","PastedTextFormatter","replaceBR","removeFontFormat","removeList","formatFont","formatList","formatLink","formatPastedText","format"],"mappings":"AAEA,iBAKE,WAAYA,EAAcC,GAA1B,wBAA0BA,MAJ1BC,UAAO,GAEPA,cAAW,GAOHA,cAAW,SAACC,GAClBC,EAAKJ,KAAOI,EAAKJ,KAAKK,QAAQ,IAAIC,OAAO,QAASH,WAAc,KAAM,KAGhED,oBAAiB,SAACK,GACxBH,EAAKJ,KAAOI,EAAKJ,KAAKQ,WAAWD,EAAO,MAGlCL,sBAAmB,SAACO,IAeF,eAAXA,EAdU,CACrB,IAAK,SAAU,IACf,MAAO,MAAO,MAGS,CACvB,KAAM,KAAM,KACZ,KAAM,KAAM,KACZ,OAAQ,MAAO,OACf,iBAOGC,QAAQN,EAAKO,UAJG,CAAC,UAKTD,QAAQN,EAAKQ,iBA9B1BV,KAAKF,KAAOA,EACZE,KAAKD,SAAWA,EAqEpB,OArCUY,uBAAR,WACe,CAAC,KAAM,KAAM,MAErBH,QAAQR,KAAKS,WAIZE,sBAAR,WACEX,KAAKF,KAAOE,KAAKF,KAAKK,QAAQ,aAAc,YAG9CQ,mBAAA,WAwBE,OAvBAX,KAAKY,YAELZ,KAAKa,iBAAiB,gBAEjBb,KAAKD,WACRC,KAAKa,iBAAiB,cACtBb,KAAKc,cAGHd,KAAKD,WACFC,KAAKD,SAASgB,YACjBf,KAAKa,iBAAiB,cAGnBb,KAAKD,SAASiB,YACjBhB,KAAKc,cAIJd,KAAKD,SAASkB,YACjBjB,KAAKS,SAAS,KAGTT,KAAKF,OAEhB,IAEA,SAASoB,EAAiBpB,EAAcC,GAGtC,OAFkB,IAAIY,EAAoBb,EAAMC,GAE/BoB,QACnB"}