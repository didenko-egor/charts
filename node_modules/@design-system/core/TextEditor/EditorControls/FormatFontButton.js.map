{"version":3,"file":"FormatFontButton.js","sources":["../../../src/TextEditor/EditorControls/FormatFontButton.tsx"],"sourcesContent":["import React, {\n  useCallback,\n  useContext,\n  useMemo\n} from 'react';\nimport { IconText } from 'core/src/icons';\n\nimport { EditorContext } from '../EditorContext';\nimport Group from '../Group';\nimport { DropdownButton, DropdownItem } from '../Dropdown';\nimport { ControlButtonProps } from './types';\n\nconst checkIsMacOS = (): boolean => (typeof window !== 'undefined' ? (!!window.navigator.platform.match(/^Mac/)) : false);\nconst hotkeyButton = checkIsMacOS() ? '⌘' : 'Ctrl+';\n\n/** TODO: Повысить поддерживаемость кода:\n * \"все эти колбэки выглядят как что-то, что можно оптимизировать.\n * ...самое удобное, не ломающее перфоманс, решение - создать мемоизировнаие значение, примерно такого вида\n * const editorAction = useCallback(({ name, command = false, value }) => {\n *   if (command) {\n *     editor?.commands[name](value);\n *   } else {\n *     editor?.chain().focus()[name](value).run();\n *   }\n * }, [editor])\n * const { italicHandler, ulHandler ... } = useMemo(() => {\n *   const data = {\n *     italicHandler: () => editorAction({ name: 'toggleItalic }),\n *     ulHandler: () => editorAction({ name: 'toggleBulletList' })\n *   }\n *   return data\n * }, [])\" - @zhedik_a\n *\n * */\n\nconst FormatFontButton: React.FC<ControlButtonProps> = ({ hidden }) => {\n  const { editor, disabled } = useContext(EditorContext);\n\n  const boldHandler = useCallback((): void => {\n    editor?.chain().focus().toggleBold().run();\n  }, [editor]);\n\n  const italicHandler = useCallback((): void => {\n    editor?.chain().focus().toggleItalic().run();\n  }, [editor]);\n\n  const superscriptHandler = useCallback((): void => {\n    editor?.chain().focus().unsetSubscript().toggleSuperscript()\n      .run();\n  }, [editor]);\n\n  const subscriptHandler = useCallback((): void => {\n    editor?.chain().focus().unsetSuperscript().toggleSubscript()\n      .run();\n  }, [editor]);\n\n  const boldHotKey = useMemo(() => (\n    <span>{ `${ hotkeyButton }B` }</span>\n  ), []);\n\n  const italicHotKey = useMemo(() => (\n    <span>{ `${ hotkeyButton }I` }</span>\n  ), []);\n\n  return (\n    <Group hidden={ hidden }>\n      <DropdownButton\n        label={ <IconText /> }\n        disabled={ disabled }\n      >\n        <DropdownItem\n          onClick={ boldHandler }\n          data-test-action=\"bold\"\n          hotkey={ boldHotKey }\n        >\n          <span>Полужирный</span>\n        </DropdownItem>\n        <DropdownItem\n          onClick={ italicHandler }\n          data-test-action=\"italic\"\n          hotkey={ italicHotKey }\n        >\n          <span>Курсив</span>\n        </DropdownItem>\n        <DropdownItem onClick={ superscriptHandler } data-test-action=\"superscript\">\n          <span>Надстрочный</span>\n        </DropdownItem>\n        <DropdownItem onClick={ subscriptHandler } data-test-action=\"subscript\">\n          <span>Подстрочный</span>\n        </DropdownItem>\n      </DropdownButton>\n    </Group>\n  );\n};\n\nFormatFontButton.displayName = 'FormatFontButton';\n\nexport default React.memo(FormatFontButton);\n"],"names":["hotkeyButton","window","navigator","platform","match","FormatFontButton","_a","hidden","_b","useContext","EditorContext","editor","disabled","boldHandler","useCallback","chain","focus","toggleBold","run","italicHandler","toggleItalic","superscriptHandler","unsetSubscript","toggleSuperscript","subscriptHandler","unsetSuperscript","toggleSubscript","boldHotKey","useMemo","React","italicHotKey","Group","DropdownButton","label","IconText","DropdownItem","onClick","hotkey","displayName","memo"],"mappings":"6RAYA,IACMA,EADiD,oBAAXC,QAA4BA,OAAOC,UAAUC,SAASC,MAAM,QAClE,IAAM,QAsBtCC,EAAiD,SAACC,OAAEC,WAClDC,EAAuBC,EAAWC,GAAhCC,WAAQC,aAEVC,EAAcC,GAAY,WAC9BH,SAAAA,EAAQI,QAAQC,QAAQC,aAAaC,QACpC,CAACP,IAEEQ,EAAgBL,GAAY,WAChCH,SAAAA,EAAQI,QAAQC,QAAQI,eAAeF,QACtC,CAACP,IAEEU,EAAqBP,GAAY,WACrCH,SAAAA,EAAQI,QAAQC,QAAQM,iBAAiBC,oBACtCL,QACF,CAACP,IAEEa,EAAmBV,GAAY,WACnCH,SAAAA,EAAQI,QAAQC,QAAQS,mBAAmBC,kBACxCR,QACF,CAACP,IAEEgB,EAAaC,GAAQ,WAAM,OAC/BC,4BAAY7B,SACX,IAEG8B,EAAeF,GAAQ,WAAM,OACjCC,4BAAY7B,SACX,IAEH,OACE6B,gBAACE,GAAMxB,OAASA,GACdsB,gBAACG,GACCC,MAAQJ,gBAACK,QACTtB,SAAWA,GAEXiB,gBAACM,GACCC,QAAUvB,qBACO,OACjBwB,OAASV,GAETE,2CAEFA,gBAACM,GACCC,QAAUjB,qBACO,SACjBkB,OAASP,GAETD,uCAEFA,gBAACM,GAAaC,QAAUf,qBAAsC,eAC5DQ,4CAEFA,gBAACM,GAAaC,QAAUZ,qBAAoC,aAC1DK,6CAKV,EAEAxB,EAAiBiC,YAAc,mBAE/B,MAAeT,EAAMU,KAAKlC"}