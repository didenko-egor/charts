{"version":3,"file":"CopyCutPasteButtons.js","sources":["../../../src/TextEditor/EditorControls/CopyCutPasteButtons.tsx"],"sourcesContent":["import React, { useCallback, useContext } from 'react';\nimport { IconClipboard, IconCopy, IconCut } from 'core/src/icons';\nimport { isSSR } from '@front-toolkit/utils';\n\nimport { CopyCutPasteButtonsProps } from './types';\nimport { EditorContext } from '../EditorContext';\nimport Button from '../Button';\nimport Group from '../Group';\nimport formatPastedText from '../utils/PastedTextFormatter';\n\nconst originRegExp = isSSR ? '' : new RegExp(`${ window.location.origin }/`, 'g');\nconst isFirefox = isSSR ? true : window.navigator.userAgent.indexOf('Firefox') !== -1;\n\nconst CopyCutPasteButtons: React.FC<CopyCutPasteButtonsProps> = ({ controls }) => {\n  const { editor, disabled } = useContext(EditorContext);\n\n  const copyHandler = useCallback(async (): Promise<void> => {\n    document.execCommand('copy'); // осторожно, метод execCommand - deprecated\n    editor?.chain().focus();\n  }, [editor]);\n\n  const cutHandler = useCallback(async (): Promise<void> => {\n    document.execCommand('cut');// осторожно, метод execCommand - deprecated\n    editor?.commands.deleteSelection();\n    editor?.chain().focus();\n  }, [editor]);\n\n  const pasteHandler = useCallback(async (): Promise<void> => {\n    try {\n      const selected = await navigator.clipboard.read();\n      const content = await selected[0].getType('text/html');\n      const contentText = formatPastedText(await content.text(), controls);\n\n      /** При вставке из буфера обмена добавляется доп. обертка в виде параграфа <p data-pm-slice=\"1 1 []\">...</p>.\n       * Она оборачивает первый инлайновый элемент, если он есть (ссылку, текст, но не параграф).\n       * Также, к относительным ссылкам добавляется origin текущей страницы. Например, если ссылка имеет атрибут\n       * href=\"tass.ru\", то при локальной разработке после вставки он станет вида href=\"http://localhost:3000/tass.ru\"\n       * */\n      const textWithoutParagraphAddedByClipdoard = contentText\n        .replace(/<p.*?>/i, '')// убираем <p data-pm-slice=\"1 1 []\">\n        .replace(/<\\/p>/i, '')// убираем его </p>\n        .replace(originRegExp, ''); // убираем origin текущей страницы у ссылок, если они есть\n\n      if (contentText) {\n        editor?.commands.insertContent(textWithoutParagraphAddedByClipdoard);\n        editor?.chain().focus();\n      }\n    } catch {\n      console.warn('Nothing to read from the Clipboard');\n    }\n  }, [editor, controls]);\n\n  return (\n    <Group>\n      <Button\n        onClick={ copyHandler }\n        disabled={ disabled }\n        data-test-action=\"copy\"\n      >\n        <IconCopy />\n      </Button>\n      <Button\n        onClick={ cutHandler }\n        disabled={ disabled }\n        data-test-action=\"cut\"\n      >\n        <IconCut />\n      </Button>\n      {\n        !isFirefox && (\n        <Button\n          onClick={ pasteHandler }\n          disabled={ disabled }\n          data-test-action=\"paste\"\n        >\n          <IconClipboard />\n        </Button>\n        )\n      }\n    </Group>\n  );\n};\n\nCopyCutPasteButtons.displayName = 'CopyCutPasteButtons';\n\nexport default React.memo(CopyCutPasteButtons);\n"],"names":["originRegExp","isSSR","RegExp","window","location","origin","isFirefox","navigator","userAgent","indexOf","CopyCutPasteButtons","_a","controls","_b","useContext","EditorContext","editor","disabled","copyHandler","useCallback","document","execCommand","chain","focus","cutHandler","commands","deleteSelection","pasteHandler","clipboard","read","_c","getType","content","formatPastedText","text","contentText","textWithoutParagraphAddedByClipdoard","replace","insertContent","console","warn","React","Group","Button","onClick","IconCopy","IconCut","IconClipboard","displayName","memo"],"mappings":"6YAUA,IAAMA,EAAeC,EAAQ,GAAK,IAAIC,OAAWC,OAAOC,SAASC,WAAY,KACvEC,IAAYL,IAAkE,IAAnDE,OAAOI,UAAUC,UAAUC,QAAQ,WAE9DC,EAA0D,SAACC,OAAEC,aAC3DC,EAAuBC,EAAWC,GAAhCC,WAAQC,aAEVC,EAAcC,GAAY,uFAC9BC,SAASC,YAAY,QACrBL,SAAAA,EAAQM,QAAQC,oBACf,CAACP,IAEEQ,EAAaL,GAAY,uFAC7BC,SAASC,YAAY,OACrBL,SAAAA,EAAQS,SAASC,kBACjBV,SAAAA,EAAQM,QAAQC,oBACf,CAACP,IAEEW,EAAeR,GAAY,mHAEZ,gCAAMZ,UAAUqB,UAAUC,eAC3B,SADCC,SACc,GAAGC,QAAQ,qBACL,OAD/BC,EAAUF,SACInB,EAAAsB,KAAuBD,EAAQE,sBAA7CC,EAAcxB,gBAAiBmB,SAAsBlB,IAOrDwB,EAAuCD,EAC1CE,QAAQ,UAAW,IACnBA,QAAQ,SAAU,IAClBA,QAAQrC,EAAc,IAErBmC,IACFnB,SAAAA,EAAQS,SAASa,cAAcF,GAC/BpB,SAAAA,EAAQM,QAAQC,sCAGlBgB,QAAQC,KAAK,sEAEd,CAACxB,EAAQJ,IAEZ,OACE6B,gBAACC,OACCD,gBAACE,GACCC,QAAU1B,EACVD,SAAWA,qBACM,QAEjBwB,gBAACI,SAEHJ,gBAACE,GACCC,QAAUpB,EACVP,SAAWA,qBACM,OAEjBwB,gBAACK,UAGAxC,GACDmC,gBAACE,GACCC,QAAUjB,EACVV,SAAWA,qBACM,SAEjBwB,gBAACM,SAMX,EAEArC,EAAoBsC,YAAc,sBAElC,MAAeP,EAAMQ,KAAKvC"}