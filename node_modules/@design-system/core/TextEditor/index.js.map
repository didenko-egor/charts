{"version":3,"file":"index.js","sources":["../../src/TextEditor/index.tsx"],"sourcesContent":["import React, {\n  useCallback,\n  useEffect,\n  useState,\n  useRef,\n  useMemo,\n  CSSProperties\n} from 'react';\nimport { useEditor, EditorContent, JSONContent } from '@tiptap/react';\nimport StarterKit from '@tiptap/starter-kit';\nimport Superscript from '@tiptap/extension-superscript';\nimport Subscript from '@tiptap/extension-subscript';\nimport Link from '@tiptap/extension-link';\nimport Highlight from '@tiptap/extension-highlight';\nimport Placeholder from '@tiptap/extension-placeholder';\nimport { cssDecorator } from '@front-toolkit/utils';\nimport { useContextMenu } from '@front-toolkit/hooks';\n\nimport formatPastedText from './utils/PastedTextFormatter';\nimport Controls from './Controls';\nimport AddLinkTooltip from './AddLinkTooltip';\nimport { TextEditorProps } from './types';\nimport { EditorContext } from './EditorContext';\nimport {\n  AddLinkButton,\n  CopyCutPasteButtons,\n  ClearAllButton,\n  FormatFontButton,\n  FormatListButton,\n  UndoRedoButtons\n} from './EditorControls';\nimport { EditorContextMenu } from './EditorContextMenu';\nimport { CONTROLS_HEIGHT, TOOLTIP_INITIAL_STATE, TEXT_EDITOR_WITH_BORDER_HEIGHT } from './constants';\n\nimport styles from './TextEditor.module.scss';\n\nconst cd = cssDecorator(styles);\n\n/** Текстовый редактор */\nexport const TextEditor: React.FC<TextEditorProps> = ({\n  content,\n  format,\n  controls,\n  withBorder,\n  dataTestId,\n  height,\n  setContent,\n  setTextContent,\n  forceUpdateWithValue,\n  disabled = false,\n  placeholder = '',\n  children\n}) => {\n  const editorRef = useRef<HTMLDivElement>(null);\n  const childrenRef = useRef<HTMLDivElement>(null);\n\n  const editor = useEditor({\n    editorProps: {\n      transformPastedHTML: html => formatPastedText(html, controls)\n    },\n    extensions: [\n      StarterKit.configure({\n        history: {\n          depth: 5,\n          newGroupDelay: 400\n        }\n      }),\n      Superscript,\n      Subscript,\n      Link.configure({\n        openOnClick: false,\n        autolink: false\n      }),\n      Highlight.configure({\n        multicolor: true\n      }),\n      Placeholder.configure({\n        placeholder,\n        emptyEditorClass: styles.placeholder\n      })\n    ],\n    autofocus: 'end',\n    content,\n    onUpdate: props => {\n      const editorContent: string | JSONContent[] = (\n        format === 'html'\n          ? props.editor.getHTML()\n          : props.editor.getJSON().content as JSONContent[]\n      );\n\n      setContent(editorContent);\n\n      if (setTextContent) {\n        setTextContent(props.editor.getText());\n      }\n    },\n    enablePasteRules: !controls?.formatLink ? [] : [Link]\n  });\n  const [linkTooltipData, setLinkTooltipData] = useState(TOOLTIP_INITIAL_STATE);\n  const [currentLinkUrl, setCurrentLinkUrl] = useState('');\n  const [contextMenuData, setContextMenuData] = useState(TOOLTIP_INITIAL_STATE);\n\n  const onAddLinkClick = useCallback((): void => {\n    const selection = window.getSelection();\n    const selectedText = selection?.toString();\n\n    if (selectedText || editor?.isActive('link')) {\n      const previousUrl = editor?.getAttributes('link').href;\n\n      if (previousUrl) {\n        setCurrentLinkUrl(previousUrl);\n      }\n\n      const parentPosition = editorRef.current?.getBoundingClientRect();\n      const selectedTextPosition = selection?.getRangeAt(0).getBoundingClientRect();\n\n      if (parentPosition && selectedTextPosition) {\n        const linkTooltipTop = selectedTextPosition.top - parentPosition.top + selectedTextPosition.height;\n        const linkTooltipLeft = selectedTextPosition.left - parentPosition.left;\n\n        /** 300 - ширина тултипа, 12 - минимальный паддинг. Менять стили вместе с этими значениями! */\n        const maxTooltipLeft = parentPosition.right - parentPosition.left - 300 - 12;\n        const left = linkTooltipLeft > maxTooltipLeft ? maxTooltipLeft : linkTooltipLeft;\n\n        setLinkTooltipData({ show: true, top: linkTooltipTop, left });\n        /**\n         * При открытии тултипа для добавления ссылки редактор теряет фокус, из-за чего сбрасывается выделение с текста.\n         * Поэтому искуственно создается эффект выделения добавлением хайлайта, а при закрытии тултипа - он сбрасывается\n         */\n        editor?.commands.setHighlight({ color: 'rgba(18 32 144 / 10%)' });// менять совместно с цветом выделения в стилях\n      }\n    }\n  }, [editor]);\n\n  const closeLinkTooltip = useCallback(() => {\n    setLinkTooltipData(TOOLTIP_INITIAL_STATE);\n    setCurrentLinkUrl('');\n    /** Убираем лишний шаг из истории созданный при выделении текста в момент открытия тултипа */\n    editor?.chain().focus().undo().run();\n  }, [editor]);\n\n  const handleConfirmLinkInput = useCallback((url: string) => {\n    closeLinkTooltip();\n    editor?.chain().focus().extendMarkRange('link').setLink({ href: url })\n      .run();\n  }, [editor, closeLinkTooltip]);\n\n  /** Контекстное меню */\n  const handleContextMenu = useCallback((event: MouseEvent) => {\n    if (editor?.isActive('link') && editor.isFocused) {\n      event.preventDefault();\n\n      const previousUrl = editor?.getAttributes('link').href;\n      const parentPosition = editorRef.current?.getBoundingClientRect();\n\n      if (parentPosition) {\n        const tooltipTop = event.clientY - parentPosition.top;\n        const tooltipLeft = event.clientX - parentPosition.left;\n\n        /** 300 - ширина тултипа, 12 - минимальный паддинг. Менять стили вместе с этими значениями! */\n        const maxTooltipLeft = parentPosition.right - parentPosition.left - 300 - 12;\n        const left = tooltipLeft > maxTooltipLeft ? maxTooltipLeft : tooltipLeft;\n\n        setCurrentLinkUrl(previousUrl);\n        setContextMenuData({ show: true, top: tooltipTop, left });\n        setLinkTooltipData(prevValue => ({ ...prevValue, top: tooltipTop, left }));\n      }\n    }\n  }, [editor]);\n\n  const resetContextData = (): void => {\n    setContextMenuData(TOOLTIP_INITIAL_STATE);\n    setCurrentLinkUrl('');\n  };\n\n  /** Слушатель \"contextmenu\" */\n  useContextMenu(editorRef, handleContextMenu);\n\n  useEffect(() => {\n    const editorBodyRef = editorRef.current;\n\n    if (editorBodyRef && editor) {\n      editorBodyRef.append(editor.options.element);\n    }\n  }, [editor]);\n\n  /** Опасный участок: крайне важно, чтобы значение forceUpdateWithValue сбрасывалось в родителе после первого рендера\n   * до undefined, иначе тут возникнет бесконечный ререндер. См. доку за подробностями.\n   */\n  useEffect(() => {\n    if (forceUpdateWithValue !== undefined) {\n      editor?.commands.setContent(forceUpdateWithValue);\n    }\n  }, [editor?.commands, forceUpdateWithValue]);\n  /** конец опасного участка */\n\n  /** Управление доступностью для изменения поля ввода редактора */\n  useEffect(() => {\n    editor?.setOptions({ editable: !disabled });\n  }, [editor, disabled]);\n\n  const editorClassNames = cd('editor', {\n    [withBorder ? 'with_border' : 'without_border']: true,\n    disabled\n  });\n\n  const value = useMemo(() => ({ editor, disabled }), [editor, disabled]);\n\n  const calculateEditorContentHeight = (): string => {\n    if (height) {\n      return `${ height }px`;\n    }\n\n    if (childrenRef.current && withBorder) {\n      return `${ TEXT_EDITOR_WITH_BORDER_HEIGHT - childrenRef.current.clientHeight }px`;\n    }\n    if (withBorder) {\n      return `${ TEXT_EDITOR_WITH_BORDER_HEIGHT }px`;\n    }\n\n    return '';\n  };\n\n  const calculateEditorHeight = (): number | undefined => {\n    let finalHeight = 0;\n\n    if (height) {\n      finalHeight += height + CONTROLS_HEIGHT;\n\n      if (childrenRef.current?.clientHeight) {\n        finalHeight += childrenRef.current.clientHeight;\n      }\n    }\n\n    return finalHeight || undefined;\n  };\n\n  return (\n    <div\n      className={ withBorder ? styles.wrapper : '' }\n      style={ { height: calculateEditorHeight() } }\n      data-test-id={ dataTestId }\n    >\n      <EditorContext.Provider value={ value }>\n        <Controls widePanel={ !withBorder }>\n          <UndoRedoButtons />\n          <CopyCutPasteButtons controls={ controls } />\n          <FormatFontButton hidden={ !controls?.formatFont } />\n          <FormatListButton hidden={ !controls?.formatList } />\n          <AddLinkButton\n            hidden={ !controls?.formatLink }\n            onClick={ onAddLinkClick }\n          />\n          <ClearAllButton hidden={ !controls?.clearAllButton } />\n        </Controls>\n      </EditorContext.Provider>\n\n      { children && (\n        <div className={ withBorder ? '' : styles.childrenWide } ref={ childrenRef }>\n          { children }\n        </div>\n      ) }\n\n      <EditorContent\n        editor={ editor }\n        className={ editorClassNames }\n        style={ { '--ds-text-editor-with-border-height': calculateEditorContentHeight() } as CSSProperties }\n      />\n      <div ref={ editorRef } className={ styles.editor_root }>\n        { linkTooltipData.show && (\n          <AddLinkTooltip\n            onClose={ closeLinkTooltip }\n            onConfirm={ handleConfirmLinkInput }\n            url={ currentLinkUrl }\n            position={ { top: linkTooltipData.top, left: linkTooltipData.left } }\n          />\n        ) }\n\n        { contextMenuData.show && (\n          <EditorContext.Provider value={ value }>\n            <EditorContextMenu\n              contextMenuData={ contextMenuData }\n              currentLinkUrl={ currentLinkUrl }\n              resetContextData={ resetContextData }\n              setContextMenuData={ setContextMenuData }\n              setLinkTooltipData={ setLinkTooltipData }\n            />\n          </EditorContext.Provider>\n        ) }\n      </div>\n    </div>\n  );\n};\n"],"names":["cd","cssDecorator","styles","TextEditor","_a","content","format","controls","withBorder","dataTestId","height","setContent","setTextContent","forceUpdateWithValue","_c","disabled","_d","placeholder","children","editorRef","useRef","childrenRef","editor","useEditor","editorProps","transformPastedHTML","html","formatPastedText","extensions","StarterKit","configure","history","depth","newGroupDelay","Superscript","Subscript","Link","openOnClick","autolink","Highlight","multicolor","Placeholder","emptyEditorClass","autofocus","onUpdate","props","editorContent","getHTML","getJSON","getText","enablePasteRules","formatLink","_e","useState","TOOLTIP_INITIAL_STATE","linkTooltipData","setLinkTooltipData","_f","currentLinkUrl","setCurrentLinkUrl","_g","contextMenuData","setContextMenuData","onAddLinkClick","useCallback","selection","window","getSelection","toString","isActive","previousUrl","getAttributes","href","parentPosition","current","getBoundingClientRect","selectedTextPosition","getRangeAt","linkTooltipTop","top","linkTooltipLeft","left","maxTooltipLeft","right","show","commands","setHighlight","color","closeLinkTooltip","chain","focus","undo","run","handleConfirmLinkInput","url","extendMarkRange","setLink","handleContextMenu","event","isFocused","preventDefault","tooltipTop_1","clientY","tooltipLeft","clientX","left_1","prevValue","useContextMenu","useEffect","editorBodyRef","append","options","element","undefined","setOptions","editable","editorClassNames","_b","value","useMemo","React","className","wrapper","style","finalHeight","CONTROLS_HEIGHT","clientHeight","calculateEditorHeight","EditorContext","Provider","Controls","widePanel","UndoRedoButtons","CopyCutPasteButtons","FormatFontButton","hidden","formatFont","FormatListButton","formatList","AddLinkButton","onClick","ClearAllButton","clearAllButton","childrenWide","ref","EditorContent","TEXT_EDITOR_WITH_BORDER_HEIGHT","editor_root","AddLinkTooltip","onClose","onConfirm","position","EditorContextMenu","resetContextData"],"mappings":"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"}