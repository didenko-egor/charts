{"version":3,"file":"index.js","sources":["../../../src/TextEditor/EditorContextMenu/index.tsx"],"sourcesContent":["import React, { useCallback, useContext } from 'react';\n\nimport { IconGlobe } from 'core/src/icons';\n\nimport { DropdownItem } from '../Dropdown';\nimport ContextMenu from '../ContextMenu';\nimport { TOOLTIP_INITIAL_STATE } from '../constants';\nimport { TooltipState } from '../types';\nimport { EditorContext } from '../EditorContext';\n\nimport styles from '../TextEditor.module.scss';\n\nexport interface EditorContextMenuProps {\n  /** Значение урла для ссылки */\n  currentLinkUrl: string;\n\n  /** Служебные данные для контекстного меню */\n  contextMenuData: TooltipState;\n\n  /** Колбэк для изменения служебных данных контекстного меню */\n  setContextMenuData: React.Dispatch<React.SetStateAction<TooltipState>>;\n\n  /** Сброс состояния контекстного меню */\n  resetContextData(): void;\n\n  /** Колбэк для изменения служебных данных тултипа для добавления ссылки */\n  setLinkTooltipData: React.Dispatch<React.SetStateAction<TooltipState>>;\n}\n\nexport const EditorContextMenu: React.FC<EditorContextMenuProps> = React.memo(({\n  currentLinkUrl,\n  contextMenuData,\n  setContextMenuData,\n  resetContextData,\n  setLinkTooltipData\n}) => {\n  const { editor } = useContext(EditorContext);\n\n  const closeContextMenu = useCallback(() => {\n    if (contextMenuData.show) {\n      resetContextData();\n    }\n  }, [resetContextData, contextMenuData.show]);\n\n  const onContextMenuLinkClick = useCallback(() => {\n    window.open(currentLinkUrl, '_blank')?.focus();\n    resetContextData();\n  }, [resetContextData, currentLinkUrl]);\n\n  const onContextMenuEditClick = useCallback(() => {\n    setLinkTooltipData(prevValue => ({ ...prevValue, show: true }));\n    setContextMenuData(TOOLTIP_INITIAL_STATE);\n  }, [setLinkTooltipData, setContextMenuData]);\n\n  const onContextMenuCopyClick = useCallback(async () => {\n    const link = document.createElement('a');\n    link.href = currentLinkUrl;\n    link.text = currentLinkUrl;\n\n    const blob = Promise.resolve(new Blob([link.outerHTML], { type: 'text/html' }));\n\n    try {\n      const clipboardItem = new ClipboardItem({ 'text/html': blob });\n      await navigator.clipboard.write([clipboardItem]);\n    } catch {\n      await navigator.clipboard.writeText(currentLinkUrl);\n    }\n\n    resetContextData();\n  }, [currentLinkUrl, resetContextData]);\n\n  const onContextMenuDeleteClick = useCallback(async () => {\n    editor?.chain().focus().unsetLink().run();\n    resetContextData();\n  }, [editor, resetContextData]);\n\n  return (\n    <ContextMenu\n      position={ { top: contextMenuData.top, left: contextMenuData.left } }\n      onClose={ closeContextMenu }\n    >\n      <DropdownItem onClick={ onContextMenuLinkClick } icon={ <IconGlobe /> }>\n        <span className={ styles.link }>{ currentLinkUrl }</span>\n      </DropdownItem>\n      <DropdownItem onClick={ onContextMenuEditClick }>\n        <span>Редактировать…</span>\n      </DropdownItem>\n      <DropdownItem onClick={ onContextMenuCopyClick }>\n        <span>Скопировать</span>\n      </DropdownItem>\n      <DropdownItem onClick={ onContextMenuDeleteClick }>\n        <span>Удалить</span>\n      </DropdownItem>\n    </ContextMenu>\n  );\n});\n\nEditorContextMenu.displayName = 'EditorContextMenu';\n"],"names":["EditorContextMenu","React","memo","_a","currentLinkUrl","contextMenuData","setContextMenuData","resetContextData","setLinkTooltipData","editor","useContext","EditorContext","closeContextMenu","useCallback","show","onContextMenuLinkClick","window","open","focus","onContextMenuEditClick","prevValue","TOOLTIP_INITIAL_STATE","onContextMenuCopyClick","link","document","createElement","href","text","blob","Promise","resolve","Blob","outerHTML","type","clipboardItem","ClipboardItem","navigator","clipboard","write","_b","writeText","onContextMenuDeleteClick","chain","unsetLink","run","ContextMenu","position","top","left","onClose","DropdownItem","onClick","icon","IconGlobe","className","styles","displayName"],"mappings":"ybA6BaA,EAAsDC,EAAMC,MAAK,SAACC,OAC7EC,mBACAC,oBACAC,uBACAC,qBACAC,uBAEQC,EAAWC,EAAWC,UAExBC,EAAmBC,GAAY,WAC/BR,EAAgBS,MAClBP,MAED,CAACA,EAAkBF,EAAgBS,OAEhCC,EAAyBF,GAAY,2BACzCG,OAAOC,KAAKb,EAAgB,0BAAWc,QACvCX,MACC,CAACA,EAAkBH,IAEhBe,EAAyBN,GAAY,WACzCL,GAAmB,SAAAY,GAAa,cAAMA,IAAWN,MAAM,OACvDR,EAAmBe,KAClB,CAACb,EAAoBF,IAElBgB,EAAyBT,GAAY,kHACnCU,EAAOC,SAASC,cAAc,MAC/BC,KAAOtB,EACZmB,EAAKI,KAAOvB,EAENwB,EAAOC,QAAQC,QAAQ,IAAIC,KAAK,CAACR,EAAKS,WAAY,CAAEC,KAAM,gCAI9D,6BADMC,EAAgB,IAAIC,cAAc,CAAE,YAAaP,OACjDQ,UAAUC,UAAUC,MAAM,CAACJ,mBAAjCK,sBAEA,mBAAMH,UAAUC,UAAUG,UAAUpC,kBAApCmC,6BAGFhC,iBACC,CAACH,EAAgBG,IAEdkC,EAA2B5B,GAAY,uFAC3CJ,SAAAA,EAAQiC,QAAQxB,QAAQyB,YAAYC,MACpCrC,gBACC,CAACE,EAAQF,IAEZ,OACEN,gBAAC4C,GACCC,SAAW,CAAEC,IAAK1C,EAAgB0C,IAAKC,KAAM3C,EAAgB2C,MAC7DC,QAAUrC,GAEVX,gBAACiD,GAAaC,QAAUpC,EAAyBqC,KAAOnD,gBAACoD,SACvDpD,wBAAMqD,UAAYC,EAAOhC,MAASnB,IAEpCH,gBAACiD,GAAaC,QAAUhC,GACtBlB,+CAEFA,gBAACiD,GAAaC,QAAU7B,GACtBrB,4CAEFA,gBAACiD,GAAaC,QAAUV,GACtBxC,wCAIR,IAEAD,EAAkBwD,YAAc"}