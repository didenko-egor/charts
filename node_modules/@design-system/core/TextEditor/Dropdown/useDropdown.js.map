{"version":3,"file":"useDropdown.js","sources":["../../../src/TextEditor/Dropdown/useDropdown.ts"],"sourcesContent":["import {\n  useState,\n  useRef,\n  RefObject,\n  useCallback,\n  useEffect\n} from 'react';\n\nconst useDropdown = (): [RefObject<HTMLDivElement>, boolean, (() => void), (() => void)] => {\n  const [dropdownOpen, setDropdownOpen] = useState<boolean>(false);\n  const wrapperRef: RefObject<HTMLDivElement> = useRef(null);\n\n  const toggleDropdown = useCallback(() => setDropdownOpen(prevState => !prevState), []);\n\n  const closeDropdown = useCallback(() => setDropdownOpen(false), []);\n\n  const handleClick = (e: MouseEvent): void => {\n    if (wrapperRef && wrapperRef.current && !wrapperRef.current.children.item(0)?.contains(e.target as Node)) {\n      setDropdownOpen(false);\n    }\n  };\n\n  useEffect(() => {\n    document.addEventListener('click', handleClick);\n\n    return (): void => document.removeEventListener('click', handleClick);\n  }, []);\n\n  return [wrapperRef, dropdownOpen, toggleDropdown, closeDropdown];\n};\n\nexport default useDropdown;\n"],"names":["useDropdown","_a","useState","dropdownOpen","setDropdownOpen","wrapperRef","useRef","toggleDropdown","useCallback","prevState","closeDropdown","handleClick","e","current","children","item","contains","target","useEffect","document","addEventListener","removeEventListener"],"mappings":"iFAQMA,EAAc,WACZ,IAAAC,EAAkCC,GAAkB,GAAnDC,OAAcC,OACfC,EAAwCC,EAAO,MAE/CC,EAAiBC,GAAY,WAAM,OAAAJ,GAAgB,SAAAK,GAAa,OAACA,OAAY,IAE7EC,EAAgBF,GAAY,WAAM,OAAAJ,GAAgB,KAAQ,IAE1DO,EAAc,SAACC,SACfP,GAAcA,EAAWQ,qBAAYR,EAAWQ,QAAQC,SAASC,KAAK,yBAAIC,SAASJ,EAAEK,UACvFb,GAAgB,IAUpB,OANAc,GAAU,WAGR,OAFAC,SAASC,iBAAiB,QAAST,GAE5B,WAAY,OAAAQ,SAASE,oBAAoB,QAASV,MACxD,IAEI,CAACN,EAAYF,EAAcI,EAAgBG,EACpD"}