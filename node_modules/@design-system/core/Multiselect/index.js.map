{"version":3,"file":"index.js","sources":["../../src/Multiselect/index.tsx"],"sourcesContent":["import 'focus-visible';\nimport React, {\n  useState,\n  useEffect,\n  useMemo,\n  useCallback\n} from 'react';\nimport { cssDecorator } from '@front-toolkit/utils';\nimport { MultiselectProps } from 'core/types/select';\nimport { BaseSelect, InputLabel } from 'core/shared';\nimport { BaseInput } from 'shared/BaseInput';\nimport { useFormContext } from 'shared/Form/formContext';\nimport getLabelColor from 'core/utils/getLabelColor';\n\nimport { IconChevronDown, IconSearch } from 'core/src/icons';\n\nimport iconsStyles from 'shared/BaseInput/WithIcons/coreStyles.scss';\n\nimport Label from './Label';\nimport useSearch from './useSearch';\nimport useMultiselect from './useMultiselect';\nimport useStyles from './useStyles';\n\nimport inputStyles from './inputStyles.scss';\n\nconst cd = cssDecorator(inputStyles);\n\nconst wrapperStyles = {};\n\nconst DEFAULT_PROPS = {\n  size: 'default',\n  dataTestId: 'multiselect_id',\n  enableSearch: true\n} as MultiselectProps;\n\n/** ИД для тестов */\nexport const DATA_TEST_ID = {\n  searchIcon: 'multiSelect_searchIcon',\n  chevronDownIcon: 'multiSelect_chevronDownIcon'\n};\n\n/** Компонент множественного выбора с поиском */\nexport function Multiselect({\n  id,\n  items,\n  activeValue,\n  labelAside,\n  disabled,\n  label,\n  enableSearch = DEFAULT_PROPS.enableSearch,\n  size = DEFAULT_PROPS.size,\n  onChange = (): void => undefined,\n  dataTestId = DEFAULT_PROPS.dataTestId,\n  labelWidth,\n  fieldName\n}: MultiselectProps): JSX.Element {\n  const { LABEL_WIDTH, LABEL_ASIDE, SIZE } = useFormContext({ labelWidth, labelAside, size });\n  const [isOpenDropdown, setIsOpenDropdown] = useState(false);\n  const baseInputRef = useStyles(isOpenDropdown);\n\n  const {\n    foundItems,\n    handleSearch,\n    clearSearch,\n    searchRef,\n    clearAndFocusSearch\n  } = useSearch(items);\n\n  const handleItemChange = useCallback((values: string[]) => {\n    if (enableSearch) {\n      clearAndFocusSearch();\n    } else {\n      /** Передать фокус, чтобы работал обработчик backspace */\n      baseInputRef.current?.focus();\n    }\n\n    onChange(values, fieldName);\n  }, [baseInputRef, clearAndFocusSearch, enableSearch, fieldName, onChange]);\n\n  const {\n    activeLabels,\n    toggleActiveValue,\n    getMarks,\n    handleDeleteLastItem\n  } = useMultiselect({\n    items,\n    activeValue,\n    onChangeActiveValue: handleItemChange,\n    markSize: size\n  });\n\n  /** Обработчик нажатия внутри элемента ввода\n   * Используется, чтобы не закрывать выпадающий список при некоторых условиях\n   */\n  const handleToggleInputDropdown: React.MouseEventHandler = useCallback((event): void => {\n    const el = event.target as HTMLElement;\n\n    /** Не обрабатывать, если нажали на строку поиска */\n    if (el.tagName === 'INPUT') {\n      return;\n    }\n\n    /** Не обрабатывать, если нажали на метку */\n    if (el.className.includes('mark')) {\n      return;\n    }\n\n    /** Не обрабатывать, если нажали на крестик в метке */\n    if (el.tagName === 'BUTTON') {\n      return;\n    }\n\n    setIsOpenDropdown(state => !state);\n    clearSearch();\n  }, [clearSearch]);\n\n  /** Обработчик нажатия вне компонента */\n  const handleClickOutside = useCallback((): void => {\n    setIsOpenDropdown(false);\n    clearSearch();\n  }, [clearSearch]);\n\n  /** Иконка компонента */\n  const inputIcon = useMemo(\n    () => {\n      const handleToggleDropdown = (): void => {\n        setIsOpenDropdown(state => !state);\n        clearSearch();\n      };\n\n      /** Показывать иконку поиска? */\n      const showSearchIcon = enableSearch && isOpenDropdown;\n\n      const icon = showSearchIcon\n        ? <span />\n        : <IconChevronDown dataTestId={ DATA_TEST_ID.chevronDownIcon } />;\n\n      return [{ icon, onClick: handleToggleDropdown }];\n    },\n    [isOpenDropdown, enableSearch, clearSearch]\n  );\n\n  /** Заголовок/название, отображается над строкой компонента */\n  const renderedLabel = label\n    ? (\n      // eslint-disable-next-line jsx-a11y/click-events-have-key-events,jsx-a11y/no-static-element-interactions\n      <div onClick={ handleToggleInputDropdown }>\n        <InputLabel\n          size={ SIZE }\n          htmlFor={ id }\n          text={ label }\n          color={ getLabelColor(disabled) }\n        />\n      </div>\n    )\n    : null;\n\n  useEffect(() => {\n    if (enableSearch && isOpenDropdown) {\n      clearAndFocusSearch();\n    }\n  }, [isOpenDropdown, enableSearch, clearAndFocusSearch]);\n\n  return (\n    <BaseSelect\n      items={ foundItems }\n      activeValue={ activeValue }\n      size={ SIZE }\n      labelAside={ LABEL_ASIDE }\n      isOpenDropdown={ isOpenDropdown }\n      disabled={ disabled }\n      label={ renderedLabel }\n      onItemClick={ toggleActiveValue }\n      onCloseDropdown={ handleClickOutside }\n      dataTestId={ dataTestId }\n      labelWidth={ LABEL_WIDTH }\n    >\n      <BaseInput\n        id={ id }\n        inputElement=\"div\"\n        autoFocus\n        inputRef={ baseInputRef }\n        icons={ inputIcon }\n        iconsStyles={ iconsStyles }\n        size={ SIZE }\n        disabled={ disabled }\n        styles={ inputStyles }\n        wrapperStyles={ wrapperStyles }\n        onClick={ handleToggleInputDropdown }\n        onKeyDown={ handleDeleteLastItem }\n        dataTestId={ `${ dataTestId }_input` }\n      >\n        <Label\n          placeholder={ enableSearch ? undefined : '—' }\n          isOpenDropdown={ isOpenDropdown }\n          activeValue={ activeValue }\n          text={ activeLabels }\n          disabled={ disabled }\n        />\n        { isOpenDropdown && (\n          <>\n            { getMarks() }\n            { enableSearch && (\n              <div className={ inputStyles.search_input }>\n                <input\n                  ref={ searchRef }\n                  onChange={ (ev): void => handleSearch(ev.target.value) }\n                />\n                <span className={ cd('search_icon', { [`${ size }`]: true }) }>\n                  <IconSearch dataTestId={ DATA_TEST_ID.searchIcon } />\n                </span>\n              </div>\n            ) }\n          </>\n        ) }\n      </BaseInput>\n    </BaseSelect>\n  );\n}\n"],"names":["cd","cssDecorator","inputStyles","wrapperStyles","DEFAULT_PROPS","DATA_TEST_ID","searchIcon","chevronDownIcon","Multiselect","_a","id","items","activeValue","labelAside","disabled","label","_c","enableSearch","_d","size","_e","onChange","_f","dataTestId","labelWidth","fieldName","_g","useFormContext","LABEL_WIDTH","LABEL_ASIDE","SIZE","_h","useState","isOpenDropdown","setIsOpenDropdown","baseInputRef","useStyles","_j","useSearch","foundItems","handleSearch","clearSearch","searchRef","clearAndFocusSearch","handleItemChange","useCallback","values","current","focus","_k","useMultiselect","onChangeActiveValue","markSize","activeLabels","toggleActiveValue","getMarks","handleDeleteLastItem","handleToggleInputDropdown","event","el","target","tagName","className","includes","state","handleClickOutside","inputIcon","useMemo","icon","React","IconChevronDown","onClick","renderedLabel","InputLabel","htmlFor","text","color","getLabelColor","useEffect","BaseSelect","onItemClick","onCloseDropdown","BaseInput","inputElement","autoFocus","inputRef","icons","iconsStyles","styles","onKeyDown","Label","placeholder","undefined","search_input","ref","ev","value","_b","IconSearch"],"mappings":"m1BAyBA,IAAMA,EAAKC,EAAaC,GAElBC,EAAgB,GAEhBC,EACE,UADFA,EAEQ,iBAFRA,GAGU,EAIHC,EAAe,CAC1BC,WAAY,yBACZC,gBAAiB,wCAIHC,EAAYC,SAC1BC,OACAC,UACAC,gBACAC,eACAC,aACAC,UACAC,iBAAAC,aAAeb,IACfc,SAAAC,aAAOf,IACPgB,aAAAC,aAAW,eACXC,eAAAC,aAAanB,IACboB,eACAC,cAEMC,EAAqCC,EAAe,CAAEH,aAAYX,aAAYM,SAA5ES,gBAAaC,gBAAaC,SAC5BC,EAAsCC,GAAS,GAA9CC,OAAgBC,OACjBC,EAAeC,EAAUH,GAEzBI,EAMFC,EAAU3B,GALZ4B,eACAC,iBACAC,gBACAC,eACAC,yBAGIC,GAAmBC,GAAY,SAACC,SAChC7B,EACF0B,eAGAR,EAAaY,wBAASC,QAGxB3B,EAASyB,EAAQrB,KAChB,CAACU,EAAcQ,GAAqB1B,EAAcQ,EAAWJ,IAE1D4B,GAKFC,EAAe,CACjBvC,QACAC,cACAuC,oBAAqBP,GACrBQ,SAAUjC,IARVkC,mBACAC,wBACAC,eACAC,2BAWIC,GAAqDZ,GAAY,SAACa,GACtE,IAAMC,EAAKD,EAAME,OAGE,UAAfD,EAAGE,UAKHF,EAAGG,UAAUC,SAAS,SAKP,WAAfJ,EAAGE,UAIP3B,GAAkB,SAAA8B,GAAS,OAACA,KAC5BvB,QACC,CAACA,IAGEwB,GAAqBpB,GAAY,WACrCX,GAAkB,GAClBO,MACC,CAACA,IAGEyB,GAAYC,GAChB,WAaE,MAAO,CAAC,CAAEC,KANanD,GAAgBgB,EAGnCoC,6BACAA,gBAACC,GAAgB/C,WAAalB,EAAaE,kBAE/BgE,QAZa,WAC3BrC,GAAkB,SAAA8B,GAAS,OAACA,KAC5BvB,SAYJ,CAACR,EAAgBhB,EAAcwB,IAI3B+B,GAAgBzD,EAGlBsD,uBAAKE,QAAUd,IACbY,gBAACI,GACCtD,KAAOW,EACP4C,QAAUhE,EACViE,KAAO5D,EACP6D,MAAQC,EAAc/D,MAI1B,KAQJ,OANAgE,GAAU,WACJ7D,GAAgBgB,GAClBU,OAED,CAACV,EAAgBhB,EAAc0B,KAGhC0B,gBAACU,GACCpE,MAAQ4B,EACR3B,YAAcA,EACdO,KAAOW,EACPjB,WAAagB,EACbI,eAAiBA,EACjBnB,SAAWA,EACXC,MAAQyD,GACRQ,YAAc1B,GACd2B,gBAAkBhB,GAClB1C,WAAaA,EACbC,WAAaI,GAEbyC,gBAACa,GACCxE,GAAKA,EACLyE,aAAa,MACbC,aACAC,SAAWlD,EACXmD,MAAQpB,GACRqB,YAAcA,EACdpE,KAAOW,EACPhB,SAAWA,EACX0E,OAAStF,EACTC,cAAgBA,EAChBoE,QAAUd,GACVgC,UAAYjC,GACZjC,WAAiBA,YAEjB8C,gBAACqB,GACCC,YAAc1E,OAAe2E,EAAY,IACzC3D,eAAiBA,EACjBrB,YAAcA,EACd+D,KAAOtB,GACPvC,SAAWA,IAEXmB,GACAoC,gCACId,KACAtC,GACAoD,uBAAKP,UAAY5D,EAAY2F,cAC3BxB,yBACEyB,IAAMpD,GACNrB,SAAW,SAAC0E,GAAa,OAAAvD,EAAauD,EAAGnC,OAAOoC,UAElD3B,wBAAMP,UAAY9D,EAAG,oBAAiBiG,EAAC,GAAI9E,IAAU,OACnDkD,gBAAC6B,GAAW3E,WAAalB,EAAaC,iBASxD"}