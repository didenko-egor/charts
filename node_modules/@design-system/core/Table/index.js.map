{"version":3,"file":"index.js","sources":["../../src/Table/index.tsx"],"sourcesContent":["import React, {\n  ReactElement,\n  ReactNode,\n  RefObject,\n  SyntheticEvent,\n  createRef,\n  useEffect,\n  useMemo,\n  useRef,\n  useState\n} from 'react';\nimport { Text } from 'core/src/typography';\nimport { isSSR } from '@front-toolkit/utils';\nimport cn from 'classnames';\n\nimport { ScrollBox } from '../layouts';\nimport TableContext, { TableContextProps, TableSize } from './TableContext';\nimport { Header } from './components/Header';\nimport { Footer } from './components/Footer';\nimport { Row, RowProps } from './components/Row';\nimport ColGroup from './components/ColGroup';\nimport { Cell } from './components/Cell';\nimport { HeaderCell } from './components/HeaderCell';\nimport { FooterCell } from './components/FooterCell';\nimport { DataCell } from './components/DataCell';\n\nimport styles from './Table.module.scss';\n\nconst isSafari = isSSR\n  ? false\n  : /^((?!chrome|android).)*safari/i.test(navigator.userAgent);\n\nexport interface TableProps {\n  /** Ширина ячеек */\n  columnWidth: string[];\n\n  /** Заголовок таблицы */\n  header: ReactElement<RowProps>;\n\n  /** Размер текста в таблице */\n  size?: TableSize;\n\n  /** Футер таблицы */\n  footer?: ReactElement<RowProps>;\n\n  /** Содержимое таблицы */\n  children?: ReactElement<RowProps>[];\n\n  /** Cursor: pointer у td */\n  interactive?: boolean;\n\n  /** Отключить паддинги слева и справа? */\n  withoutPadding?: boolean;\n\n  /** Отображение элемента загрузки  при получении данных */\n  contentLoader?: JSX.Element | null;\n\n  /** Кастомный вывод для пустой таблицы */\n  emptyText?: string;\n\n  /** Ref для управление скролом */\n  refScrollBoxContainer?: RefObject<HTMLInputElement>;\n\n  /** Таблица имеет свободную высоту (по содержимому) или фиксированную (по умолчанию).\n   * onScroll вызывается только при fixed */\n  tableHeight?: 'fixed' | 'free';\n\n  /** Колбек вызываемый при скролле содержимого. Только при фиксированной высоте */\n  onScroll?: (event: SyntheticEvent) => void;\n}\n\nexport function Table({\n  columnWidth: columns,\n  children,\n  emptyText,\n  refScrollBoxContainer,\n  size = 'default',\n  tableHeight = 'fixed',\n  interactive,\n  withoutPadding,\n  header,\n  contentLoader,\n  onScroll,\n  footer\n}: TableProps): JSX.Element {\n  const refHeader = createRef<HTMLTableElement>();\n  const refPrevHeight = useRef<number>(0);\n  /** Переменная с обзервером следящая за изменением высоты шапки таблицы для подстраивания контента таблицы */\n  const resizeObserver = useRef<ResizeObserver | undefined>();\n\n  const [maxHeightScrollBox, setMaxHeightScrollBox] = useState<number | string>('100%');\n\n  useEffect(() => {\n    if (!isSSR) {\n      resizeObserver.current = new ResizeObserver(entries => {\n        const { contentRect: { height } } = entries[0];\n        const { current: prevHeight } = refPrevHeight;\n\n        if (prevHeight !== height) {\n          setMaxHeightScrollBox(`calc(100% - ${ height }px)`);\n          refPrevHeight.current = height;\n        }\n      });\n\n      if (refHeader.current && resizeObserver.current) {\n        resizeObserver.current.observe(refHeader.current);\n      }\n    }\n\n    return () => {\n      if (!isSSR && resizeObserver.current) {\n        resizeObserver.current.disconnect();\n      }\n    };\n  }, [refHeader, refScrollBoxContainer]);\n\n  const hasData = !!children?.length;\n\n  const columnCount = columns.length;\n\n  const colgroup: JSX.Element = useMemo(\n    () => (\n      <ColGroup\n        colWidths={ columns }\n        columnCount={ columnCount }\n      />\n    ),\n    [columnCount, columns]\n  );\n\n  const emptyNode: ReactNode = useMemo(() => {\n    if (hasData || !emptyText) {\n      return null;\n    }\n\n    return (\n      <Row className={ styles.empty_row }>\n        <Cell key=\"empty-node-col\" colSpan={ columnCount }>\n          <Text color=\"secondary\" inline size={ size }>{ emptyText }</Text>\n        </Cell>\n      </Row>\n    );\n  }, [hasData, emptyText, columnCount, size]);\n\n  const tableContextValue: TableContextProps = useMemo(\n    () => ({\n      size,\n      hasData\n    }),\n    [hasData, size]\n  );\n\n  return (\n    <TableContext.Provider value={ tableContextValue }>\n      <div className={ cn(styles.container, {\n        [styles.safari]: isSafari,\n        [styles.interactive]: interactive,\n        [styles.withoutPadding]: withoutPadding\n      }) }\n      >\n        <Header\n          tableRef={ refHeader }\n          colgroup={ colgroup }\n        >\n          { header }\n        </Header>\n\n        { tableHeight === 'fixed' && (\n          <ScrollBox\n            autoHide\n            maxHeight={ maxHeightScrollBox }\n            ref={ refScrollBoxContainer }\n            onScroll={ onScroll }\n          >\n            <table>\n              { colgroup }\n              <tbody className={ styles.tbody }>\n                { emptyNode }\n                { children }\n              </tbody>\n            </table>\n            { contentLoader }\n          </ScrollBox>\n        ) }\n\n        { tableHeight === 'free' && (\n          <table>\n            { colgroup }\n            <tbody className={ styles.tbody }>\n              { emptyNode }\n              { children }\n            </tbody>\n          </table>\n        ) }\n\n        { footer && (\n        <Footer colgroup={ colgroup }>\n          { footer }\n        </Footer>\n        ) }\n      </div>\n    </TableContext.Provider>\n  );\n}\n\nfunction stopPropagation(event: React.MouseEvent): void {\n  event.stopPropagation();\n}\n\nTable.HeaderCell = HeaderCell;\nTable.FooterCell = FooterCell;\nTable.Row = Row;\nTable.Cell = Cell;\nTable.DataCell = DataCell;\nTable.stopPropagation = stopPropagation;\n"],"names":["isSafari","isSSR","test","navigator","userAgent","Table","_a","columns","children","emptyText","refScrollBoxContainer","_c","size","_d","tableHeight","interactive","withoutPadding","header","contentLoader","onScroll","footer","refHeader","createRef","refPrevHeight","useRef","resizeObserver","_e","useState","maxHeightScrollBox","setMaxHeightScrollBox","useEffect","current","ResizeObserver","entries","height","observe","disconnect","hasData","length","columnCount","colgroup","useMemo","React","ColGroup","colWidths","emptyNode","Row","className","styles","empty_row","Cell","key","colSpan","Text","color","inline","tableContextValue","TableContext","Provider","value","cn","container","_b","safari","Header","tableRef","ScrollBox","autoHide","maxHeight","ref","tbody","Footer","HeaderCell","FooterCell","DataCell","stopPropagation","event"],"mappings":"w0BA4BA,IAAMA,GAAWC,GAEb,iCAAiCC,KAAKC,UAAUC,oBAyCpCC,EAAMC,SACPC,gBACbC,aACAC,cACAC,0BACAC,SAAAC,aAAO,YACPC,gBAAAC,aAAc,UACdC,gBACAC,mBACAC,WACAC,kBACAC,aACAC,WAEMC,EAAYC,IACZC,EAAgBC,EAAe,GAE/BC,EAAiBD,IAEjBE,EAA8CC,EAA0B,QAAvEC,OAAoBC,OAE3BC,GAAU,WAiBR,OAhBK7B,IACHwB,EAAeM,QAAU,IAAIC,gBAAe,SAAAC,GACnB,IAAAC,EAAaD,EAAQ,sBACZV,YAEbW,IACjBL,EAAsB,eAAgBK,SACtCX,EAAcQ,QAAUG,MAIxBb,EAAUU,SAAWN,EAAeM,SACtCN,EAAeM,QAAQI,QAAQd,EAAUU,UAItC,YACA9B,GAASwB,EAAeM,SAC3BN,EAAeM,QAAQK,gBAG1B,CAACf,EAAWX,IAEf,IAAM2B,KAAY7B,eAAAA,EAAU8B,QAEtBC,EAAchC,EAAQ+B,OAEtBE,EAAwBC,GAC5B,WAAM,OACJC,gBAACC,GACCC,UAAYrC,EACZgC,YAAcA,MAGlB,CAACA,EAAahC,IAGVsC,EAAuBJ,GAAQ,WACnC,OAAIJ,IAAY5B,EACP,KAIPiC,gBAACI,GAAIC,UAAYC,EAAOC,WACtBP,gBAACQ,GAAKC,IAAI,iBAAiBC,QAAUb,GACnCG,gBAACW,GAAKC,MAAM,YAAYC,UAAO3C,KAAOA,GAASH,OAIpD,CAAC4B,EAAS5B,EAAW8B,EAAa3B,IAE/B4C,EAAuCf,GAC3C,WAAM,OACJ7B,OACAyB,aAEF,CAACA,EAASzB,IAGZ,OACE8B,gBAACe,EAAaC,UAASC,MAAQH,GAC7Bd,uBAAKK,UAAYa,EAAGZ,EAAOa,gBACzBC,EAACd,EAAOe,QAAS/D,EACjB8D,EAACd,EAAOjC,aAAcA,EACtB+C,EAACd,EAAOhC,gBAAiBA,OAGzB0B,gBAACsB,GACCC,SAAW5C,EACXmB,SAAWA,GAETvB,GAGc,UAAhBH,GACA4B,gBAACwB,GACCC,YACAC,UAAYxC,EACZyC,IAAM3D,EACNS,SAAWA,GAEXuB,6BACIF,EACFE,yBAAOK,UAAYC,EAAOsB,OACtBzB,EACArC,IAGJU,GAIY,SAAhBJ,GACA4B,6BACIF,EACFE,yBAAOK,UAAYC,EAAOsB,OACtBzB,EACArC,IAKNY,GACFsB,gBAAC6B,GAAO/B,SAAWA,GACfpB,IAMZ,CAMAf,EAAMmE,WAAaA,EACnBnE,EAAMoE,WAAaA,EACnBpE,EAAMyC,IAAMA,EACZzC,EAAM6C,KAAOA,EACb7C,EAAMqE,SAAWA,EACjBrE,EAAMsE,gBATN,SAAyBC,GACvBA,EAAMD,iBACR"}