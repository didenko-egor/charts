/// <reference types="react" />
import React from 'react';
import { ReactElement, RefObject, SyntheticEvent } from "react";
import { TableSize } from "./TableContext";
import { RowProps } from "./components/Row";
interface TableProps {
    /** Ширина ячеек */
    columnWidth: string[];
    /** Заголовок таблицы */
    header: ReactElement<RowProps>;
    /** Размер текста в таблице */
    size?: TableSize;
    /** Футер таблицы */
    footer?: ReactElement<RowProps>;
    /** Содержимое таблицы */
    children?: ReactElement<RowProps>[];
    /** Cursor: pointer у td */
    interactive?: boolean;
    /** Отключить паддинги слева и справа? */
    withoutPadding?: boolean;
    /** Отображение элемента загрузки  при получении данных */
    contentLoader?: JSX.Element | null;
    /** Кастомный вывод для пустой таблицы */
    emptyText?: string;
    /** Ref для управление скролом */
    refScrollBoxContainer?: RefObject<HTMLInputElement>;
    /** Таблица имеет свободную высоту (по содержимому) или фиксированную (по умолчанию).
     * onScroll вызывается только при fixed */
    tableHeight?: 'fixed' | 'free';
    /** Колбек вызываемый при скролле содержимого. Только при фиксированной высоте */
    onScroll?: (event: SyntheticEvent) => void;
}
declare function Table({ columnWidth: columns, children, emptyText, refScrollBoxContainer, size, tableHeight, interactive, withoutPadding, header, contentLoader, onScroll, footer }: TableProps): JSX.Element;
declare namespace Table {
    var HeaderCell: typeof import("./components/HeaderCell").HeaderCell;
    var FooterCell: typeof import("./components/FooterCell").FooterCell;
    var Row: typeof import("./components/Row").Row;
    var Cell: typeof import("./components/Cell").Cell;
    var DataCell: typeof import("./components/DataCell").DataCell;
    var stopPropagation: (event: React.MouseEvent<Element, MouseEvent>) => void;
}
export { TableProps, Table };
