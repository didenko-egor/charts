{"version":3,"file":"index.js","sources":["../../../src/Filter/FilterSectionRadio/index.tsx"],"sourcesContent":["import React, { useCallback, useMemo } from 'react';\n\nimport { IconSort } from 'core/src/icons';\n\nimport { RadioButtonGroup } from '../../Radio';\nimport FilterWrapper from '../FilterWrapper';\nimport Divider from './Divider';\nimport {\n  TEXT_LIMIT_WITH_ELLIPSIS\n} from '../constants';\nimport {\n  FilterSectionRadioItem,\n  FilterSectionRadioProps,\n  SortingMode\n} from './filterSectionRadioTypes';\nimport { convertConfigItemToFilter, trimText } from './utils';\n\nimport styles from './styles.scss';\n\nexport default function FilterSectionRadio({\n  config: {\n    title,\n    items\n  },\n  defaultValue,\n  activeItems,\n  isHiddenHeader,\n  zIndex,\n  onChange,\n  disabled = false\n}: FilterSectionRadioProps): JSX.Element {\n  /** Определить значение по умолчанию. Взять из пропса или первое из конфига */\n  const defaultItem = useMemo(\n    () => defaultValue || convertConfigItemToFilter(items[0]),\n    [defaultValue, items]\n  );\n\n  /** Прошлое выбранное значение. Если его нет, выбрано то, что по умолчанию */\n  const prevActiveItem = activeItems[0] || defaultItem;\n\n  const {\n    mode: activeMode,\n    value: activeValue,\n    label: activeLabel\n  } = prevActiveItem;\n\n  /** Список режимов сортировки */\n  const sortModes = useMemo(\n    () => items.find(item => item.value === activeValue)?.modes || [],\n    [activeValue, items]\n  );\n\n  /** Установка значения по умолчанию */\n  const handleClearAll = useCallback(\n    () => {\n      onChange([defaultItem]);\n    },\n    [defaultItem, onChange]\n  );\n\n  /** Обработчик изменения текущего значения */\n  const handleValueChange = useCallback((valueId: string) => {\n    const selectedValue = items.find(item => item.value === valueId);\n    if (!selectedValue) return;\n\n    const newValue = convertConfigItemToFilter(selectedValue);\n\n    onChange([newValue]);\n  }, [items, onChange]);\n\n  /** Обработчик изменения режима сортировки */\n  const handleModeChange = useCallback((mode: string) => {\n    const newValue: FilterSectionRadioItem = {\n      value: prevActiveItem.value,\n      label: prevActiveItem.label,\n      filterId: prevActiveItem.filterId,\n      mode: mode as SortingMode\n    };\n\n    onChange([newValue]);\n  }, [prevActiveItem, onChange]);\n\n  /** Разрешить отображение кнопки \"По умолчанию\" */\n  const allowClearAll = activeValue !== defaultItem.value\n  || activeMode !== defaultItem.mode;\n\n  /** Текст на кнопке фильтра */\n  const filterButtonText = trimText(activeLabel);\n\n  const rotateIcon = activeMode === 'asc' ? 180 : undefined;\n\n  return (\n    <FilterWrapper\n      title={ title }\n      buttonTitle={ filterButtonText }\n      textOnClearButton=\"По умолчанию\"\n      customIcon={ <IconSort rotate={ rotateIcon } dataTestId=\"sorting_filter_icon\" /> }\n      closeOnButtonClick\n      iconLeft\n      allowClearAllAction={ allowClearAll }\n      autoCloseOnClearAll={ false }\n      activeCount={ 0 }\n      onClearAll={ handleClearAll }\n      isHiddenHeader={ isHiddenHeader }\n      zIndex={ zIndex }\n      disabled={ disabled }\n    >\n      <div className={ styles.container }>\n        <RadioButtonGroup\n          name={ String(defaultItem.filterId || '') }\n          items={ items }\n          activeValue={ activeValue }\n          onChange={ handleValueChange }\n          textLimitWithEllipsis={ TEXT_LIMIT_WITH_ELLIPSIS }\n          size=\"small\"\n          dataTestId=\"sorting_filter_content\"\n          disabled={ disabled }\n        />\n        <Divider />\n        <RadioButtonGroup\n          name=\"sort-order\"\n          items={ sortModes }\n          activeValue={ activeMode }\n          onChange={ handleModeChange }\n          textLimitWithEllipsis={ TEXT_LIMIT_WITH_ELLIPSIS }\n          size=\"small\"\n          dataTestId=\"sorting_filter_order\"\n          disabled={ disabled }\n        />\n      </div>\n    </FilterWrapper>\n  );\n}\n"],"names":["FilterSectionRadio","_a","_b","title","items","defaultValue","activeItems","isHiddenHeader","zIndex","onChange","_c","disabled","defaultItem","useMemo","convertConfigItemToFilter","prevActiveItem","activeMode","activeValue","activeLabel","sortModes","find","item","value","modes","handleClearAll","useCallback","handleValueChange","valueId","selectedValue","newValue","handleModeChange","mode","label","filterId","allowClearAll","filterButtonText","trimText","rotateIcon","undefined","React","FilterWrapper","buttonTitle","textOnClearButton","customIcon","IconSort","rotate","dataTestId","closeOnButtonClick","iconLeft","allowClearAllAction","autoCloseOnClearAll","activeCount","onClearAll","className","styles","container","RadioButtonGroup","name","String","textLimitWithEllipsis","TEXT_LIMIT_WITH_ELLIPSIS","size","Divider"],"mappings":"gZAmBwBA,EAAmBC,OACzCC,WACEC,UACAC,UAEFC,iBACAC,gBACAC,mBACAC,WACAC,aACAC,aAAAC,gBAGMC,EAAcC,GAClB,WAAM,OAAAR,GAAgBS,EAA0BV,EAAM,MACtD,CAACC,EAAcD,IAIXW,EAAiBT,EAAY,IAAMM,EAGjCI,EAGJD,OAFKE,EAELF,QADKG,EACLH,QAGEI,EAAYN,GAChB,iBAAM,iBAAAT,EAAMgB,MAAK,SAAAC,GAAQ,OAAAA,EAAKC,QAAUL,2BAAcM,QAAS,KAC/D,CAACN,EAAab,IAIVoB,EAAiBC,GACrB,WACEhB,EAAS,CAACG,MAEZ,CAACA,EAAaH,IAIViB,EAAoBD,GAAY,SAACE,GACrC,IAAMC,EAAgBxB,EAAMgB,MAAK,SAAAC,GAAQ,OAAAA,EAAKC,QAAUK,KACxD,GAAKC,EAAL,CAEA,IAAMC,EAAWf,EAA0Bc,GAE3CnB,EAAS,CAACoB,OACT,CAACzB,EAAOK,IAGLqB,EAAmBL,GAAY,SAACM,GACpC,IAAMF,EAAmC,CACvCP,MAAOP,EAAeO,MACtBU,MAAOjB,EAAeiB,MACtBC,SAAUlB,EAAekB,SACzBF,KAAMA,GAGRtB,EAAS,CAACoB,MACT,CAACd,EAAgBN,IAGdyB,EAAgBjB,IAAgBL,EAAYU,OAC/CN,IAAeJ,EAAYmB,KAGxBI,EAAmBC,EAASlB,GAE5BmB,EAA4B,QAAfrB,EAAuB,SAAMsB,EAEhD,OACEC,gBAACC,GACCrC,MAAQA,EACRsC,YAAcN,EACdO,kBAAkB,eAClBC,WAAaJ,gBAACK,GAASC,OAASR,EAAaS,WAAW,wBACxDC,sBACAC,YACAC,oBAAsBf,EACtBgB,qBAAsB,EACtBC,YAAc,EACdC,WAAa5B,EACbjB,eAAiBA,EACjBC,OAASA,EACTG,SAAWA,GAEX4B,uBAAKc,UAAYC,EAAOC,WACtBhB,gBAACiB,GACCC,KAAOC,OAAO9C,EAAYqB,UAAY,IACtC7B,MAAQA,EACRa,YAAcA,EACdR,SAAWiB,EACXiC,sBAAwBC,EACxBC,KAAK,QACLf,WAAW,yBACXnC,SAAWA,IAEb4B,gBAACuB,QACDvB,gBAACiB,GACCC,KAAK,aACLrD,MAAQe,EACRF,YAAcD,EACdP,SAAWqB,EACX6B,sBAAwBC,EACxBC,KAAK,QACLf,WAAW,uBACXnC,SAAWA,KAKrB"}