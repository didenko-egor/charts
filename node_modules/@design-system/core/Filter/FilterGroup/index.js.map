{"version":3,"file":"index.js","sources":["../../../src/Filter/FilterGroup/index.tsx"],"sourcesContent":["import React, {\n  useCallback,\n  useEffect,\n  useMemo,\n  useState\n} from 'react';\n\nimport FilterCheckbox from '../FilterCheckbox';\nimport DateRange from '../DateRange';\nimport FilterDummy from '../FilterDummy';\nimport FilterRadio from '../FilterRadio';\nimport FilterWrapper from '../FilterWrapper';\nimport {\n  FilterItem,\n  FilterConfig,\n  FilterProps,\n  FilterWrapperProps,\n  FilterDateRangeProps,\n  FilterBaseProps,\n  FilterCheckboxProps\n} from '../types';\nimport {\n  isListIncludesItem,\n  getCurrentActiveItems,\n  getFilterId\n} from '../utils';\nimport { GroupItemContext } from './GroupItemContext';\n\nconst FILTER_COMPONENTS = {\n  checkbox: FilterCheckbox,\n  radio: FilterRadio,\n  'date-range': DateRange\n};\n\nconst renderFilterElement = (\n  config: FilterConfig,\n  restProps: Omit<FilterProps, 'config'>\n): React.ReactNode => {\n  switch (config.type) {\n    case 'checkbox': {\n      return React.createElement(\n        FILTER_COMPONENTS.checkbox,\n        { config, ...restProps } as FilterCheckboxProps\n      );\n    }\n    case 'radio': {\n      return React.createElement(\n        FILTER_COMPONENTS.radio,\n        { config, ...restProps } as FilterBaseProps\n      );\n    }\n    case 'date-range': {\n      return React.createElement(\n        FILTER_COMPONENTS['date-range'],\n        { config, ...restProps } as FilterDateRangeProps\n      );\n    }\n\n    default: return null;\n  }\n};\n\nexport type FilterGroupProps = Pick<FilterWrapperProps,\n'isHiddenHeader' |\n'zIndex'\n> & {\n  /** Заголовок группы фильтров */\n  title: string;\n\n  /** Массив выбранных элементов всех фильтров в группе */\n  activeItems: FilterItem[];\n\n  /** Массив конфигураций фильтров, входящих в группу */\n  configs: FilterConfig[];\n\n  /** Колбэк при изменении выбранных элементов всех фильтров группы\n   * (в качестве аргумента принимает обновленный массив выбранных элементов) */\n  onChange: (changedActiveItems: FilterItem[]) => void;\n\n  /** Опциональный колбэк в дополнение к `onChange`, при изменении выбранных элементов,\n   * (в качестве аргументов принимает массив выбранных элементов только текущего фильтра группы,\n   * открытого в момент срабатывания колбэка, и его `filterId`) */\n  onChangeByFilter?: (currentFilterActiveItems: FilterItem[], currentFilterId: number | string | null) => void;\n};\n\nconst FilterGroup: React.FC<FilterGroupProps> = ({\n  title: groupTitle,\n  configs,\n  activeItems,\n  isHiddenHeader: isHiddenGroupHeader,\n  zIndex,\n  onChange,\n  onChangeByFilter\n}) => {\n  const [isGroupOpen, setIsGroupOpen] = useState(false);\n  const [currentFilterId, setCurrentFilterId] = useState<string | number | null>(null);\n\n  useEffect(() => {\n    /**  сбрасываем id открытого фильтра, если выпадающее окно закрылось */\n    if (!isGroupOpen) {\n      setCurrentFilterId(null);\n    }\n  }, [isGroupOpen]);\n\n  const clearFilterGroup = useCallback(() => {\n    if (onChange) {\n      onChange([]);\n    }\n\n    setIsGroupOpen(false);\n  }, [onChange]);\n\n  const handleChange = useCallback((\n    changedActiveCurrentItems: FilterItem[],\n    currentItems: FilterItem[],\n    filterId: string | number\n  ): void => {\n    const notActiveCurrentItems = activeItems\n      .filter(activeItem => !isListIncludesItem(activeItem, currentItems));\n\n    onChange(changedActiveCurrentItems.length\n      ? [...notActiveCurrentItems, ...changedActiveCurrentItems]\n      : notActiveCurrentItems);\n\n    /** Если необходим массив активных элементов только по текущему фильтру группы  */\n    if (onChangeByFilter) {\n      onChangeByFilter(changedActiveCurrentItems, filterId);\n    }\n  }, [activeItems, onChange, onChangeByFilter]);\n\n  const filters = useMemo(\n    () => configs.map(config => {\n      const filterId = getFilterId(config.items);\n      const activeCurrentItems = filterId ? getCurrentActiveItems(activeItems, config.items) : [];\n\n      // eslint-disable-next-line react/jsx-no-constructed-context-values\n      const groupItemParams = {\n        isCurrentFilter: currentFilterId === filterId,\n        onForwardButtonClick: () => setCurrentFilterId(filterId),\n        onBackBtnClick: () => setCurrentFilterId(null),\n        activeCurrentItems\n      };\n\n      const restProps = {\n        activeItems: activeCurrentItems,\n        /**  всегда блокируется скрытие шапки фильтра в группе фильтров */\n        isHiddenHeader: false,\n        isOpen: currentFilterId === filterId,\n        zIndex,\n        onChange: (changedActiveItems: FilterItem[]) => handleChange(changedActiveItems, config.items, filterId)\n      };\n\n      return (\n        <React.Fragment key={ filterId }>\n          <GroupItemContext.Provider value={ groupItemParams }>\n            { renderFilterElement(config, restProps) }\n          </GroupItemContext.Provider>\n        </React.Fragment>\n      );\n    }),\n    [\n      activeItems,\n      configs,\n      handleChange,\n      currentFilterId,\n      zIndex\n    ]\n  );\n\n  return (\n    <FilterWrapper\n      title={ groupTitle }\n      isOpen={ isGroupOpen }\n      activeCount={ activeItems.length }\n      onOpenStatusChange={ setIsGroupOpen }\n      isHiddenHeader={ isHiddenGroupHeader || !!currentFilterId }\n      onClearAll={ clearFilterGroup }\n      zIndex={ zIndex }\n      groupWrapperParams={ { currentFilterId } }\n    >\n      { /** оборачивание во фрагмент необходимо, чтобы был один элемент children\n       * и корректно срабатывала логика скрола в FilterDropDown */ }\n      { /* eslint-disable-next-line react/jsx-no-useless-fragment */ }\n      <>{ filters.length ? filters : <FilterDummy>Загрузка...</FilterDummy> }</>\n    </FilterWrapper>\n  );\n};\n\nexport default FilterGroup;\n"],"names":["FILTER_COMPONENTS","checkbox","FilterCheckbox","radio","FilterRadio","DateRange","FilterGroup","_a","groupTitle","configs","activeItems","isHiddenGroupHeader","zIndex","onChange","onChangeByFilter","_b","useState","isGroupOpen","setIsGroupOpen","_c","currentFilterId","setCurrentFilterId","useEffect","clearFilterGroup","useCallback","handleChange","changedActiveCurrentItems","currentItems","filterId","notActiveCurrentItems","filter","activeItem","isListIncludesItem","length","filters","useMemo","map","config","getFilterId","items","activeCurrentItems","getCurrentActiveItems","groupItemParams","isCurrentFilter","onForwardButtonClick","onBackBtnClick","restProps","isHiddenHeader","isOpen","changedActiveItems","React","Fragment","key","GroupItemContext","Provider","value","type","createElement","__assign","renderFilterElement","FilterWrapper","title","activeCount","onOpenStatusChange","onClearAll","groupWrapperParams","FilterDummy"],"mappings":"ieA4BA,IAAMA,EAAoB,CACxBC,SAAUC,EACVC,MAAOC,EACP,aAAcC,GAsDVC,EAA0C,SAACC,OACxCC,UACPC,YACAC,gBACgBC,mBAChBC,WACAC,aACAC,qBAEMC,EAAgCC,GAAS,GAAxCC,OAAaC,OACdC,EAAwCH,EAAiC,MAAxEI,OAAiBC,OAExBC,GAAU,WAEHL,GACHI,EAAmB,QAEpB,CAACJ,IAEJ,IAAMM,EAAmBC,GAAY,WAC/BX,GACFA,EAAS,IAGXK,GAAe,KACd,CAACL,IAEEY,EAAeD,GAAY,SAC/BE,EACAC,EACAC,GAEA,IAAMC,EAAwBnB,EAC3BoB,QAAO,SAAAC,GAAc,OAACC,EAAmBD,EAAYJ,MAExDd,EAASa,EAA0BO,cAC3BJ,MAA0BH,MAC9BG,GAGAf,GACFA,EAAiBY,EAA2BE,KAE7C,CAAClB,EAAaG,EAAUC,IAErBoB,EAAUC,GACd,WAAM,OAAA1B,EAAQ2B,KAAI,SAAAC,GAChB,IAAMT,EAAWU,EAAYD,EAAOE,OAC9BC,EAAqBZ,EAAWa,EAAsB/B,EAAa2B,EAAOE,OAAS,GAGnFG,EAAkB,CACtBC,gBAAiBvB,IAAoBQ,EACrCgB,qBAAsB,WAAM,OAAAvB,EAAmBO,IAC/CiB,eAAgB,WAAM,OAAAxB,EAAmB,OACzCmB,sBAGIM,EAAY,CAChBpC,YAAa8B,EAEbO,gBAAgB,EAChBC,OAAQ5B,IAAoBQ,EAC5BhB,SACAC,SAAU,SAACoC,GAAqC,OAAAxB,EAAawB,EAAoBZ,EAAOE,MAAOX,KAGjG,OACEsB,gBAACA,EAAMC,UAASC,IAAMxB,GACpBsB,gBAACG,EAAiBC,UAASC,MAAQb,GAxHjB,SAC1BL,EACAS,GAEA,OAAQT,EAAOmB,MACb,IAAK,WACH,OAAON,EAAMO,cACXzD,EAAkBC,SAClByD,GAAErB,UAAWS,IAGjB,IAAK,QACH,OAAOI,EAAMO,cACXzD,EAAkBG,MAClBuD,GAAErB,UAAWS,IAGjB,IAAK,aACH,OAAOI,EAAMO,cACXzD,EAAkB,cAClB0D,GAAErB,UAAWS,IAIjB,QAAS,OAAO,KAEpB,CA+Fca,CAAoBtB,EAAQS,UAKtC,CACEpC,EACAD,EACAgB,EACAL,EACAR,IAIJ,OACEsC,gBAACU,GACCC,MAAQrD,EACRwC,OAAS/B,EACT6C,YAAcpD,EAAYuB,OAC1B8B,mBAAqB7C,EACrB6B,eAAiBpC,KAAyBS,EAC1C4C,WAAazC,EACbX,OAASA,EACTqD,mBAAqB,CAAE7C,oBAKvB8B,gCAAIhB,EAAQD,OAASC,EAAUgB,gBAACgB,uBAGtC"}