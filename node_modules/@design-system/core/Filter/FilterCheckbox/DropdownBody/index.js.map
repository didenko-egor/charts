{"version":3,"file":"index.js","sources":["../../../../src/Filter/FilterCheckbox/DropdownBody/index.tsx"],"sourcesContent":["import React from 'react';\n\nimport Placeholder from './Placeholder';\nimport Divider from './Divider';\nimport CheckboxList from '../CheckboxList';\nimport { FilterCheckboxItem, FilterOnChange } from '../../types';\n\ninterface DropdownBodyProps {\n  /** Массив чекбоксов */\n  items: FilterCheckboxItem[];\n\n  /** Массив выбранных чекбоксов */\n  activeItems: FilterCheckboxItem[];\n\n  /** Массив выбранных чекбоксов, отображаемых в шапке фильтра */\n  hoistedActiveItems: FilterCheckboxItem[];\n\n  /** Статус загрузки данных */\n  isLoading?: boolean;\n\n  /** Статус повторной загрузки данных */\n  isRetryLoading?: boolean;\n\n  /** Статус пустой поисковой выдачи */\n  isNotFound?: boolean;\n\n  /** Статус ошибки при поиске */\n  isError?: boolean;\n\n  /** Колбэк при изменении выбранных элементов\n   * (в качестве аргумента принимает обновленный массив выбранных элементов) */\n  onChange: FilterOnChange;\n\n  /** RefCallback для отрисовки триггера, вызывающего событие доскролла до конца списка */\n  loadMoreTriggerElementRefCallback?: React.RefCallback<HTMLDivElement>;\n}\n\n/** Тело дропдауна фильтра с асинхронным поиском.\n* Приоритет: Ошибка > Не найдено > [Элементы] > Повторная загрузка > Загрузка\n* */\nconst DropdownBody: React.FC<DropdownBodyProps> = ({\n  items,\n  activeItems,\n  hoistedActiveItems,\n  isError,\n  isNotFound,\n  isRetryLoading,\n  isLoading,\n  onChange,\n  loadMoreTriggerElementRefCallback\n}) => {\n  const showDivider = !!items.length && !!hoistedActiveItems.length && !items[0]?.itemGroup;\n\n  if (isError || isNotFound) {\n    return <Placeholder status={ isError ? 'error' : 'notFound' } />;\n  }\n\n  return (\n    <>\n      <CheckboxList\n        items={ hoistedActiveItems }\n        activeItems={ activeItems }\n        onChange={ onChange }\n      />\n      { showDivider && <Divider /> }\n      <CheckboxList\n        items={ items }\n        activeItems={ activeItems }\n        onChange={ onChange }\n        showGroupDivider\n        hoistedActiveItemsExist={ !!hoistedActiveItems.length }\n      />\n      { (isRetryLoading || isLoading)\n        ? <Placeholder topIndent={ !!items.length } status={ isRetryLoading ? 'retry' : 'loading' } />\n        : loadMoreTriggerElementRefCallback && <div ref={ loadMoreTriggerElementRefCallback } /> }\n    </>\n  );\n};\n\nexport default React.memo(DropdownBody);\n"],"names":["React","memo","_a","items","activeItems","hoistedActiveItems","isError","isNotFound","isRetryLoading","isLoading","onChange","loadMoreTriggerElementRefCallback","showDivider","length","itemGroup","Placeholder","status","CheckboxList","Divider","showGroupDivider","hoistedActiveItemsExist","topIndent","ref"],"mappings":"qIAwCA,MAuCeA,EAAMC,MAvC6B,SAACC,SACjDC,UACAC,gBACAC,uBACAC,YACAC,eACAC,mBACAC,cACAC,aACAC,sCAEMC,IAAgBT,EAAMU,UAAYR,EAAmBQ,oBAAWV,EAAM,yBAAIW,WAEhF,OAAIR,GAAWC,EACNP,gBAACe,GAAYC,OAASV,EAAU,QAAU,aAIjDN,gCACEA,gBAACiB,GACCd,MAAQE,EACRD,YAAcA,EACdM,SAAWA,IAEXE,GAAeZ,gBAACkB,QAClBlB,gBAACiB,GACCd,MAAQA,EACRC,YAAcA,EACdM,SAAWA,EACXS,oBACAC,0BAA4Bf,EAAmBQ,SAE9CL,GAAkBC,EACjBT,gBAACe,GAAYM,YAAclB,EAAMU,OAASG,OAASR,EAAiB,QAAU,YAC9EG,GAAqCX,uBAAKsB,IAAMX,IAG1D"}