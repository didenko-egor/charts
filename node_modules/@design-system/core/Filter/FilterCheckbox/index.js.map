{"version":3,"file":"index.js","sources":["../../../src/Filter/FilterCheckbox/index.tsx"],"sourcesContent":["import React, {\n  useCallback,\n  useEffect,\n  useState\n} from 'react';\nimport { cssDecorator } from '@front-toolkit/utils';\nimport { Input } from 'core/src/Input';\n\nimport { IconSearch } from 'core/src/icons';\n\nimport DropdownBody from './DropdownBody';\nimport FilterWrapper from '../FilterWrapper';\nimport { FilterCheckboxItem, FilterCheckboxProps } from '../types';\nimport { isListIncludesItem } from '../utils';\n\nimport styles from './styles.scss';\n\nconst cd = cssDecorator(styles);\n\nconst ICONS = [{ icon: <IconSearch /> }];\n\ntype Items = {\n  /** Массив выбранных (отмеченных) чекбоксов */\n  active: FilterCheckboxItem[];\n\n  /** Массив невыбранных чекбоксов */\n  rest: FilterCheckboxItem[];\n};\n\nconst filterItemsByLabel = (items: FilterCheckboxItem[], text: string): FilterCheckboxItem[] => (\n  items.filter(\n    ({ label }) => label.toLocaleUpperCase().includes(text.toLocaleUpperCase())\n  )\n);\n\nconst FilterCheckbox: React.FC<FilterCheckboxProps> = ({\n  config: {\n    title,\n    items\n  },\n  activeItems,\n  isOpen: isControlledOpen,\n  isHiddenHeader,\n  zIndex,\n  withSearch,\n  onChange,\n  onOpenStatusChange\n}) => {\n  const [searchInputValue, setSearchInputValue] = useState('');\n  const [isOpen, setIsOpen] = useState(isControlledOpen ?? false);\n  const [cachedItems, setCachedItems] = useState<Items>({ active: [], rest: items });\n  const [shownItems, setShownItems] = useState<Items>({ active: [], rest: items });\n\n  /** Кэшируем массивы активных/не активных элементов только в момент открытия/закрытия фильтра\n   * (необходимо для перемещения активных элментов в отдельную группу в верхней части списка) */\n  useEffect(() => {\n    if (!isOpen) {\n      setSearchInputValue('');\n\n      if (activeItems) {\n        setCachedItems({\n          active: activeItems,\n          rest: items.filter(item => !isListIncludesItem(item, activeItems))\n        });\n      }\n    }\n  }, [activeItems, isOpen, items]);\n\n  /** Фильтрация активных и неактивных элементов */\n  useEffect(() => {\n    setShownItems({\n      active: filterItemsByLabel(cachedItems.active, searchInputValue),\n      rest: filterItemsByLabel(cachedItems.rest, searchInputValue)\n    });\n  }, [cachedItems, searchInputValue]);\n\n  const handleOpenStatusChange = useCallback((value: boolean) => {\n    setIsOpen(value);\n\n    if (onOpenStatusChange) {\n      onOpenStatusChange(value);\n    }\n  }, [onOpenStatusChange]);\n\n  const handleClearAll = useCallback(\n    () => {\n      if (onChange) {\n        onChange([]);\n      }\n    },\n    [onChange]\n  );\n\n  return (\n    <FilterWrapper\n      title={ title }\n      activeCount={ activeItems.length }\n      isOpen={ isControlledOpen }\n      isHiddenHeader={ isHiddenHeader }\n      zIndex={ zIndex }\n      onOpenStatusChange={ handleOpenStatusChange }\n      onClearAll={ handleClearAll }\n    >\n      { withSearch && (\n      <div className={ styles.input }>\n        <Input\n          dataTestId=\"filter_input_id\"\n          size=\"small\"\n          placeholder=\"Поиск\"\n          icons={ ICONS }\n          value={ searchInputValue }\n          onChange={ setSearchInputValue }\n          iconsLeft\n        />\n      </div>\n      ) }\n      <div className={ cd('container', { no_top_indent: withSearch }) }>\n        <DropdownBody\n          hoistedActiveItems={ shownItems.active }\n          activeItems={ activeItems }\n          items={ shownItems.rest }\n          onChange={ onChange }\n        />\n      </div>\n    </FilterWrapper>\n  );\n};\n\nexport default FilterCheckbox;\n"],"names":["cd","cssDecorator","styles","ICONS","icon","React","IconSearch","filterItemsByLabel","items","text","filter","_a","toLocaleUpperCase","includes","FilterCheckbox","_b","title","activeItems","isControlledOpen","isHiddenHeader","zIndex","withSearch","onChange","onOpenStatusChange","_c","useState","searchInputValue","setSearchInputValue","_d","isOpen","setIsOpen","_e","active","rest","cachedItems","setCachedItems","_f","shownItems","setShownItems","useEffect","item","isListIncludesItem","handleOpenStatusChange","useCallback","value","handleClearAll","FilterWrapper","activeCount","length","onClearAll","className","input","Input","dataTestId","size","placeholder","icons","iconsLeft","no_top_indent","DropdownBody","hoistedActiveItems"],"mappings":"wXAiBA,IAAMA,EAAKC,EAAaC,GAElBC,EAAQ,CAAC,CAAEC,KAAMC,gBAACC,UAUlBC,EAAqB,SAACC,EAA6BC,GAAuC,OAC9FD,EAAME,QACJ,SAACC,GAAc,eAAMC,oBAAoBC,SAASJ,EAAKG,oBAAxC,KAIbE,EAAgD,SAACH,OACrDI,WACEC,UACAR,UAEFS,gBACQC,WACRC,mBACAC,WACAC,eACAC,aACAC,uBAEMC,EAA0CC,EAAS,IAAlDC,OAAkBC,OACnBC,EAAsBH,EAASP,SAAAA,GAA9BW,OAAQC,OACTC,EAAgCN,EAAgB,CAAEO,OAAQ,GAAIC,KAAMzB,IAAnE0B,OAAaC,OACdC,EAA8BX,EAAgB,CAAEO,OAAQ,GAAIC,KAAMzB,IAAjE6B,OAAYC,OAInBC,GAAU,WACHV,IACHF,EAAoB,IAEhBV,GACFkB,EAAe,CACbH,OAAQf,EACRgB,KAAMzB,EAAME,QAAO,SAAA8B,GAAQ,OAACC,EAAmBD,EAAMvB,WAI1D,CAACA,EAAaY,EAAQrB,IAGzB+B,GAAU,WACRD,EAAc,CACZN,OAAQzB,EAAmB2B,EAAYF,OAAQN,GAC/CO,KAAM1B,EAAmB2B,EAAYD,KAAMP,OAE5C,CAACQ,EAAaR,IAEjB,IAAMgB,EAAyBC,GAAY,SAACC,GAC1Cd,EAAUc,GAENrB,GACFA,EAAmBqB,KAEpB,CAACrB,IAEEsB,EAAiBF,GACrB,WACMrB,GACFA,EAAS,MAGb,CAACA,IAGH,OACEjB,gBAACyC,GACC9B,MAAQA,EACR+B,YAAc9B,EAAY+B,OAC1BnB,OAASX,EACTC,eAAiBA,EACjBC,OAASA,EACTG,mBAAqBmB,EACrBO,WAAaJ,GAEXxB,GACFhB,uBAAK6C,UAAYhD,EAAOiD,OACtB9C,gBAAC+C,GACCC,WAAW,kBACXC,KAAK,QACLC,YAAY,QACZC,MAAQrD,EACRyC,MAAQlB,EACRJ,SAAWK,EACX8B,gBAIJpD,uBAAK6C,UAAYlD,EAAG,YAAa,CAAE0D,cAAerC,KAChDhB,gBAACsD,GACCC,mBAAqBvB,EAAWL,OAChCf,YAAcA,EACdT,MAAQ6B,EAAWJ,KACnBX,SAAWA,KAKrB"}