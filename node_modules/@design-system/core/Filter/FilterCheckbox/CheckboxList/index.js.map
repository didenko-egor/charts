{"version":3,"file":"index.js","sources":["../../../../src/Filter/FilterCheckbox/CheckboxList/index.tsx"],"sourcesContent":["import React, { ReactNode } from 'react';\n\nimport { Checkbox } from 'core/src/Checkbox';\nimport { Tooltip } from 'core/src/Tooltip';\nimport Divider from 'core/src/Filter/FilterCheckbox/DropdownBody/Divider';\n\nimport { FilterCheckboxItem, FilterOnChange } from 'core/src/Filter/types';\n\nimport { TEXT_LIMIT_WITH_ELLIPSIS } from '../../constants';\n\ninterface CheckboxListProps {\n  /** Массив чекбоксов */\n  items: FilterCheckboxItem[];\n\n  /** Массив выбранных чекбоксов */\n  activeItems: FilterCheckboxItem[];\n\n  /** Колбэк при изменении выбранных элементов\n   * (в качестве аргумента принимает обновленный массив выбранных элементов) */\n  onChange: FilterOnChange;\n\n  /** Флаг отображения группировки элементов фильтрации */\n  showGroupDivider?: boolean;\n\n  /** Флаг наличия активных элементов в фильтре */\n  hoistedActiveItemsExist?: boolean;\n}\n\nconst CheckboxList: React.FC<CheckboxListProps> = ({\n  items,\n  activeItems,\n  onChange,\n  showGroupDivider,\n  hoistedActiveItemsExist\n}) => {\n  const changeSelected = (value: boolean, item: FilterCheckboxItem): void => {\n    onChange(\n      value\n        ? [...activeItems, item]\n        : activeItems.filter(activeItem => activeItem.value !== item.value)\n    );\n  };\n\n  /** Функция создания checkbox */\n  const makeCheckbox = (\n    item: FilterCheckboxItem,\n    itemId: string,\n    handleChange: (value: boolean) => void\n  ): ReactNode => (\n    <Checkbox\n      key={ itemId }\n      id={ itemId }\n      label={ item.label }\n      name=\"checkbox\"\n      checked={ activeItems.some(activeItem => activeItem.value === item.value) }\n      onChange={ handleChange }\n      textLimitWithEllipsis={ TEXT_LIMIT_WITH_ELLIPSIS }\n    />\n  );\n\n  /** Если элементов нет, то ничего не возвращаем */\n  if (!items) {\n    return null;\n  }\n\n  let currentGroup = '';\n\n  return (\n    <>\n      { items.map((item, index) => {\n        const itemId = `${ item.value }_${ item?.filterId ?? 'no_filterId' }`;\n        const { itemGroup } = item;\n\n        const handleChangeSelected = (value: boolean): void => {\n          changeSelected(value, item);\n        };\n\n        /** Изменилась ли группа */\n        const isNewGroup = itemGroup ? itemGroup !== currentGroup : currentGroup !== '';\n\n        if (isNewGroup) {\n          currentGroup = itemGroup ?? '';\n        }\n\n        /** Если нужно показывать разделитель, то возвращаем с разделителем */\n        if (showGroupDivider) {\n          return (\n            <React.Fragment key={ `checkbox_fragment_${ itemId }` }>\n              { isNewGroup && (\n                <Divider\n                  key={ `divider_${ itemId }` }\n                  groupName={ itemGroup }\n                  zeroTopPadding={ index === 0 && !hoistedActiveItemsExist }\n                />\n              ) }\n              { makeCheckbox(item, itemId, handleChangeSelected) }\n            </React.Fragment>\n          );\n        }\n\n        /** Если разделитель показывать не нужно и есть группа, то оборачиваем в тултип и возвращаем */\n        if (itemGroup) {\n          return (\n            <Tooltip key={ `tooltip_${ itemId }` } text={ itemGroup } placement=\"right\">\n              { makeCheckbox(item, itemId, handleChangeSelected) }\n            </Tooltip>\n          );\n        }\n\n        /** Просто возвращаем checkbox */\n        return makeCheckbox(item, itemId, handleChangeSelected);\n      }) }\n    </>\n  );\n};\n\nexport default React.memo(CheckboxList);\n"],"names":["React","memo","_a","items","activeItems","onChange","showGroupDivider","hoistedActiveItemsExist","makeCheckbox","item","itemId","handleChange","Checkbox","key","id","label","name","checked","some","activeItem","value","textLimitWithEllipsis","TEXT_LIMIT_WITH_ELLIPSIS","currentGroup","map","index","filterId","itemGroup","handleChangeSelected","filter","changeSelected","isNewGroup","Fragment","Divider","groupName","zeroTopPadding","Tooltip","text","placement"],"mappings":"mRA4BA,MAwFeA,EAAMC,MAxF6B,SAACC,OACjDC,UACAC,gBACAC,aACAC,qBACAC,4BAWMC,EAAe,SACnBC,EACAC,EACAC,GACc,OACdX,gBAACY,GACCC,IAAMH,EACNI,GAAKJ,EACLK,MAAQN,EAAKM,MACbC,KAAK,WACLC,QAAUb,EAAYc,MAAK,SAAAC,GAAc,OAAAA,EAAWC,QAAUX,EAAKW,SACnEf,SAAWM,EACXU,sBAAwBC,KAK5B,IAAKnB,EACH,OAAO,KAGT,IAAIoB,EAAe,GAEnB,OACEvB,gCACIG,EAAMqB,KAAI,SAACf,EAAMgB,SACXf,EAAaD,EAAKW,qBAAWX,eAAAA,EAAMiB,wBAAY,eAC7CC,EAAclB,YAEhBmB,EAAuB,SAACR,IAtCb,SAACA,EAAgBX,GACtCJ,EACEe,SACQhB,OAAaK,OACjBL,EAAYyB,QAAO,SAAAV,GAAc,OAAAA,EAAWC,QAAUX,EAAKW,UAmC3DU,CAAeV,EAAOX,IAIlBsB,EAAaJ,EAAYA,IAAcJ,EAAgC,KAAjBA,EAO5D,OALIQ,IACFR,EAAeI,QAAAA,EAAa,IAI1BrB,EAEAN,gBAACA,EAAMgC,UAASnB,IAAM,qBAAsBH,GACxCqB,GACA/B,gBAACiC,GACCpB,IAAM,WAAYH,EAClBwB,UAAYP,EACZQ,eAA2B,IAAVV,IAAgBlB,IAGnCC,EAAaC,EAAMC,EAAQkB,IAM/BD,EAEA3B,gBAACoC,GAAQvB,IAAM,WAAYH,EAAY2B,KAAOV,EAAYW,UAAU,SAChE9B,EAAaC,EAAMC,EAAQkB,IAM5BpB,EAAaC,EAAMC,EAAQkB,MAI1C"}