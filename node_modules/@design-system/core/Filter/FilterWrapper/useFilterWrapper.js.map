{"version":3,"file":"useFilterWrapper.js","sources":["../../../src/Filter/FilterWrapper/useFilterWrapper.ts"],"sourcesContent":["import {\n  RefObject,\n  useEffect,\n  useRef,\n  useState\n} from 'react';\n\nimport { GroupItemParams, GroupWrapperParams } from '../types';\nimport useControlledOpenStatus from './useControlledOpenStatus';\n\ninterface UseFilterWrapperProps {\n  /** z-index выпадающего окна */\n  zIndex: number;\n\n  /** Количество выбранных элементов фильтра (целое число >= 0) */\n  activeCount: number;\n\n  /** Параметры группы фильтра */\n  groupItemParams: GroupItemParams | null;\n\n  /** Флаг (опциональный), если необходимо управлять состоянием выпадающего окна из родителя) true/false,\n   * выпадающее окно фильтра открыть/закрыть (например в группе фильтров) */\n  isOpen?: boolean;\n\n  /** ref элемента при сролле до которого вызывается колбэк onScrolledToEnd */\n  loadMoreTriggerElement?: HTMLDivElement | null;\n\n  /** Параметры обертки группы фильтров */\n  groupWrapperParams?: GroupWrapperParams;\n\n  /** Колбэк при открытии/закрытии выпадающего окна фильтра */\n  onOpenStatusChange?: (value: boolean) => void;\n\n  /** Колбэк скролле до конца списка элементов */\n  onScrolledToEnd?: VoidFunction;\n}\n\ninterface UseFilterWrapperResult {\n  /** Реф кнопки фильтра */\n  buttonRef: RefObject<HTMLButtonElement>;\n\n  /* Реф выбадающего списка */\n  dropDownRef: RefObject<HTMLDivElement>;\n\n  /** Текущий фильтр открыт? */\n  isCurrentOpen: boolean | null;\n\n  /** Изменить открытость текущего фильтра */\n  handleStatusOpenChange: (value: boolean) => void;\n}\n\nexport default function useFilterWrapper({\n  zIndex,\n  activeCount,\n  groupItemParams,\n  isOpen,\n  loadMoreTriggerElement,\n  groupWrapperParams,\n  onOpenStatusChange,\n  onScrolledToEnd\n}: UseFilterWrapperProps): UseFilterWrapperResult {\n  const [openBtnPosition, setOpenBtnPosition] = useState<{ bottom: string | number; right: string | number }>();\n  const { isCurrentOpen, handleStatusOpenChange } = useControlledOpenStatus({\n    isOpen,\n    onOpenStatusChange,\n    groupItemParams\n  });\n\n  const buttonRef = useRef<HTMLButtonElement>(null);\n  const dropDownRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    /** Передаем css переменные в body с параметрами, полученными из координат кнопки,\n     *  для привязки выпадающего окна фильтра при его открытии\n     * (только если текущий FilterWrapper не(!!!) является одним из фильтров в составе `FilterGroup`) */\n    if (!groupItemParams && isCurrentOpen) {\n      document.body.style.setProperty('--ds-temp-filter-dropdown-top', `${ (+window.scrollY + +(openBtnPosition?.bottom ?? 0)) }px`);\n      document.body.style.setProperty('--ds-temp-filter-btn-bottom', `${ openBtnPosition?.bottom ?? 0 }px`);\n      document.body.style.setProperty('--ds-temp-filter-dropdown-z-index', `${ zIndex }`);\n      document.body.style.setProperty('--ds-temp-filter-dropdown-right', `${ document.body.clientWidth - +(openBtnPosition?.right ?? 0) }px`);\n    }\n\n    /** Если текущий FilterWrapper является оберткой группы и один из фильтров этой группы открыт,\n     * скрываем выпадающее окно этого FilterWrapper  */\n    if (groupWrapperParams?.currentFilterId) {\n      dropDownRef.current?.setAttribute('style', 'display: none;');\n      /** Во всех остальных случаях отображаем:\n       * - текущий FilterWrapper является оберткой группы, все фильтры группы закрыты\n       * - текущий FilterWrapper является элементов группы и открыт\n      */\n    } else {\n      dropDownRef.current?.setAttribute('style', 'opacity: 1;');\n    }\n\n    return undefined;\n  }, [\n    groupItemParams,\n    groupWrapperParams,\n    isCurrentOpen,\n    openBtnPosition,\n    zIndex\n  ]);\n\n  useEffect(() => {\n    if (groupItemParams) {\n      return undefined;\n    }\n\n    /** Очищаем css переменные в body при размонтировании компонента фильтра\n     * (только если текущий FilterWrapper не(!!!) является одним из фильтров в составе `FilterGroup`)  */\n    return () => {\n      [\n        '--ds-temp-filter-dropdown-top',\n        '--ds-temp-filter-btn-bottom',\n        '--ds-temp-filter-dropdown-z-index',\n        '--ds-temp-filter-dropdown-right'\n      ].forEach(cssProperty => document.body.style.setProperty(cssProperty, null));\n    };\n  }, [groupItemParams]);\n\n  useEffect(\n    () => {\n      const beforeDropDownFirstRender = !dropDownRef.current\n        || !(groupItemParams || buttonRef.current);\n\n      if (beforeDropDownFirstRender) {\n        return undefined;\n      }\n\n      const closeDropDown = (event: MouseEvent | UIEvent): void => {\n        /** Исключаем клик на кнопках других фильтров, которые могут быть на странице */\n        const isCurrentOpenButtonClick = typeof (event.target as HTMLButtonElement).closest === 'function'\n          && (event.target as HTMLButtonElement).closest('button') === buttonRef.current;\n\n        return isCurrentOpenButtonClick ? undefined : handleStatusOpenChange(false);\n      };\n\n      const updateDropDownNodeStyle = (): void => {\n        /** Колбэк только для FilterWrapper, не являющейся оберткой одного из фильтров в составе группы\n         * определяем координаты кнопки открытия для привязки выпадающего окна */\n        if (!groupItemParams && isCurrentOpen) {\n          const { bottom, right } = (buttonRef.current\n            ? buttonRef.current.getBoundingClientRect()\n            : { bottom: '', right: '' });\n\n          setOpenBtnPosition({ bottom, right });\n        }\n      };\n\n      updateDropDownNodeStyle();\n\n      document.addEventListener('click', closeDropDown);\n      window.addEventListener('resize', updateDropDownNodeStyle);\n      window.addEventListener('scroll', updateDropDownNodeStyle);\n\n      return (): void => {\n        document.removeEventListener('click', closeDropDown);\n        window.removeEventListener('resize', updateDropDownNodeStyle);\n        window.removeEventListener('scroll', updateDropDownNodeStyle);\n      };\n    },\n    [\n      isCurrentOpen,\n      handleStatusOpenChange,\n      activeCount,\n      zIndex,\n      groupItemParams\n    ]\n  );\n\n  /** Вызов коллбэка onScrolledToEnd при попадании триггерного элемента в область видимости */\n  useEffect(() => {\n    const currentDropDownRef = dropDownRef.current;\n\n    if (loadMoreTriggerElement && currentDropDownRef) {\n      const intersectionObserver = new IntersectionObserver(([{ isIntersecting }]) => {\n        if (isIntersecting && onScrolledToEnd) {\n          onScrolledToEnd();\n        }\n      }, { root: currentDropDownRef });\n\n      intersectionObserver.observe(loadMoreTriggerElement);\n\n      return () => intersectionObserver.disconnect();\n    }\n\n    return undefined;\n  }, [loadMoreTriggerElement, onScrolledToEnd]);\n\n  return {\n    buttonRef,\n    dropDownRef,\n    isCurrentOpen,\n    handleStatusOpenChange\n  };\n}\n"],"names":["useFilterWrapper","_a","zIndex","activeCount","groupItemParams","isOpen","loadMoreTriggerElement","groupWrapperParams","onOpenStatusChange","onScrolledToEnd","_b","useState","openBtnPosition","setOpenBtnPosition","_c","useControlledOpenStatus","isCurrentOpen","handleStatusOpenChange","buttonRef","useRef","dropDownRef","useEffect","document","body","style","setProperty","window","scrollY","bottom","clientWidth","right","currentFilterId","current","setAttribute","forEach","cssProperty","closeDropDown","event","target","closest","undefined","updateDropDownNodeStyle","getBoundingClientRect","addEventListener","removeEventListener","currentDropDownRef","intersectionObserver_1","IntersectionObserver","root","observe","disconnect"],"mappings":"iHAmDwBA,EAAiBC,OACvCC,WACAC,gBACAC,oBACAC,WACAC,2BACAC,uBACAC,uBACAC,oBAEMC,EAAwCC,IAAvCC,OAAiBC,OAClBC,EAA4CC,EAAwB,CACxEV,SACAG,qBACAJ,oBAHMY,kBAAeC,2BAMjBC,EAAYC,EAA0B,MACtCC,EAAcD,EAAuB,MAwH3C,OAtHAE,GAAU,0BAIHjB,GAAmBY,IACtBM,SAASC,KAAKC,MAAMC,YAAY,iCAAuCC,OAAOC,qBAAYf,eAAAA,EAAiBgB,sBAAU,SACrHN,SAASC,KAAKC,MAAMC,YAAY,yCAAmCb,eAAAA,EAAiBgB,sBAAU,SAC9FN,SAASC,KAAKC,MAAMC,YAAY,oCAAqC,GAAIvB,GACzEoB,SAASC,KAAKC,MAAMC,YAAY,kCAAuCH,SAASC,KAAKM,wBAAgBjB,eAAAA,EAAiBkB,qBAAS,WAK7HvB,eAAAA,EAAoBwB,2BACtBX,EAAYY,wBAASC,aAAa,QAAS,4BAM3Cb,EAAYY,wBAASC,aAAa,QAAS,iBAI5C,CACD7B,EACAG,EACAS,EACAJ,EACAV,IAGFmB,GAAU,WACR,IAAIjB,EAMJ,OAAO,WACL,CACE,gCACA,8BACA,oCACA,mCACA8B,SAAQ,SAAAC,GAAe,OAAAb,SAASC,KAAKC,MAAMC,YAAYU,EAAa,YAEvE,CAAC/B,IAEJiB,GACE,WAIE,MAHmCD,EAAYY,WACxC5B,GAAmBc,EAAUc,UAEpC,CAIA,IAAMI,EAAgB,SAACC,GAKrB,MAHwF,mBAA/CA,EAAMC,OAA6BC,SACtEF,EAAMC,OAA6BC,QAAQ,YAAcrB,EAAUc,aAEvCQ,EAAYvB,GAAuB,IAGjEwB,EAA0B,WAG9B,IAAKrC,GAAmBY,EAAe,CAC/B,IAAAf,EAAqBiB,EAAUc,QACjCd,EAAUc,QAAQU,wBAClB,CAAEd,OAAQ,GAAIE,MAAO,IAFjBF,WAAQE,UAIhBjB,EAAmB,CAAEe,SAAQE,YAUjC,OANAW,IAEAnB,SAASqB,iBAAiB,QAASP,GACnCV,OAAOiB,iBAAiB,SAAUF,GAClCf,OAAOiB,iBAAiB,SAAUF,GAE3B,WACLnB,SAASsB,oBAAoB,QAASR,GACtCV,OAAOkB,oBAAoB,SAAUH,GACrCf,OAAOkB,oBAAoB,SAAUH,OAGzC,CACEzB,EACAC,EACAd,EACAD,EACAE,IAKJiB,GAAU,WACR,IAAMwB,EAAqBzB,EAAYY,QAEvC,GAAI1B,GAA0BuC,EAAoB,CAChD,IAAMC,EAAuB,IAAIC,sBAAqB,SAAC9C,wBAC/BQ,GACpBA,MAED,CAAEuC,KAAMH,IAIX,OAFAC,EAAqBG,QAAQ3C,GAEtB,WAAM,OAAAwC,EAAqBI,iBAInC,CAAC5C,EAAwBG,IAErB,CACLS,YACAE,cACAJ,gBACAC,yBAEJ"}