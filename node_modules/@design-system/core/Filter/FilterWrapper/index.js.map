{"version":3,"file":"index.js","sources":["../../../src/Filter/FilterWrapper/index.tsx"],"sourcesContent":["import React, {\n  useCallback,\n  useContext\n} from 'react';\n\nimport FilterDropDown from './FilterDropDown';\nimport FilterHeader from './FilterHeader';\nimport FilterToggleButton from './FilterToggleButton';\nimport { GroupItemContext } from '../FilterGroup/GroupItemContext';\nimport useFilterWrapper from './useFilterWrapper';\nimport { FilterWrapperProps } from '../types';\n\nconst FilterWrapper: React.FC<React.PropsWithChildren<FilterWrapperProps>> = ({\n  title,\n  buttonTitle,\n  customIcon,\n  iconLeft = false,\n  closeOnButtonClick = false,\n  allowClearAllAction = false,\n  autoCloseOnClearAll = true,\n  disabled = false,\n  textOnClearButton,\n  isOpen,\n  zIndex = 2,\n  activeCount,\n  isHiddenHeader,\n  groupWrapperParams,\n  loadMoreTriggerElement,\n  onScrolledToEnd,\n  onClearAll,\n  onOpenStatusChange,\n  dataTestOpenBtnId,\n  children\n}) => {\n  const groupItemParams = useContext(GroupItemContext);\n\n  const {\n    buttonRef,\n    dropDownRef,\n    isCurrentOpen,\n    handleStatusOpenChange\n  } = useFilterWrapper({\n    zIndex,\n    activeCount,\n    groupItemParams,\n    isOpen,\n    loadMoreTriggerElement,\n    groupWrapperParams,\n    onOpenStatusChange,\n    onScrolledToEnd\n  });\n\n  const toggleDropDown = useCallback(\n    () => {\n      const isDropDownOpen = !(closeOnButtonClick && isCurrentOpen);\n\n      handleStatusOpenChange(isDropDownOpen);\n    },\n    [isCurrentOpen, closeOnButtonClick, handleStatusOpenChange]\n  );\n\n  const handleClearAllBtnClick = useCallback(() => {\n    if (onClearAll) {\n      onClearAll();\n    }\n\n    if (!groupItemParams && autoCloseOnClearAll) {\n      handleStatusOpenChange(false);\n    }\n  }, [\n    autoCloseOnClearAll,\n    groupItemParams,\n    handleStatusOpenChange,\n    onClearAll]);\n\n  const openButton = (\n    <FilterToggleButton\n      dataTestId={ dataTestOpenBtnId }\n      buttonRef={ buttonRef }\n      activeCount={ activeCount }\n      toggleOpen={ toggleDropDown }\n      iconLeft={ iconLeft }\n      customIcon={ customIcon }\n      title={ buttonTitle || title }\n      disabled={ disabled }\n    />\n  );\n\n  /** Этот хедер внутри фильтра */\n  const header = !isHiddenHeader && (\n    <FilterHeader\n      title={ title }\n      activeCount={ activeCount }\n      allowClearAllAction={ allowClearAllAction }\n      onClearAll={ handleClearAllBtnClick }\n      groupParams={ groupItemParams }\n      clearAllButtonText={ textOnClearButton }\n      disabled={ disabled }\n    />\n  );\n\n  /** чтобы не скролился каждый дочерний элемент, в связи с логикой FilterDropDown, оборачиваем в фрагмент */\n  /* eslint-disable-next-line react/jsx-no-useless-fragment */\n  const main = <>{ children }</>;\n\n  /** Если фильтр находится в группе и этот фильтр открыт */\n  if (groupItemParams?.isCurrentFilter && isCurrentOpen) {\n    return (\n      <FilterDropDown ref={ dropDownRef }>\n        { header }\n        { main }\n      </FilterDropDown>\n    );\n  }\n\n  /** Если фильтр находится в группе, но нет открытого фильтра */\n  if (groupItemParams) {\n    return (\n      <>\n        { header }\n        { groupItemParams?.isCurrentFilter ? main : null }\n      </>\n    );\n  }\n\n  return (\n    <div data-test-id=\"filter_wrapper_id\">\n      { openButton }\n      { !!isCurrentOpen && (\n        <FilterDropDown ref={ dropDownRef }>\n          { header }\n          { main }\n        </FilterDropDown>\n      ) }\n    </div>\n  );\n};\n\nexport default FilterWrapper;\n"],"names":["FilterWrapper","_a","title","buttonTitle","customIcon","_b","iconLeft","_c","closeOnButtonClick","_d","allowClearAllAction","_e","autoCloseOnClearAll","_f","disabled","textOnClearButton","isOpen","_g","zIndex","activeCount","isHiddenHeader","groupWrapperParams","loadMoreTriggerElement","onScrolledToEnd","onClearAll","onOpenStatusChange","dataTestOpenBtnId","children","groupItemParams","useContext","GroupItemContext","_h","useFilterWrapper","buttonRef","dropDownRef","isCurrentOpen","handleStatusOpenChange","toggleDropDown","useCallback","handleClearAllBtnClick","openButton","React","FilterToggleButton","dataTestId","toggleOpen","header","FilterHeader","groupParams","clearAllButtonText","main","isCurrentFilter","FilterDropDown","ref"],"mappings":"mSAYMA,EAAuE,SAACC,OAC5EC,UACAC,gBACAC,eACAC,aAAAC,gBACAC,uBAAAC,gBACAC,wBAAAC,gBACAC,wBAAAC,gBACAC,aAAAC,gBACAC,sBACAC,WACAC,WAAAC,aAAS,IACTC,gBACAC,mBACAC,uBACAC,2BACAC,oBACAC,eACAC,uBACAC,sBACAC,aAEMC,EAAkBC,EAAWC,GAE7BC,EAKFC,EAAiB,CACnBd,SACAC,cACAS,kBACAZ,SACAM,yBACAD,qBACAI,qBACAF,oBAZAU,cACAC,gBACAC,kBACAC,2BAYIC,EAAiBC,GACrB,WAGEF,IAFyB5B,GAAsB2B,MAIjD,CAACA,EAAe3B,EAAoB4B,IAGhCG,EAAyBD,GAAY,WACrCd,GACFA,KAGGI,GAAmBhB,GACtBwB,GAAuB,KAExB,CACDxB,EACAgB,EACAQ,EACAZ,IAEIgB,EACJC,gBAACC,GACCC,WAAajB,EACbO,UAAYA,EACZd,YAAcA,EACdyB,WAAaP,EACb/B,SAAWA,EACXF,WAAaA,EACbF,MAAQC,GAAeD,EACvBY,SAAWA,IAKT+B,GAAUzB,GACdqB,gBAACK,GACC5C,MAAQA,EACRiB,YAAcA,EACdT,oBAAsBA,EACtBc,WAAae,EACbQ,YAAcnB,EACdoB,mBAAqBjC,EACrBD,SAAWA,IAMTmC,EAAOR,gCAAId,GAGjB,OAAIC,eAAAA,EAAiBsB,kBAAmBf,EAEpCM,gBAACU,GAAeC,IAAMlB,GAClBW,EACAI,GAMJrB,EAEAa,gCACII,GACAjB,eAAAA,EAAiBsB,iBAAkBD,EAAO,MAMhDR,sCAAkB,qBACdD,IACEL,GACFM,gBAACU,GAAeC,IAAMlB,GAClBW,EACAI,GAKZ"}