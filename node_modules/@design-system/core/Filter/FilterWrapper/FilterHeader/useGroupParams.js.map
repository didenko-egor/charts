{"version":3,"file":"useGroupParams.js","sources":["../../../../src/Filter/FilterWrapper/FilterHeader/useGroupParams.tsx"],"sourcesContent":["import React, { ReactNode, useMemo } from 'react';\nimport { IconChevronLeft, IconChevronRight } from 'core/src/icons';\nimport { cssDecorator } from '@front-toolkit/utils';\nimport { Text } from 'core/src/typography';\n\nimport styles from './styles.scss';\nimport { GroupItemParams } from '../../types';\n\nconst cd = cssDecorator(styles);\n\ntype UseGroupParamsReturnedValue = {\n  backButton?: ReactNode;\n  forwardButton?: ReactNode;\n  selectedLabels?: ReactNode;\n};\n\nconst useGroupParams = (groupParams?: GroupItemParams | null): UseGroupParamsReturnedValue => useMemo(() => {\n  if (!groupParams) {\n    return {};\n  }\n\n  const {\n    isCurrentFilter,\n    activeCurrentItems,\n    onBackBtnClick,\n    onForwardButtonClick\n  } = groupParams;\n\n  const backBtnNode = (isCurrentFilter && (\n    <button\n      data-test-id=\"filter_header_back_btn_id\"\n      className={ cd('button', { icon: true }) }\n      type=\"button\"\n      onClick={ onBackBtnClick }\n    >\n      <IconChevronLeft />\n    </button>\n  ));\n\n  const forwardBtnNode = !isCurrentFilter && (\n    <button\n      data-test-id=\"filter_header_forward_btn_id\"\n      className={ cd('button', { icon: true }) }\n      type=\"button\"\n      onClick={ onForwardButtonClick }\n    >\n      <IconChevronRight />\n    </button>\n  );\n\n  const selectedLabelsNode = !isCurrentFilter && !!activeCurrentItems?.length && (\n  <div className={ styles.labels }>\n    { activeCurrentItems?.map((item, index, array) => (\n      <Text\n        key={ `${ item.value }_${ item.filterId }` }\n        size=\"small\"\n        color=\"tass\"\n        inline\n      >\n        { `${ item.label }${ index !== array.length - 1 ? ', ' : '' }` }\n      </Text>\n    )) }\n  </div>\n  );\n\n  return {\n    backButton: backBtnNode,\n    forwardButton: forwardBtnNode,\n    selectedLabels: selectedLabelsNode\n  };\n}, [groupParams]);\n\nexport default useGroupParams;\n"],"names":["cd","cssDecorator","styles","useGroupParams","groupParams","useMemo","isCurrentFilter","activeCurrentItems","onBackBtnClick","onForwardButtonClick","backButton","React","className","icon","type","onClick","IconChevronLeft","forwardButton","IconChevronRight","selectedLabels","length","labels","map","item","index","array","Text","key","value","filterId","size","color","inline","label"],"mappings":"mYAQA,IAAMA,EAAKC,EAAaC,GAQlBC,EAAiB,SAACC,GAAsE,OAAAC,GAAQ,WACpG,IAAKD,EACH,MAAO,GAIP,IAAAE,EAIEF,kBAHFG,EAGEH,qBAFFI,EAEEJ,iBADFK,EACEL,uBAuCJ,MAAO,CACLM,WAtCmBJ,GACnBK,yCACe,4BACbC,UAAYZ,EAAG,SAAU,CAAEa,MAAM,IACjCC,KAAK,SACLC,QAAUP,GAEVG,gBAACK,SAgCHC,eA5BsBX,GACtBK,yCACe,+BACbC,UAAYZ,EAAG,SAAU,CAAEa,MAAM,IACjCC,KAAK,SACLC,QAAUN,GAEVE,gBAACO,SAsBHC,gBAlB0Bb,MAAqBC,eAAAA,EAAoBa,SACrET,uBAAKC,UAAYV,EAAOmB,QACpBd,eAAAA,EAAoBe,KAAI,SAACC,EAAMC,EAAOC,GAAU,OAChDd,gBAACe,GACCC,IAAUJ,EAAKK,UAAWL,EAAKM,SAC/BC,KAAK,QACLC,MAAM,OACNC,WAEMT,EAAKU,OAAUT,IAAUC,EAAML,OAAS,EAAI,KAAO,SAWjE,GAAG,CAAChB"}