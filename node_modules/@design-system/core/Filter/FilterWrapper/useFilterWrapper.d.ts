import { RefObject } from 'react';
import { GroupItemParams, GroupWrapperParams } from "../../types-8b6b081c";
interface UseFilterWrapperProps {
    /** z-index выпадающего окна */
    zIndex: number;
    /** Количество выбранных элементов фильтра (целое число >= 0) */
    activeCount: number;
    /** Параметры группы фильтра */
    groupItemParams: GroupItemParams | null;
    /** Флаг (опциональный), если необходимо управлять состоянием выпадающего окна из родителя) true/false,
     * выпадающее окно фильтра открыть/закрыть (например в группе фильтров) */
    isOpen?: boolean;
    /** ref элемента при сролле до которого вызывается колбэк onScrolledToEnd */
    loadMoreTriggerElement?: HTMLDivElement | null;
    /** Параметры обертки группы фильтров */
    groupWrapperParams?: GroupWrapperParams;
    /** Колбэк при открытии/закрытии выпадающего окна фильтра */
    onOpenStatusChange?: (value: boolean) => void;
    /** Колбэк скролле до конца списка элементов */
    onScrolledToEnd?: VoidFunction;
}
interface UseFilterWrapperResult {
    /** Реф кнопки фильтра */
    buttonRef: RefObject<HTMLButtonElement>;
    dropDownRef: RefObject<HTMLDivElement>;
    /** Текущий фильтр открыт? */
    isCurrentOpen: boolean | null;
    /** Изменить открытость текущего фильтра */
    handleStatusOpenChange: (value: boolean) => void;
}
declare function useFilterWrapper({ zIndex, activeCount, groupItemParams, isOpen, loadMoreTriggerElement, groupWrapperParams, onOpenStatusChange, onScrolledToEnd }: UseFilterWrapperProps): UseFilterWrapperResult;
export { useFilterWrapper as default };
