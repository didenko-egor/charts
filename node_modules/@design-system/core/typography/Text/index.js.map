{"version":3,"file":"index.js","sources":["../../../src/typography/Text/index.tsx"],"sourcesContent":["import React from 'react';\nimport { cssDecorator } from '@front-toolkit/utils';\nimport { withInherit } from 'shared/HOCs/withInherit';\nimport type { WithInheritProps } from 'shared/HOCs/withInherit';\nimport {\n  useFontColor,\n  useHighlightColor,\n  useTextDecoration,\n  useFontIndex\n} from 'core/shared/typographyHooks';\nimport useFont from 'core/shared/typographyHooks/useFont';\n\nimport type { TextProps } from './types';\nimport getTextTagName from './utils/getTextTagName';\n\nimport styles from './styles.scss';\n\nconst cd = cssDecorator(styles);\n\nconst Text: React.FC<TextProps> = ({\n  size = 'default',\n  fontWeight = 'regular',\n  color = 'primary',\n  fontIndex,\n  inline,\n  italic,\n  lineThrough,\n  underline,\n  highlightingColor,\n  dataTestId,\n  title,\n  children,\n  isEllipsis\n}) => {\n  const colorClassName = useFontColor(color);\n  const textDecorationClassName = useTextDecoration(lineThrough, underline);\n  const fontIndexClassName = useFontIndex(fontIndex);\n  const fontSize = fontIndex || size === 'inherit' ? 'text' : size;\n  const fontClass = useFont(fontSize, fontWeight);\n  const style = useHighlightColor(highlightingColor);\n  const isInline = Boolean(style?.backgroundColor || inline);\n\n  const textClasses = cd(\n    'text',\n    {\n      ellipsis: isEllipsis,\n      italic,\n      inline: isInline || fontIndex,\n      sub_sup_font: fontIndex\n    },\n    [\n      fontClass,\n      colorClassName,\n      textDecorationClassName,\n      fontIndexClassName\n    ]\n  );\n\n  return React.createElement(\n    getTextTagName(isInline, fontIndex),\n    {\n      'data-test-id': dataTestId,\n      className: textClasses,\n      title,\n      style\n    },\n    children\n  );\n};\n\nconst MemoizedText = React.memo(Text);\n\nconst ComponentToExport: React.FC<TextProps & WithInheritProps> = withInherit(MemoizedText);\n\nexport { ComponentToExport as Text };\n\nexport default ComponentToExport;\n"],"names":["cd","cssDecorator","styles","ComponentToExport","withInherit","React","memo","_a","_b","size","_c","fontWeight","_d","color","fontIndex","inline","italic","lineThrough","underline","highlightingColor","dataTestId","title","children","isEllipsis","colorClassName","useFontColor","textDecorationClassName","useTextDecoration","fontIndexClassName","useFontIndex","fontClass","useFont","style","useHighlightColor","isInline","Boolean","backgroundColor","textClasses","ellipsis","sub_sup_font","createElement","getTextTagName","className"],"mappings":"krBAiBA,IAAMA,EAAKC,EAAaC,GAuDlBC,EAA4DC,EAF7CC,EAAMC,MAnDO,SAACC,OACjCC,SAAAC,aAAO,YACPC,eAAAC,aAAa,YACbC,UAAAC,aAAQ,YACRC,cACAC,WACAC,WACAC,gBACAC,cACAC,sBACAC,eACAC,UACAC,aACAC,eAEMC,EAAiBC,EAAaZ,GAC9Ba,EAA0BC,EAAkBV,EAAaC,GACzDU,EAAqBC,EAAaf,GAElCgB,EAAYC,EADDjB,GAAsB,YAATL,EAAqB,OAASA,EACxBE,GAC9BqB,EAAQC,EAAkBd,GAC1Be,EAAWC,SAAQH,eAAAA,EAAOI,kBAAmBrB,GAE7CsB,EAAcrC,EAClB,OACA,CACEsC,SAAUf,EACVP,SACAD,OAAQmB,GAAYpB,EACpByB,aAAczB,GAEhB,CACEgB,EACAN,EACAE,EACAE,IAIJ,OAAOvB,EAAMmC,cACXC,EAAeP,EAAUpB,GACzB,CACE,eAAgBM,EAChBsB,UAAWL,EACXhB,QACAW,SAEFV,EAEJ"}