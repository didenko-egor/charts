{"version":3,"file":"index.js","sources":["../../../src/typography/Caption/index.tsx"],"sourcesContent":["import React from 'react';\nimport { cssDecorator } from '@front-toolkit/utils';\nimport { withLink, LinkProps } from 'core/shared/linkHOC';\nimport { FontCommon } from 'core/types/common';\nimport {\n  useFontColor,\n  useFontIndex,\n  useHighlightColor,\n  useTextDecoration\n} from 'core/shared/typographyHooks';\nimport { CaptionFontWeight } from 'core/shared/typographyHooks/useFont/types';\nimport useFont from 'core/shared/typographyHooks/useFont';\n\nimport styles from './styles.scss';\n\nconst cd = cssDecorator(styles);\n\nexport interface CaptionProps extends FontCommon, LinkProps {\n  /** Насыщенность шрифта */\n  fontWeight?: CaptionFontWeight;\n}\n\nconst Caption: React.FC<CaptionProps> = ({\n  color = 'primary',\n  fontWeight = 'regular',\n  inline,\n  highlightingColor,\n  fontIndex,\n  lineThrough,\n  underline,\n  dataTestId,\n  children\n}) => {\n  const colorClassName = useFontColor(color);\n  const textDecorationClassName = useTextDecoration(lineThrough, underline);\n  const fontIndexClassName = useFontIndex(fontIndex);\n  const fontClass = useFont('caption', !fontIndex && fontWeight);\n  const style = useHighlightColor(highlightingColor);\n  const isInline = Boolean(style?.backgroundColor || inline || fontIndex);\n  const captionClasses = cd(\n    'caption',\n    { inline: isInline },\n    [\n      fontClass,\n      colorClassName,\n      fontIndexClassName,\n      textDecorationClassName\n    ]\n  );\n  const tagName = fontIndex || (isInline ? 'span' : 'div');\n\n  return React.createElement(\n    tagName,\n    {\n      'data-test-id': dataTestId,\n      className: captionClasses,\n      style\n    },\n    children\n  );\n};\n\nconst MemoizedCaption = React.memo(Caption);\nconst ComponentToExport = withLink(MemoizedCaption);\n\nComponentToExport.displayName = 'Caption';\n\nexport { MemoizedCaption as Caption };\n\nexport default ComponentToExport;\n"],"names":["cd","cssDecorator","styles","MemoizedCaption","React","memo","_a","_b","color","_c","fontWeight","inline","highlightingColor","fontIndex","lineThrough","underline","dataTestId","children","colorClassName","useFontColor","textDecorationClassName","useTextDecoration","fontIndexClassName","useFontIndex","fontClass","useFont","style","useHighlightColor","isInline","Boolean","backgroundColor","captionClasses","tagName","createElement","className","ComponentToExport","withLink","displayName"],"mappings":"2oBAeA,IAAMA,EAAKC,EAAaC,GA+ClBC,EAAkBC,EAAMC,MAxCU,SAACC,OACvCC,UAAAC,aAAQ,YACRC,eAAAC,aAAa,YACbC,WACAC,sBACAC,cACAC,gBACAC,cACAC,eACAC,aAEMC,EAAiBC,EAAaX,GAC9BY,EAA0BC,EAAkBP,EAAaC,GACzDO,EAAqBC,EAAaV,GAClCW,EAAYC,EAAQ,WAAYZ,GAAaH,GAC7CgB,EAAQC,EAAkBf,GAC1BgB,EAAWC,SAAQH,eAAAA,EAAOI,kBAAmBnB,GAAUE,GACvDkB,EAAiB/B,EACrB,UACA,CAAEW,OAAQiB,GACV,CACEJ,EACAN,EACAI,EACAF,IAGEY,EAAUnB,IAAce,EAAW,OAAS,OAElD,OAAOxB,EAAM6B,cACXD,EACA,CACE,eAAgBhB,EAChBkB,UAAWH,EACXL,SAEFT,EAEJ,IAGMkB,EAAoBC,EAASjC,GAEnCgC,EAAkBE,YAAc"}