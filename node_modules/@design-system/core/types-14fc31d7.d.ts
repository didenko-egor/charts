/** Список доступных контролов для форматирования */
import { ReactNode } from 'react';
import { JSONContent } from '@tiptap/react';
import { ControlsType } from "./types-ce7f32a4";
interface TextEditorProps {
    /**
     * Контент в виде html|JSON разметки для форматирования.
     *
     * ⚠️ Важно: При передаче format='json', контент принимается в формате Object
     */
    content: string | JSONContent;
    /** Формат входящих исходящих данных. */
    format: 'html' | 'json';
    /** Колбэк для изменения контента в виде html|JSON разметки для форматирования */
    setContent: (data: string | JSONContent[]) => void;
    /** Список доступных контролов для форматирования */
    controls?: ControlsType;
    /** Режим отображения с рамкой (по дефолту - без) */
    withBorder?: boolean;
    /** Data атрибут */
    dataTestId?: string;
    /** Высота редактора */
    height?: number;
    /** Компонент, который рендерится под контролами */
    children?: ReactNode;
    /** Значение для принудительного обновления контента редактора
     *
     * ⚠️ Важно: в родителе нужно сбрасывать данное значение до undefined песле передачи в редактор,
     *  иначе возникнет бесконечный ререндер. См. пример в доке.
    */
    forceUpdateWithValue?: string;
    /** Флаг disabled */
    disabled?: boolean;
    /** placeholder */
    placeholder?: string;
    /** Колбэк для изменения контента в виде текста для форматирования */
    setTextContent?: (text: string) => void;
}
interface TooltipState {
    show: boolean;
    top: number;
    left: number;
}
type TooltipPosition = Pick<TooltipState, 'top' | 'left'>;
export { TextEditorProps, TooltipState, TooltipPosition };
