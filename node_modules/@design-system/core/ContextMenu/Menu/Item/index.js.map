{"version":3,"file":"index.js","sources":["../../../../src/ContextMenu/Menu/Item/index.tsx"],"sourcesContent":["import React, {\n  useRef,\n  useEffect,\n  memo\n} from 'react';\nimport { createPortal } from 'react-dom';\nimport DropdownListCommand from 'core/src/DropdownListCommand';\n\nimport { ItemProps } from '../../types';\nimport { useContextMenuContext } from '../../ContextMenuProvider';\nimport { getItemIcon } from '../../utils/getItemIcon';\nimport { renderSubmenu } from '../../utils/renderSubmenu';\n\nconst Item = memo<ItemProps>(({\n  id,\n  label,\n  hint,\n  onClick,\n  onMouseDown,\n  Icon,\n  withIcons,\n  size = 'default',\n  withSubmenu,\n  menuId,\n  disabled,\n  children\n}) => {\n  const itemRef = useRef<HTMLLIElement | null>(null);\n  const {\n    setHoveredId,\n    hoveredId,\n    setExpandedMenu,\n    expandedMenu\n  } = useContextMenuContext();\n\n  const handleMouseEnter = (): void => {\n    if (id !== expandedMenu?.parentItemId && menuId === expandedMenu?.menuId) {\n      setExpandedMenu(null);\n    }\n\n    if (id) {\n      setHoveredId(id);\n    }\n  };\n\n  const handleMouseLeave = (): void => {\n    if (hoveredId !== expandedMenu?.parentItemId) {\n      setHoveredId('');\n    }\n  };\n\n  useEffect(() => {\n    let timer: NodeJS.Timeout | undefined;\n\n    if (hoveredId === id && withSubmenu) {\n      timer = setTimeout(setExpandedMenu, 250, { parentItemId: id, menuId });\n    }\n\n    return (): void => {\n      if (timer) clearTimeout(timer);\n    };\n  }, [hoveredId, id, withSubmenu, setExpandedMenu, menuId]);\n\n  const iconItem = getItemIcon({ isSubMenu: Boolean(menuId), withIcons, Icon });\n\n  return (\n    <>\n      <DropdownListCommand\n        ref={ itemRef }\n        label={ label }\n        hint={ hint }\n        onClick={ onClick }\n        onMouseDown={ onMouseDown }\n        Icon={ iconItem }\n        withIcons={ withIcons }\n        size={ size }\n        withSubmenu={ withSubmenu }\n        disabled={ disabled }\n        handleMouseEnter={ handleMouseEnter }\n        handleMouseLeave={ handleMouseLeave }\n        controlledHover={ hoveredId === id || expandedMenu?.parentItemId === id }\n      />\n      { expandedMenu?.parentItemId === id && createPortal(renderSubmenu(itemRef, children), document.body) }\n    </>\n  );\n});\n\nItem.displayName = 'Item';\n\nexport default Item;\n"],"names":["Item","memo","_a","id","label","hint","onClick","onMouseDown","Icon","withIcons","_b","size","withSubmenu","menuId","disabled","children","itemRef","useRef","_c","useContextMenuContext","setHoveredId","hoveredId","setExpandedMenu","expandedMenu","useEffect","timer","setTimeout","parentItemId","clearTimeout","iconItem","getItemIcon","isSubMenu","Boolean","React","DropdownListCommand","ref","handleMouseEnter","handleMouseLeave","controlledHover","createPortal","renderSubmenu","document","body","displayName"],"mappings":"wVAaMA,EAAOC,GAAgB,SAACC,OAC5BC,OACAC,UACAC,SACAC,YACAC,gBACAC,SACAC,cACAC,SAAAC,aAAO,YACPC,gBACAC,WACAC,aACAC,aAEMC,EAAUC,EAA6B,MACvCC,EAKFC,IAJFC,iBACAC,cACAC,oBACAC,iBAmBFC,GAAU,WACR,IAAIC,EAMJ,OAJIJ,IAAclB,GAAMS,IACtBa,EAAQC,WAAWJ,EAAiB,IAAK,CAAEK,aAAcxB,EAAIU,YAGxD,WACDY,GAAOG,aAAaH,MAEzB,CAACJ,EAAWlB,EAAIS,EAAaU,EAAiBT,IAEjD,IAAMgB,EAAWC,EAAY,CAAEC,UAAWC,QAAQnB,GAASJ,YAAWD,SAEtE,OACEyB,gCACEA,gBAACC,GACCC,IAAMnB,EACNZ,MAAQA,EACRC,KAAOA,EACPC,QAAUA,EACVC,YAAcA,EACdC,KAAOqB,EACPpB,UAAYA,EACZE,KAAOA,EACPC,YAAcA,EACdE,SAAWA,EACXsB,iBA3CmB,WACnBjC,KAAOoB,eAAAA,EAAcI,eAAgBd,KAAWU,eAAAA,EAAcV,SAChES,EAAgB,MAGdnB,GACFiB,EAAajB,IAsCXkC,iBAlCmB,WACnBhB,KAAcE,eAAAA,EAAcI,eAC9BP,EAAa,KAiCXkB,gBAAkBjB,IAAclB,IAAMoB,eAAAA,EAAcI,gBAAiBxB,KAErEoB,eAAAA,EAAcI,gBAAiBxB,GAAMoC,EAAaC,EAAcxB,EAASD,GAAW0B,SAASC,MAGrG,IAEA1C,EAAK2C,YAAc"}