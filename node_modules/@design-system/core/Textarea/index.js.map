{"version":3,"file":"index.js","sources":["../../src/Textarea/index.tsx"],"sourcesContent":["import React, {\n  ChangeEvent,\n  useCallback,\n  useContext,\n  useMemo\n} from 'react';\nimport { cssDecorator } from '@front-toolkit/utils';\nimport classNames from 'classnames/bind';\nimport { InputLabel } from 'core/shared';\nimport { MemoizedInputHint } from 'core/shared/InputHint';\nimport { InputWrapper } from 'shared/InputWrapper';\nimport { useFormContext } from 'shared/Form/formContext';\nimport { InputWrapperContext } from 'shared/InputWrapper/InputWrapperContext';\nimport getLabelColor from 'core/utils/getLabelColor';\n\nimport { ScrollBox } from '../layouts';\n\nimport type { TextareaProps } from './types';\n\nimport wrapperStyles from './InputWrapperExtends.scss';\nimport styles from './Textarea.scss';\nimport Counter from './Counter';\n\nconst cd = cssDecorator(styles);\n\nfunction Textarea({\n  // Общие свойства\n  size = 'default',\n  counter,\n  disabled = false,\n  isError,\n  uncontrolled,\n  // свойства подсказки\n  showHint = false,\n  dataTestHintId,\n  hintMessage,\n  pseudo,\n  // InputWrapper\n  withoutDefaultMinWidth,\n  label,\n  labelAside,\n  labelWidth,\n  // textarea\n  stretch = false,\n  maxLength = undefined,\n  value = '',\n  onChange,\n  dataTestId,\n  rows = 5,\n  fieldName,\n  id,\n  ...textareaProps\n}: TextareaProps): JSX.Element {\n  const cn = useMemo(() => classNames.bind(styles), []);\n  const contentRows = counter ? rows - 1 : rows;\n\n  const parentWrapperSize = useContext(InputWrapperContext)?.size ?? size;\n  const { LABEL_WIDTH, LABEL_ASIDE, SIZE } = useFormContext({ labelWidth, labelAside, size: parentWrapperSize });\n\n  const updatedValue = maxLength && maxLength > 0 ? value.slice(0, maxLength) : value;\n  const currentValue = uncontrolled ? undefined : updatedValue;\n\n  const handleOnChange = useCallback((evt: ChangeEvent<HTMLTextAreaElement>): void => {\n    const { value: newValue } = evt.target;\n\n    if (onChange) {\n      onChange(newValue, fieldName);\n    }\n  }, [fieldName, onChange]);\n\n  /**\n   * @description В зависимости от выбранного размера и признака отображения счетчика,\n   *  выбираем высоту (lineHeight шрифта) и смещение (padding), что бы корректно посчитать высоту ScrollBox\n  */\n  const parametersToCalc = useMemo(() => ({\n    default: {\n      lineHeight: 24,\n      offset: counter ? 12 : 24,\n      counterSize: 36\n    },\n    small: {\n      lineHeight: 20,\n      offset: counter ? 8 : 16,\n      counterSize: 28\n    }\n  }), [counter]);\n\n  /**\n   * @description Просчет высоты для фиксации размеров прокручиваемой обрасти у ScrollBox\n   */\n  const blockHeight = useMemo(\n    () => {\n      const currentParams = parametersToCalc[parentWrapperSize];\n      if (stretch) {\n        return counter ? `calc(100% - ${ currentParams.counterSize }px)` : undefined;\n      }\n\n      return contentRows * currentParams.lineHeight + currentParams.offset;\n    },\n    [\n      parametersToCalc,\n      parentWrapperSize,\n      contentRows,\n      counter,\n      stretch\n    ]\n  );\n\n  const renderedLabel = label ? (\n    <InputLabel\n      color={ getLabelColor(disabled) }\n      text={ label }\n      size={ SIZE }\n      htmlFor={ id }\n    />\n  )\n    : null;\n\n  const renderedHint = showHint\n    ? (\n      <MemoizedInputHint\n        disabled={ disabled }\n        isError={ isError }\n        dataTestId={ dataTestHintId }\n        hintMessage={ hintMessage }\n      />\n    )\n    : null;\n\n  return (\n    <InputWrapper\n      label={ renderedLabel }\n      hint={ renderedHint }\n      showHint={ showHint }\n      styles={ wrapperStyles }\n      size={ SIZE }\n      disabled={ disabled }\n      labelAside={ LABEL_ASIDE }\n      labelWidth={ LABEL_WIDTH }\n      isError={ isError }\n      withoutDefaultMinWidth={ withoutDefaultMinWidth }\n      htmlFor={ id }\n    >\n      <div className={ wrapperStyles.textarea }>\n        <ScrollBox maxHeight={ blockHeight } height={ blockHeight }>\n          <div\n            className={ cd('input-sizer', { [`${ SIZE }`]: true, 'show-counter': counter }) }\n            data-value={ currentValue }\n          >\n            <textarea\n              { ...textareaProps }\n              id={ id }\n              className={ cn('input', { [`${ SIZE }`]: true, pseudo }) }\n              onChange={ handleOnChange }\n              value={ currentValue }\n              rows={ contentRows }\n              maxLength={ maxLength && maxLength > 0 ? maxLength : undefined }\n              readOnly={ pseudo }\n              data-test-id={ dataTestId }\n              disabled={ disabled }\n              autoComplete=\"off\"\n            />\n          </div>\n        </ScrollBox>\n        <Counter\n          show={ Boolean(counter) }\n          disabled={ disabled }\n          textLength={ currentValue?.length ?? 0 }\n          maxLength={ maxLength }\n          size={ SIZE }\n        />\n      </div>\n    </InputWrapper>\n  );\n}\n\nexport { Textarea };\n"],"names":["cd","cssDecorator","styles","Textarea","_a","_g","size","counter","_h","disabled","isError","uncontrolled","_j","showHint","dataTestHintId","hintMessage","pseudo","withoutDefaultMinWidth","label","labelAside","labelWidth","_k","stretch","_l","maxLength","undefined","_m","value","onChange","dataTestId","_o","rows","fieldName","id","textareaProps","cn","useMemo","classNames","bind","contentRows","parentWrapperSize","useContext","InputWrapperContext","_p","useFormContext","LABEL_WIDTH","LABEL_ASIDE","SIZE","updatedValue","slice","currentValue","handleOnChange","useCallback","evt","newValue","target","parametersToCalc","default","lineHeight","offset","counterSize","small","blockHeight","currentParams","renderedLabel","React","InputLabel","color","getLabelColor","text","htmlFor","renderedHint","MemoizedInputHint","InputWrapper","hint","wrapperStyles","className","textarea","ScrollBox","maxHeight","height","_b","_c","readOnly","autoComplete","Counter","show","Boolean","textLength","length"],"mappings":"04BAuBA,IAAMA,EAAKC,EAAaC,GAExB,SAASC,EAASC,iBAEhBC,SAAAC,aAAO,YACPC,YACAC,aAAAC,gBACAC,YACAC,iBAEAC,aAAAC,gBACAC,mBACAC,gBACAC,WAEAC,2BACAC,UACAC,eACAC,eAEAC,YAAAC,gBACAC,cAAAC,kBAAYC,IACZC,UAAAC,aAAQ,KACRC,aACAC,eACAC,SAAAC,aAAO,IACPC,cACAC,OACGC,MA1Ba,oPA4BVC,EAAKC,GAAQ,WAAM,OAAAC,EAAWC,KAAKpC,KAAS,IAC5CqC,GAAchC,EAAUwB,EAAO,EAAIA,EAEnCS,uBAAoBC,EAAWC,yBAAsBpC,oBAAQA,EAC7DqC,GAAqCC,EAAe,CAAExB,aAAYD,aAAYb,KAAMkC,KAAlFK,kBAAaC,kBAAaC,WAE5BC,GAAexB,GAAaA,EAAY,EAAIG,EAAMsB,MAAM,EAAGzB,GAAaG,EACxEuB,GAAevC,OAAec,EAAYuB,GAE1CG,GAAiBC,GAAY,SAACC,GAC1B,IAAOC,EAAaD,EAAIE,aAE5B3B,GACFA,EAAS0B,EAAUtB,KAEpB,CAACA,EAAWJ,IAMT4B,GAAmBpB,GAAQ,WAAM,OACrCqB,QAAS,CACPC,WAAY,GACZC,OAAQpD,EAAU,GAAK,GACvBqD,YAAa,IAEfC,MAAO,CACLH,WAAY,GACZC,OAAQpD,EAAU,EAAI,GACtBqD,YAAa,OAEb,CAACrD,IAKCuD,GAAc1B,GAClB,WACE,IAAM2B,EAAgBP,GAAiBhB,IACvC,OAAIlB,EACKf,EAAU,eAAgBwD,EAAcH,uBAAoBnC,EAG9Dc,GAAcwB,EAAcL,WAAaK,EAAcJ,SAEhE,CACEH,GACAhB,GACAD,GACAhC,EACAe,IAIE0C,GAAgB9C,EACpB+C,gBAACC,GACCC,MAAQC,EAAc3D,GACtB4D,KAAOnD,EACPZ,KAAOyC,GACPuB,QAAUrC,IAGV,KAEEsC,GAAe1D,EAEjBoD,gBAACO,GACC/D,SAAWA,EACXC,QAAUA,EACVmB,WAAaf,EACbC,YAAcA,IAGhB,KAEJ,OACEkD,gBAACQ,GACCvD,MAAQ8C,GACRU,KAAOH,GACP1D,SAAWA,EACXX,OAASyE,EACTrE,KAAOyC,GACPtC,SAAWA,EACXU,WAAa2B,GACb1B,WAAayB,GACbnC,QAAUA,EACVO,uBAAyBA,EACzBqD,QAAUrC,GAEVgC,uBAAKW,UAAYD,EAAcE,UAC7BZ,gBAACa,GAAUC,UAAYjB,GAAckB,OAASlB,IAC5CG,uBACEW,UAAY5E,EAAG,oBAAiBiF,EAAC,GAAIlC,KAAU,EAAMkC,kBAAgB1E,mBACxD2C,IAEbe,gCACO/B,GACLD,GAAKA,EACL2C,UAAYzC,EAAG,cAAW+C,EAAC,GAAInC,KAAU,EAAMmC,eAC/CtD,SAAWuB,GACXxB,MAAQuB,GACRnB,KAAOQ,GACPf,UAAYA,GAAaA,EAAY,EAAIA,OAAYC,EACrD0D,SAAWnE,iBACIa,EACfpB,SAAWA,EACX2E,aAAa,WAInBnB,gBAACoB,GACCC,KAAOC,QAAQhF,GACfE,SAAWA,EACX+E,qBAAatC,gBAAAA,GAAcuC,sBAAU,EACrCjE,UAAYA,EACZlB,KAAOyC,MAKjB"}