{"version":3,"file":"index.js","sources":["../../src/Select/index.tsx"],"sourcesContent":["import 'focus-visible';\nimport React, {\n  useState,\n  useEffect,\n  useMemo,\n  useRef,\n  useCallback\n} from 'react';\nimport { SelectProps } from 'core/types/select';\nimport { IconChevronDown } from 'core/src/icons';\nimport { BaseSelect, InputLabel, InputHint } from 'core/shared';\nimport { BaseInput } from 'shared/BaseInput';\nimport { useFormContext } from 'shared/Form/formContext';\nimport getLabelColor from 'core/utils/getLabelColor';\n\nimport inputStyles from 'shared/BaseInput/coreStyles.scss';\nimport iconsStyles from 'shared/BaseInput/WithIcons/coreStyles.scss';\n\nconst DEFAULT_PROPS = {\n  size: 'default',\n  dataTestId: 'select_id'\n} as SelectProps;\n\nconst emptyWrapperStyles = {};\n\nconst Select: React.FC<SelectProps> = ({\n  id,\n  items,\n  label,\n  placeholder,\n  disabled,\n  isError,\n  showHint,\n  hintMessage,\n  labelAside,\n  activeValue,\n  size = DEFAULT_PROPS.size,\n  onChange = (): void => undefined,\n  dataTestId = DEFAULT_PROPS.dataTestId,\n  labelWidth,\n  fieldName,\n  fixedModeID\n}) => {\n  const { LABEL_WIDTH, LABEL_ASIDE, SIZE } = useFormContext({ labelWidth, labelAside, size });\n\n  const firstUpdate = useRef(true);\n\n  const activeLabel = useMemo(() => items.find(item => item.value === activeValue)?.label, [activeValue, items]);\n\n  const [isOpenDropdown, setIsOpenDropdown] = useState(false);\n  const [selectValue, setSelectValue] = useState(activeLabel);\n\n  const onToggleDropdown = useCallback((): void => setIsOpenDropdown(state => !state), []);\n\n  const onKeyPressInput = useCallback((event: React.KeyboardEvent): void => {\n    if (event.code === 'Enter') {\n      setIsOpenDropdown(state => !state);\n    }\n  }, []);\n\n  const onItemClickHandler = useCallback((value: string): void => {\n    onChange(value, fieldName);\n    setIsOpenDropdown(false);\n  }, [fieldName, onChange]);\n\n  const onHandleClickOutside = useCallback((): void => setIsOpenDropdown(false), []);\n\n  const inputIcon = useMemo(() => [{ icon: <IconChevronDown />, onClick: onToggleDropdown }], [onToggleDropdown]);\n\n  useEffect(() => {\n    if (firstUpdate.current) {\n      firstUpdate.current = false;\n\n      return;\n    }\n    setSelectValue(activeLabel);\n  }, [activeLabel, activeValue, items]);\n\n  const renderedLabel = label\n    ? (\n      <InputLabel\n        size={ SIZE }\n        htmlFor={ id }\n        text={ label }\n        color={ getLabelColor(disabled) }\n      />\n    )\n    : null;\n\n  const renderedHint = showHint\n    ? (\n      <InputHint\n        disabled={ disabled }\n        isError={ isError }\n        hintMessage={ hintMessage }\n      />\n    )\n    : null;\n\n  return (\n    <BaseSelect\n      items={ items }\n      activeValue={ activeValue }\n      size={ SIZE }\n      labelAside={ LABEL_ASIDE }\n      isOpenDropdown={ isOpenDropdown }\n      disabled={ disabled }\n      isError={ isError }\n      showHint={ showHint }\n      label={ renderedLabel }\n      hint={ renderedHint }\n      onChange={ onChange }\n      onItemClick={ onItemClickHandler }\n      onCloseDropdown={ onHandleClickOutside }\n      dataTestId={ dataTestId }\n      labelWidth={ LABEL_WIDTH }\n      fixedModeID={ fixedModeID }\n    >\n      <BaseInput\n        id={ id }\n        value={ selectValue }\n        hint={ renderedHint }\n        icons={ inputIcon }\n        size={ SIZE }\n        disabled={ disabled }\n        isError={ isError }\n        styles={ inputStyles }\n        wrapperStyles={ emptyWrapperStyles }\n        iconsStyles={ iconsStyles }\n        onClick={ onToggleDropdown }\n        onKeyPress={ onKeyPressInput }\n        placeholder={ placeholder }\n        isSelect\n        pseudo\n      />\n    </BaseSelect>\n  );\n};\n\nconst StoryComponent: React.FC<SelectProps> = () => null;\nStoryComponent.defaultProps = DEFAULT_PROPS;\n\nexport { Select, StoryComponent };\n"],"names":["DEFAULT_PROPS","emptyWrapperStyles","Select","_a","id","items","label","placeholder","disabled","isError","showHint","hintMessage","labelAside","activeValue","_b","size","_c","onChange","_d","dataTestId","labelWidth","fieldName","fixedModeID","_e","useFormContext","LABEL_WIDTH","LABEL_ASIDE","SIZE","firstUpdate","useRef","activeLabel","useMemo","find","item","value","_f","useState","isOpenDropdown","setIsOpenDropdown","_g","selectValue","setSelectValue","onToggleDropdown","useCallback","state","onKeyPressInput","event","code","onItemClickHandler","onHandleClickOutside","inputIcon","icon","React","IconChevronDown","onClick","useEffect","current","renderedLabel","InputLabel","htmlFor","text","color","getLabelColor","renderedHint","InputHint","BaseSelect","hint","onItemClick","onCloseDropdown","BaseInput","icons","styles","inputStyles","wrapperStyles","iconsStyles","onKeyPress","isSelect","pseudo"],"mappings":"ysBAkBA,IAAMA,EACE,UADFA,EAEQ,YAGRC,EAAqB,GAErBC,EAAgC,SAACC,OACrCC,OACAC,UACAC,UACAC,gBACAC,aACAC,YACAC,aACAC,gBACAC,eACAC,gBACAC,SAAAC,aAAOf,IACPgB,aAAAC,aAAW,eACXC,eAAAC,aAAanB,IACboB,eACAC,cACAC,gBAEMC,EAAqCC,EAAe,CAAEJ,aAAYR,aAAYG,SAA5EU,gBAAaC,gBAAaC,SAE5BC,EAAcC,GAAO,GAErBC,EAAcC,GAAQ,iBAAM,iBAAA1B,EAAM2B,MAAK,SAAAC,GAAQ,OAAAA,EAAKC,QAAUrB,2BAAcP,QAAO,CAACO,EAAaR,IAEjG8B,EAAsCC,GAAS,GAA9CC,OAAgBC,OACjBC,EAAgCH,EAASN,GAAxCU,OAAaC,OAEdC,EAAmBC,GAAY,WAAY,OAAAL,GAAkB,SAAAM,GAAS,OAACA,OAAQ,IAE/EC,EAAkBF,GAAY,SAACG,GAChB,UAAfA,EAAMC,MACRT,GAAkB,SAAAM,GAAS,OAACA,OAE7B,IAEGI,EAAqBL,GAAY,SAACT,GACtCjB,EAASiB,EAAOb,GAChBiB,GAAkB,KACjB,CAACjB,EAAWJ,IAETgC,EAAuBN,GAAY,WAAY,OAAAL,GAAkB,KAAQ,IAEzEY,GAAYnB,GAAQ,WAAM,MAAA,CAAC,CAAEoB,KAAMC,gBAACC,QAAoBC,QAASZ,MAAqB,CAACA,IAE7Fa,GAAU,WACJ3B,EAAY4B,QACd5B,EAAY4B,SAAU,EAIxBf,EAAeX,KACd,CAACA,EAAajB,EAAaR,IAE9B,IAAMoD,GAAgBnD,EAElB8C,gBAACM,GACC3C,KAAOY,EACPgC,QAAUvD,EACVwD,KAAOtD,EACPuD,MAAQC,EAActD,KAGxB,KAEEuD,GAAerD,EAEjB0C,gBAACY,GACCxD,SAAWA,EACXC,QAAUA,EACVE,YAAcA,IAGhB,KAEJ,OACEyC,gBAACa,GACC5D,MAAQA,EACRQ,YAAcA,EACdE,KAAOY,EACPf,WAAac,EACbW,eAAiBA,EACjB7B,SAAWA,EACXC,QAAUA,EACVC,SAAWA,EACXJ,MAAQmD,GACRS,KAAOH,GACP9C,SAAWA,EACXkD,YAAcnB,EACdoB,gBAAkBnB,EAClB9B,WAAaA,EACbC,WAAaK,EACbH,YAAcA,GAEd8B,gBAACiB,GACCjE,GAAKA,EACL8B,MAAQM,EACR0B,KAAOH,GACPO,MAAQpB,GACRnC,KAAOY,EACPnB,SAAWA,EACXC,QAAUA,EACV8D,OAASC,EACTC,cAAgBxE,EAChByE,YAAcA,EACdpB,QAAUZ,EACViC,WAAa9B,EACbtC,YAAcA,EACdqE,YACAC,YAIR"}