{"version":3,"file":"index.js","sources":["../../../../../shared/ScrollBox/index.tsx"],"sourcesContent":["import React, {\n  CSSProperties,\n  forwardRef,\n  useEffect,\n  useMemo,\n  useState\n} from 'react';\nimport SimpleBar from 'simplebar-react';\n\nimport styles from './styles.scss';\n\n/** Для корректной работы необходим импорт simplebar-react/dist/simplebar.min.css AS-IS\n * Файл импортируется при сборке, ищи SIMPLEBAR_IMPORT.\n * */\n\ninterface ScrollBoxProps {\n  /** Контент */\n  children: React.ReactNode;\n\n  /** Класс внешнего блока компонента взамен стандартному */\n  overrideWrapperClassName?: string;\n\n  /** Максимальная ширина компонента */\n  maxWidth?: CSSProperties['maxWidth'];\n\n  /** Максимальная высота компонента */\n  maxHeight?: CSSProperties['maxHeight'];\n\n  /** Фиксированная ширина компонента */\n  width?: CSSProperties['width'];\n\n  /** Фиксированная высота компонента */\n  height?: CSSProperties['height'];\n\n  /** Поведение при достижении предела прокрутки (не поддерживается в safari) */\n  overscrollBehavior?: CSSProperties['overscrollBehavior'];\n\n  /** Колбэк при скролле */\n  onScroll?: (event: React.SyntheticEvent) => void;\n\n  /** ID для тестов */\n  dataTestId?: string;\n\n  /** Автоскрытие скролла  */\n  autoHide?: boolean;\n}\n\n// eslint-disable-next-line react/display-name\nconst ScrollBox = forwardRef<HTMLDivElement, ScrollBoxProps>(({\n  children,\n  maxWidth,\n  width,\n  maxHeight,\n  overrideWrapperClassName,\n  overscrollBehavior = 'contain',\n  onScroll,\n  dataTestId,\n  autoHide = true\n}, ref) => {\n  /* Меняем key каждый раз, когда меняется autoHide, для перезагрузки SimpleBar,\n  т.к. SimpleBar устанавливает autoHide только на этапе монтирования */\n  const [key, setKey] = useState(0);\n\n  useEffect(() => {\n    setKey(prev => prev + 1);\n  }, [autoHide]);\n\n  const style = useMemo(\n    () => ({\n      width,\n      maxWidth,\n      maxHeight,\n      '--overscroll-behavior': overscrollBehavior\n    } as CSSProperties),\n    [\n      width,\n      maxWidth,\n      maxHeight,\n      overscrollBehavior\n    ]\n  );\n\n  const scrollableNodeProps = useMemo(() => ({ ref, onScroll }), [ref, onScroll]);\n\n  return (\n    <SimpleBar\n      key={ key }\n      style={ style }\n      className={ overrideWrapperClassName || styles.wrapper }\n      data-test-id={ dataTestId }\n      scrollableNodeProps={ scrollableNodeProps }\n      autoHide={ autoHide }\n    >\n      { children }\n    </SimpleBar>\n  );\n});\n\nexport { ScrollBox, ScrollBoxProps };\n"],"names":["ScrollBox","forwardRef","_a","ref","children","maxWidth","width","maxHeight","overrideWrapperClassName","_b","overscrollBehavior","onScroll","dataTestId","_c","autoHide","_d","useState","key","setKey","useEffect","prev","style","useMemo","scrollableNodeProps","React","SimpleBar","className","styles","wrapper"],"mappings":"mJAgDMA,EAAYC,GAA2C,SAACC,EAU3DC,OATDC,aACAC,aACAC,UACAC,cACAC,6BACAC,uBAAAC,aAAqB,YACrBC,aACAC,eACAC,aAAAC,gBAIMC,EAAgBC,EAAS,GAAxBC,OAAKC,OAEZC,GAAU,WACRD,GAAO,SAAAE,GAAQ,OAAAA,EAAO,OACrB,CAACN,IAEJ,IAAMO,EAAQC,GACZ,WAAM,OACJhB,QACAD,WACAE,YACA,wBAAyBG,KAE3B,CACEJ,EACAD,EACAE,EACAG,IAIEa,EAAsBD,GAAQ,WAAM,OAAGnB,MAAKQ,cAAa,CAACR,EAAKQ,IAErE,OACEa,gBAACC,GACCR,IAAMA,EACNI,MAAQA,EACRK,UAAYlB,GAA4BmB,EAAOC,uBAChChB,EACfW,oBAAsBA,EACtBT,SAAWA,GAETV,EAGR"}