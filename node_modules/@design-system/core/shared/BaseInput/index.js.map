{"version":3,"file":"index.js","sources":["../../../../../shared/BaseInput/index.tsx"],"sourcesContent":["import React, {\n  useCallback,\n  useContext,\n  useMemo,\n  useState,\n  useRef,\n  FocusEventHandler\n} from 'react';\nimport classNames from 'classnames/bind';\nimport { InputWrapper } from 'shared/InputWrapper';\nimport { useFormContext } from 'shared/Form/formContext';\nimport { FormSize } from 'shared/Form/types';\n\nimport { WithIcons } from './WithIcons';\nimport type { BaseInputProps, BaseInputSize } from './types';\nimport { InputWrapperContext } from '../InputWrapper/InputWrapperContext';\nimport WrappedCounter from '../WrappedComponent';\n\nexport const DEFAULT_PROPS = {\n  size: 'default',\n  disabled: false,\n  showHint: false,\n  isError: false,\n  labelAside: false,\n  pseudo: false,\n  uncontrolled: false,\n  dummyWrapper: false,\n  inputType: 'text',\n  value: '',\n  isMourning: false\n};\n\n// TODO: подумать над рефакторингом функции\nconst getInputStyles = (\n  inputPadding: number,\n  iconsWidth?: number,\n  counterWidth?: number,\n  counterHeight?: number,\n  withoutMinWidth?: boolean,\n  iconsLeft?: boolean\n): null | { paddingLeft?: string; paddingRight?: string; paddingBottom?: string } => {\n  if (iconsWidth || counterWidth) {\n    // Лимит в 4px выбран, чтобы placeholder в компоненте InputTime не многоточился при значении \"hh:mm\" у всех размеров\n    const paddingValue = `calc(${ withoutMinWidth ? 4 : inputPadding }px + ${ iconsWidth || counterWidth }px)`;\n\n    return iconsLeft ? { paddingLeft: paddingValue } : { paddingRight: paddingValue };\n  }\n\n  if (counterHeight) {\n    return { paddingBottom: `calc(${ inputPadding }px + ${ counterHeight }px)` };\n  }\n\n  return null;\n};\n\nconst BaseInput: React.FC<BaseInputProps> = ({\n  inputElement = 'input',\n  id,\n  dataTestId,\n  placeholder,\n  inputRef,\n  name,\n  icons,\n  label,\n  hint,\n  styles,\n  wrapperStyles,\n  iconsStyles,\n  labelWidth,\n  maxLength,\n  counter,\n  fieldName,\n  withoutDefaultMinWidth,\n  autoFocus,\n  isSelect,\n  iconsLeft,\n  uncontrolled = DEFAULT_PROPS.uncontrolled,\n  value = DEFAULT_PROPS.value,\n  size = DEFAULT_PROPS.size as BaseInputSize,\n  isError = DEFAULT_PROPS.isError,\n  disabled = DEFAULT_PROPS.disabled,\n  pseudo = DEFAULT_PROPS.pseudo,\n  labelAside = DEFAULT_PROPS.labelAside,\n  showHint = DEFAULT_PROPS.showHint,\n  dummyWrapper = DEFAULT_PROPS.dummyWrapper,\n  inputType = DEFAULT_PROPS.inputType,\n  isMourning: isMourningProp = DEFAULT_PROPS.isMourning,\n  onChange,\n  onBlur,\n  onFocus,\n  onKeyDown,\n  onContextMenu,\n  onClick,\n  onKeyPress,\n  children\n}) => {\n  const parentWrapperSize = useContext(InputWrapperContext)?.size ?? size as FormSize;\n  const { LABEL_WIDTH, LABEL_ASIDE, SIZE } = useFormContext({ labelWidth, labelAside, size: parentWrapperSize });\n  const [isHovered, setIsHovered] = useState(false);\n  const [isFocused, setIsFocused] = useState(false);\n  const isMourning = isMourningProp && !isError && !(isHovered || isFocused);\n\n  const onMouseInteraction = (event: React.MouseEvent): void => setIsHovered(event.type === 'mouseenter');\n  const onFocusChange: FocusEventHandler = (event): void => {\n    const handler = {\n      focus: onFocus,\n      blur: onBlur\n    }[event.type];\n\n    if (handler) handler(event);\n\n    setIsFocused(event.type === 'focus');\n  };\n\n  const cn = useMemo(() => classNames.bind(styles), [styles]);\n  const updatedValue = maxLength && (maxLength > 0) ? value.slice(0, maxLength) : value;\n  const currentValue = uncontrolled ? undefined : updatedValue;\n\n  const inputClassNames = useMemo(\n    () => {\n      if (cn) {\n        return cn(\n          'input',\n          `input--${ SIZE }`,\n          {\n            'input--error': isError,\n            'input--disabled': disabled,\n            'input--high': inputElement === 'textarea',\n            'input--pseudo': pseudo,\n            'input--select': isSelect\n          }\n        );\n      }\n\n      return '';\n    },\n    [\n      cn,\n      SIZE,\n      isError,\n      disabled,\n      inputElement,\n      pseudo,\n      isSelect\n    ]\n  );\n\n  const [inputLength, setInputLength] = useState(0);\n  const counerRef = useRef<HTMLDivElement>(null);\n\n  // Менять строго совместно с внутренним отступом в input\n  const inputPadding = useMemo(() => (SIZE === 'small' ? 8 : 12), [SIZE]);\n  // Здесь inputPadding - отступ слева от каунтера до текста инпута\n  const counterWidth = counter && inputElement === 'input' ? Number(counerRef.current?.getBoundingClientRect().width) + inputPadding : 0;\n  // 8 - отступ сверху от каунтера до текста текстового поля\n  const counterHeight = counter && inputElement === 'textarea' ? Number(counerRef.current?.getBoundingClientRect().height) + 8 : 0;\n  // Совокупная ширина картинки отличатся в зависимости от размра инпута: small - 28, default - 34 (из-за margin-right)\n  const iconWidth = useMemo(() => (SIZE === 'small' ? 28 : 34), [SIZE]);\n  const iconsWidth = useMemo(() => (icons?.length ? icons.length * iconWidth : 0), [icons, iconWidth]);\n\n  const onInputCallback = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    const newValue = event.target.value;\n\n    setInputLength(newValue.length);\n\n    if (onChange) {\n      onChange(newValue, fieldName);\n    }\n  }, [fieldName, onChange]);\n\n  return (\n    <InputWrapper\n      label={ label }\n      labelAside={ LABEL_ASIDE }\n      isError={ isError }\n      showHint={ showHint }\n      hint={ hint }\n      size={ SIZE }\n      disabled={ disabled }\n      styles={ wrapperStyles }\n      filled={ Boolean(inputLength) }\n      labelWidth={ LABEL_WIDTH }\n      dummyWrapper={ dummyWrapper }\n      withoutDefaultMinWidth={ withoutDefaultMinWidth }\n      isMourning={ isMourning }\n    >\n      <WithIcons\n        icons={ icons }\n        disabled={ disabled }\n        styles={ iconsStyles }\n        size={ SIZE }\n        inputElement={ inputElement }\n        iconsLeft={ iconsLeft }\n        counter={ <WrappedCounter ref={ counerRef }>{ counter }</WrappedCounter> }\n      >\n        {\n          React.createElement(\n            inputElement,\n            {\n              'data-test-id': dataTestId,\n              ref: inputRef,\n              className: inputClassNames,\n              style: getInputStyles(\n                inputPadding,\n                iconsWidth,\n                counterWidth,\n                counterHeight,\n                withoutDefaultMinWidth,\n                iconsLeft\n              ),\n              name,\n              placeholder,\n              type: inputType,\n              id,\n              value: currentValue,\n              disabled,\n              readOnly: pseudo,\n              autoComplete: 'off',\n              autoFocus,\n              /** Чтобы div смог получать фокус, ему нужен tabIndex */\n              tabIndex: autoFocus && inputElement === 'div' ? 0 : undefined,\n              onInput: onInputCallback,\n              onFocus: onFocusChange,\n              onBlur: onFocusChange,\n              onClick,\n              onKeyPress,\n              onKeyDown,\n              onContextMenu,\n              onMouseEnter: onMouseInteraction,\n              onMouseLeave: onMouseInteraction\n            },\n            inputElement === 'div' ? children : undefined\n          )\n        }\n      </WithIcons>\n    </InputWrapper>\n  );\n};\n\nexport { BaseInput, BaseInputProps };\n"],"names":["DEFAULT_PROPS","size","disabled","showHint","isError","labelAside","pseudo","uncontrolled","dummyWrapper","inputType","value","isMourning","getInputStyles","inputPadding","iconsWidth","counterWidth","counterHeight","withoutMinWidth","iconsLeft","paddingValue","paddingLeft","paddingRight","paddingBottom","BaseInput","_a","_f","inputElement","id","dataTestId","placeholder","inputRef","name","icons","label","hint","styles","wrapperStyles","iconsStyles","labelWidth","maxLength","counter","fieldName","withoutDefaultMinWidth","autoFocus","isSelect","_g","_h","_j","_k","_l","_m","_o","_p","_q","_r","_s","isMourningProp","onChange","onBlur","onFocus","onKeyDown","onContextMenu","onClick","onKeyPress","children","parentWrapperSize","useContext","InputWrapperContext","_t","useFormContext","LABEL_WIDTH","LABEL_ASIDE","SIZE","_u","useState","isHovered","setIsHovered","_v","isFocused","setIsFocused","onMouseInteraction","event","type","onFocusChange","handler","focus","blur","cn","useMemo","classNames","bind","updatedValue","slice","currentValue","undefined","inputClassNames","_w","inputLength","setInputLength","counerRef","useRef","Number","current","getBoundingClientRect","width","height","iconWidth","length","onInputCallback","useCallback","newValue","target","React","InputWrapper","filled","Boolean","WithIcons","WrappedCounter","ref","createElement","className","style","readOnly","autoComplete","tabIndex","onInput","onMouseEnter","onMouseLeave"],"mappings":"2ZAkBaA,EAAgB,CAC3BC,KAAM,UACNC,UAAU,EACVC,UAAU,EACVC,SAAS,EACTC,YAAY,EACZC,QAAQ,EACRC,cAAc,EACdC,cAAc,EACdC,UAAW,OACXC,MAAO,GACPC,YAAY,GAIRC,EAAiB,SACrBC,EACAC,EACAC,EACAC,EACAC,EACAC,GAEA,GAAIJ,GAAcC,EAAc,CAE9B,IAAMI,EAAe,SAASF,EAAkB,EAAIJ,YAAsBC,GAAcC,SAExF,OAAOG,EAAY,CAAEE,YAAaD,GAAiB,CAAEE,aAAcF,GAGrE,OAAIH,EACK,CAAEM,cAAe,QAAST,UAAsBG,SAGlD,IACT,EAEMO,EAAsC,SAACC,eAC3CC,iBAAAC,aAAe,UACfC,OACAC,eACAC,gBACAC,aACAC,SACAC,UACAC,UACAC,SACAC,WACAC,kBACAC,gBACAC,eACAC,cACAC,YACAC,cACAC,2BACAC,cACAC,aACA1B,cACA2B,iBAAAtC,aAAeP,EAAcO,eAC7BuC,UAAApC,aAAQV,EAAcU,QACtBqC,SAAA9C,aAAOD,EAAcC,OACrB+C,YAAA5C,aAAUJ,EAAcI,UACxB6C,aAAA/C,aAAWF,EAAcE,WACzBgD,WAAA5C,aAASN,EAAcM,SACvB6C,eAAA9C,aAAaL,EAAcK,aAC3B+C,cAAAjD,eAAWH,EAAcG,YACzBkD,kBAAA7C,eAAeR,EAAcQ,gBAC7B8C,eAAA7C,eAAYT,EAAcS,aAC1B8C,gBAAYC,eAAiBxD,EAAcW,cAC3C8C,cACAC,YACAC,aACAC,eACAC,mBACAC,aACAC,gBACAC,cAEMC,uBAAoBC,EAAWC,yBAAsBlE,oBAAQA,EAC7DmE,GAAqCC,EAAe,CAAE/B,aAAYjC,aAAYJ,KAAMgE,KAAlFK,kBAAaC,kBAAaC,WAC5BC,GAA4BC,GAAS,GAApCC,SAAWC,SACZC,GAA4BH,GAAS,GAApCI,SAAWC,SACZpE,GAAa6C,KAAmBpD,KAAauE,IAAaG,IAE1DE,GAAqB,SAACC,GAAkC,OAAAL,GAA4B,eAAfK,EAAMC,OAC3EC,GAAmC,SAACF,GACxC,IAAMG,EAAU,CACdC,MAAO1B,GACP2B,KAAM5B,IACNuB,EAAMC,MAEJE,GAASA,EAAQH,GAErBF,GAA4B,UAAfE,EAAMC,OAGfK,GAAKC,GAAQ,WAAM,OAAAC,EAAWC,KAAKvD,KAAS,CAACA,IAC7CwD,GAAepD,GAAcA,EAAY,EAAK7B,EAAMkF,MAAM,EAAGrD,GAAa7B,EAC1EmF,GAAetF,OAAeuF,EAAYH,GAE1CI,GAAkBP,GACtB,WACE,OAAID,GACKA,GACL,QACA,UAAWf,GACX,CACE,eAAgBpE,EAChB,kBAAmBF,EACnB,cAAgC,aAAjBwB,EACf,gBAAiBpB,EACjB,gBAAiBsC,IAKhB,KAET,CACE2C,GACAf,GACApE,EACAF,EACAwB,EACApB,EACAsC,IAIEoD,GAAgCtB,EAAS,GAAxCuB,SAAaC,SACdC,GAAYC,EAAuB,MAGnCvF,GAAe2E,GAAQ,WAAM,MAAU,UAAThB,GAAmB,EAAI,KAAK,CAACA,KAE3DzD,GAAeyB,GAA4B,UAAjBd,EAA2B2E,iBAAOF,GAAUG,8BAASC,wBAAwBC,OAAS3F,GAAe,EAE/HG,GAAgBwB,GAA4B,aAAjBd,EAA8B2E,iBAAOF,GAAUG,8BAASC,wBAAwBE,QAAU,EAAI,EAEzHC,GAAYlB,GAAQ,WAAM,MAAU,UAAThB,GAAmB,GAAK,KAAK,CAACA,KACzD1D,GAAa0E,GAAQ,WAAM,OAACxD,eAAAA,EAAO2E,QAAS3E,EAAM2E,OAASD,GAAY,IAAI,CAAC1E,EAAO0E,KAEnFE,GAAkBC,GAAY,SAAC5B,GACnC,IAAM6B,EAAW7B,EAAM8B,OAAOrG,MAE9BwF,GAAeY,EAASH,QAEpBlD,IACFA,GAASqD,EAAUrE,KAEpB,CAACA,EAAWgB,KAEf,OACEuD,gBAACC,GACChF,MAAQA,EACR5B,WAAakE,GACbnE,QAAUA,EACVD,SAAWA,GACX+B,KAAOA,EACPjC,KAAOuE,GACPtE,SAAWA,EACXiC,OAASC,EACT8E,OAASC,QAAQlB,IACjB3D,WAAagC,GACb9D,aAAeA,GACfkC,uBAAyBA,EACzB/B,WAAaA,IAEbqG,gBAACI,GACCpF,MAAQA,EACR9B,SAAWA,EACXiC,OAASE,EACTpC,KAAOuE,GACP9C,aAAeA,EACfR,UAAYA,EACZsB,QAAUwE,gBAACK,GAAeC,IAAMnB,IAAc3D,IAG5CwE,EAAMO,cACJ7F,EACA,CACE,eAAgBE,EAChB0F,IAAKxF,EACL0F,UAAWzB,GACX0B,MAAO7G,EACLC,GACAC,GACAC,GACAC,GACA0B,EACAxB,GAEFa,OACAF,cACAqD,KAAMzE,GACNkB,KACAjB,MAAOmF,GACP3F,WACAwH,SAAUpH,EACVqH,aAAc,MACdhF,YAEAiF,SAAUjF,GAA8B,QAAjBjB,EAAyB,OAAIoE,EACpD+B,QAASjB,GACTjD,QAASwB,GACTzB,OAAQyB,GACRrB,WACAC,cACAH,aACAC,iBACAiE,aAAc9C,GACd+C,aAAc/C,IAEC,QAAjBtD,EAAyBsC,QAAW8B,IAMhD"}