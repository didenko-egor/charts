{"version":3,"file":"index.js","sources":["../../../../../../../shared/BaseCalendar/DaysList/Month/index.tsx"],"sourcesContent":["/* eslint-disable react/no-array-index-key */\nimport React, {\n  ReactNode,\n  useCallback,\n  useEffect,\n  useMemo\n} from 'react';\nimport format from 'date-fns/format';\nimport { useInView } from 'react-intersection-observer';\nimport { DaysListMonthProps } from 'shared/types/calendar';\n\nimport {\n  getDateString,\n  getInRange\n} from '../../utils';\nimport Day from '../Day';\n\nimport styles from './styles.scss';\n\nconst Month: React.FC<DaysListMonthProps> = ({\n  locale,\n  maxDate,\n  minDate,\n  month,\n  monthDate,\n  onSelect,\n  onMonthChange,\n  range,\n  rowHeight,\n  rows,\n  selected,\n  style,\n  today,\n  year\n}) => {\n  const {\n    ref: refInView,\n    inView,\n    entry\n  } = useInView({\n    threshold: 1,\n    initialInView: false\n  });\n\n  const monthName = useMemo(() => format(monthDate, 'LLLL yyyy', { locale }), [monthDate, locale]);\n\n  const inViewOnChange = useCallback((observerEntry: IntersectionObserverEntry) => {\n    const intersectionRatio = (observerEntry.intersectionRatio * 100).toFixed(0);\n\n    if (intersectionRatio === '100' && onMonthChange) {\n      onMonthChange(monthDate);\n    }\n  }, [monthDate, onMonthChange]);\n\n  useEffect(() => {\n    if (entry) {\n      inViewOnChange(entry);\n    }\n  }, [inView, entry, inViewOnChange]);\n\n  const renderRows = (): ReactNode => {\n    const formatedToday = format(today, 'yyyy-MM-dd');\n    const formatedMinDate = format(minDate, 'yyyy-MM-dd');\n    const formatedMaxDate = format(maxDate, 'yyyy-MM-dd');\n    const formatedSelected: string[] = [];\n\n    selected?.forEach((date: Date) => {\n      formatedSelected.push(format(date, 'yyyy-MM-dd'));\n    });\n\n    return rows.map((row: number[], index: number) => (\n      <ul\n        key={ `Row-${ index }` }\n        className={ styles.row }\n        style={ { height: rowHeight } }\n        aria-label={ `Week ${ index + 1 }` }\n      >\n        {\n          row.map((day: number) => {\n            const date = getDateString(year, month, day);\n            const isDisabled = (date < formatedMinDate) || (date > formatedMaxDate);\n            const isSelected = formatedSelected && formatedSelected.indexOf(date) !== -1;\n            const isInRange = getInRange(date, formatedSelected, range);\n\n            return (\n              <Day\n                key={ `day-${ day }` }\n                date={ date }\n                day={ day }\n                isDisabled={ isDisabled }\n                isInRange={ isInRange }\n                isSelected={ isSelected }\n                isToday={ date === formatedToday }\n                onClick={ onSelect }\n                rowHeight={ rowHeight }\n              />\n            );\n          })\n        }\n      </ul>\n    ));\n  };\n\n  return (\n    <div\n      ref={ refInView }\n      style={ { ...style, lineHeight: `${ rowHeight }px` } }\n    >\n      <div className={ styles.monthname }>\n        { monthName }\n      </div>\n      <div className={ styles.rows }>\n        { renderRows() }\n      </div>\n    </div>\n  );\n};\n\nexport default Month;\n"],"names":["Month","_a","locale","maxDate","minDate","month","monthDate","onSelect","onMonthChange","range","rowHeight","rows","selected","style","today","year","_b","useInView","threshold","initialInView","refInView","inView","entry","monthName","useMemo","format","inViewOnChange","useCallback","observerEntry","intersectionRatio","toFixed","useEffect","formatedToday","formatedMinDate","formatedMaxDate","formatedSelected","React","ref","lineHeight","className","styles","monthname","forEach","date","push","map","row","index","key","height","day","getDateString","isDisabled","isSelected","indexOf","isInRange","getInRange","Day","isToday","onClick"],"mappings":"mUAmBMA,EAAsC,SAACC,OAC3CC,WACAC,YACAC,YACAC,UACAC,cACAC,aACAC,kBACAC,UACAC,cACAC,SACAC,aACAC,UACAC,UACAC,SAEMC,EAIFC,EAAU,CACZC,UAAW,EACXC,eAAe,IALVC,QACLC,WACAC,UAMIC,EAAYC,GAAQ,WAAM,OAAAC,EAAOnB,EAAW,YAAa,CAAEJ,aAAW,CAACI,EAAWJ,IAElFwB,EAAiBC,GAAY,SAACC,GAGR,SAFmC,IAAlCA,EAAcC,mBAAyBC,QAAQ,IAEvCtB,GACjCA,EAAcF,KAEf,CAACA,EAAWE,IAEfuB,GAAU,WACJT,GACFI,EAAeJ,KAEhB,CAACD,EAAQC,EAAOI,IAEnB,IACQM,EACAC,EACAC,EACAC,EAuCR,OACEC,uBACEC,IAAMjB,EACNP,aAAaA,IAAOyB,WAAgB5B,UAEpC0B,uBAAKG,UAAYC,EAAOC,WACpBlB,GAEJa,uBAAKG,UAAYC,EAAO7B,OAlDpBqB,EAAgBP,EAAOX,EAAO,cAC9BmB,EAAkBR,EAAOrB,EAAS,cAClC8B,EAAkBT,EAAOtB,EAAS,cAClCgC,EAA6B,GAEnCvB,SAAAA,EAAU8B,SAAQ,SAACC,GACjBR,EAAiBS,KAAKnB,EAAOkB,EAAM,kBAG9BhC,EAAKkC,KAAI,SAACC,EAAeC,GAAkB,OAChDX,sBACEY,IAAM,OAAQD,EACdR,UAAYC,EAAOM,IACnBjC,MAAQ,CAAEoC,OAAQvC,gBACL,SAASqC,EAAQ,IAG5BD,EAAID,KAAI,SAACK,GACP,IAAMP,EAAOQ,EAAcpC,EAAMV,EAAO6C,GAClCE,EAAcT,EAAOV,GAAqBU,EAAOT,EACjDmB,EAAalB,IAAwD,IAApCA,EAAiBmB,QAAQX,GAC1DY,EAAYC,EAAWb,EAAMR,EAAkB1B,GAErD,OACE2B,gBAACqB,GACCT,IAAM,OAAQE,EACdP,KAAOA,EACPO,IAAMA,EACNE,WAAaA,EACbG,UAAYA,EACZF,WAAaA,EACbK,QAAUf,IAASX,EACnB2B,QAAUpD,EACVG,UAAYA,aAsB5B"}