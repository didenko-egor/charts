/// <reference types="react" />
import React from "react";
import { WithInheritProps } from "../../../index-f15dddc8";
type FontColor = "primary" | "secondary" | "tass_secondary" | "tass" | "negative_dark";
interface LinkWrapperProps {
    /** URL (только в режиме ссылки) */
    href?: string;
    /** Атрибут target (только в режиме ссылки) */
    target?: string;
    /** Атрибут rel (только в режиме ссылки) */
    rel?: string;
    /** ID для тестирования */
    dataTestId?: string;
    /** Цвет текста ссылки */
    color?: FontColor;
    /** Флаг для наследования цвета текста от родителя */
    inheritColor?: boolean;
    /** Без стартового подчеркивания */
    withoutUnderline?: boolean;
    /** Коллбэк, вызываемый при нажатии на ссылку */
    onClick?: React.MouseEventHandler<HTMLAnchorElement>;
    /** Флаг, ссылка неактивна */
    disabled?: boolean;
}
/** Дефолтные значения, применимые к экспортируемым компонентам */
declare const DEFAULT_PROPS: {
    target: string;
    color: string;
    disabled: boolean;
    withoutUnderline: boolean;
};
declare const LinkWrapper: React.ForwardRefExoticComponent<LinkWrapperProps & {
    children?: React.ReactNode;
} & React.RefAttributes<unknown>>;
type DefaultPropsPassedByLink = {
    color: FontColor;
    inline: boolean;
};
declare function withLinkMemo<T extends LinkWrapperProps>(NonMemoizedComponent: React.ComponentType<T>): React.FC<T & LinkWrapperProps>;
type TypeIntersectionFix<Base, Hoc> = Base & Omit<Hoc, keyof Base>;
type TypedComponent<Base, Hoc> = React.FC<TypeIntersectionFix<Base, Hoc>>;
declare function getStoryComponent<Base, Hoc>(defaults: Base, hocDefaults: Hoc): TypedComponent<Base, Hoc>;
type TextFontWeight = 'bold' | 'regular';
type TextSize = 'extra_large' | 'large' | 'default' | 'small';
type TagName = 'p' | 'span' | 'strong' | 'em' | 'u' | 'sub' | 'sup' | 'del';
type TextFontColor = FontColor;
interface TextPropsBase {
    /** Имя тега */
    tagName?: TagName;
    /** Тип (размер) текста */
    size?: TextSize;
    /** Насыщенность шрифта */
    fontWeight?: TextFontWeight;
    /** Цвет текста */
    color?: TextFontColor;
    /** Флаг для использования шрифта PT Serif */
    serif?: boolean;
    /** ID для тестирования */
    dataTestId?: string;
    /** Дочерние элементы */
    children: React.ReactNode;
    /** Флаг для наследования цвета текста от родителя */
    inheritColor?: boolean;
    /** Флаг для использования нативных стилей тега */
    useNativeStyle?: boolean;
}
declare const DEFAULT_PROPS$0: {
    tagName: string;
    size: string;
    color: string;
    fontWeight: string;
    inheritColor: boolean;
    useNativeStyle: boolean;
};
type InheritableTextProps = TextPropsBase & WithInheritProps;
declare const StoryComponent: React.FunctionComponent<TextPropsBase & WithInheritProps & Omit<LinkWrapperProps, "inherit" | keyof TextPropsBase>>;
declare const _default: React.FC<TextPropsBase & WithInheritProps & LinkWrapperProps>;
type TextProps = InheritableTextProps & LinkWrapperProps;
export { _default as default, withLinkMemo, DefaultPropsPassedByLink, LinkWrapperProps, LinkWrapper, DEFAULT_PROPS, getStoryComponent, TextFontWeight, TextSize, TagName, TextFontColor, TextPropsBase, StoryComponent, TextProps };
