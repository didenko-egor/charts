import { SizeVariant } from "./common-03e05004";
type LabelCheckboxSize = Exclude<SizeVariant, 'large'>;
type CheckboxItem = {
    value: string;
    label: string;
    disabled?: boolean;
};
interface CheckboxProps {
    /** Имя чекбокса */
    name: string;
    /** Лейбл чекбокса (стандартный) */
    label?: string;
    /**  Размер лейбла чекбокса */
    size?: LabelCheckboxSize;
    /** Колбэк нажатие на чекбокс */
    onChange: (checked: boolean, fieldName?: string) => void;
    /** Data атрибут */
    dataTestId?: string;
    /** Флаг disabled для чекбокса */
    disabled?: boolean;
    /** Boolean значение нажатия на чекбокс */
    checked?: boolean;
    /** Имя поля, передается в onChange дополнительным аргументом */
    fieldName?: string;
    /** id чекбокса для привязки внешних кастомных лейблов
     * (например, если не используется стандартный label или необходимо несколько лейблов, разделенных ссылками ) */
    id?: string;
    /** Вертикальное выравнивание чекбокса относительно лейбла  */
    verticalAlign?: 'start' | 'center' | 'end';
    /** Ограничение контейнера текста радиокнопки, в px (если текст длиннее, то будет обрезан с многоточием в конце)  */
    textLimitWithEllipsis?: number;
}
interface CheckboxGroupProps extends Omit<CheckboxProps, 'name' | 'disabled' | 'checked' | 'onChange'> {
    /**  Расположение группы чекбоксов */
    labelAside?: boolean;
    /**  Имя активных чекбоксов */
    activeItems: Array<string>;
    /** Флаг disabled для всей группы чекбоксов */
    disabledGroup?: boolean;
    /**  Массив чекбоксов и их значений */
    items: Array<CheckboxItem>;
    /** Колбэк нажатие на чекбокс */
    onChange: (name: Array<string>, fieldName?: string) => void;
    /** Ширина label */
    labelWidth?: number;
    /** Имя поля, передается в onChange дополнительным аргументом */
    fieldName?: string;
}
export { LabelCheckboxSize, CheckboxItem, CheckboxProps, CheckboxGroupProps };
