{"version":3,"file":"index.js","sources":["../../../src/InputFile/MiddleOverflowText/index.tsx"],"sourcesContent":["import React, {\n  memo,\n  useEffect,\n  useRef,\n  useState\n} from 'react';\nimport { cssDecorator } from '@front-toolkit/utils';\nimport { FontColor, TextSize } from 'core/src/typography';\nimport { useFontColor } from 'core/shared/typographyHooks';\n\nimport overflowMiddleString from './utils';\n\nimport styles from './styles.scss';\n\nconst cd = cssDecorator(styles);\n\ninterface MiddleOverflowTextProps {\n  /** Текст */\n  value: string;\n\n  /** Размер текста */\n  size?: TextSize;\n\n  /** Цвет текста */\n  color?: FontColor | 'inherit';\n\n  /** ID для тестов */\n  dataTestId?: string;\n}\n\n/**\n * Текст, который при overflow добавляет точки не в конце, а в середине строки\n * !!! Если компонент используется без размонтирования, чтобы работало\n * !!! обновление текста, нужно установить key={value}\n * */\nfunction MiddleOverflowText({\n  value,\n  size = 'small',\n  dataTestId,\n  color = 'inherit'\n}: MiddleOverflowTextProps): JSX.Element {\n  const spanRef = useRef<HTMLSpanElement>(null);\n  const [text, setText] = useState(value);\n\n  const colorStyles = useFontColor(color);\n\n  useEffect(() => {\n    if (!spanRef || !spanRef.current) return;\n\n    const el = spanRef.current;\n\n    if (el.scrollWidth > el.clientWidth) {\n      /** Если произошло переполнение - обрезать текст */\n      const newText = overflowMiddleString(value, el.scrollWidth, el.clientWidth);\n      setText(newText);\n    }\n  }, [\n    spanRef,\n    spanRef.current?.clientWidth,\n    value]);\n\n  const textClasses = cd(\n    'text',\n    {\n      [`size_${ size }`]: true\n    },\n    [colorStyles]\n  );\n\n  return (\n    <span\n      ref={ spanRef }\n      className={ textClasses }\n      data-test-id={ dataTestId }\n    >\n      { text }\n    </span>\n  );\n}\n\nconst MemoMiddleOverflowText = memo(MiddleOverflowText);\nMemoMiddleOverflowText.displayName = 'MiddleOverflowText';\n\nexport default MemoMiddleOverflowText;\n"],"names":["cd","cssDecorator","styles","MemoMiddleOverflowText","memo","_a","value","_d","size","dataTestId","_e","color","spanRef","useRef","_f","useState","text","setText","colorStyles","useFontColor","useEffect","current","el","scrollWidth","clientWidth","newText","overflowMiddleString","textClasses","React","ref","className","displayName"],"mappings":"iWAcA,IAAMA,EAAKC,EAAaC,OAkElBC,EAAyBC,GA7C/B,SAA4BC,WAC1BC,UACAC,SAAAC,aAAO,UACPC,eACAC,UAAAC,aAAQ,YAEFC,EAAUC,EAAwB,MAClCC,EAAkBC,EAAST,GAA1BU,OAAMC,OAEPC,EAAcC,EAAaR,GAEjCS,GAAU,WACR,GAAKR,GAAYA,EAAQS,QAAzB,CAEA,IAAMC,EAAKV,EAAQS,QAEnB,GAAIC,EAAGC,YAAcD,EAAGE,YAAa,CAEnC,IAAMC,EAAUC,EAAqBpB,EAAOgB,EAAGC,YAAaD,EAAGE,aAC/DP,EAAQQ,OAET,CACDb,YACAA,EAAQS,8BAASG,YACjBlB,IAEF,IAAMqB,EAAc3B,EAClB,eAEG,QAASQ,IAAU,KAEtB,CAACU,IAGH,OACEU,wBACEC,IAAMjB,EACNkB,UAAYH,iBACGlB,GAEbO,EAGR,IAGAb,EAAuB4B,YAAc"}