{"version":3,"file":"useDropdownElementBehavior.js","sources":["../../../../hooks/useDropdownElementBehavior.ts"],"sourcesContent":["import React, {\n  CSSProperties,\n  useEffect,\n  useState,\n  useCallback\n} from 'react';\nimport { disableBodyScroll, clearAllBodyScrollLocks } from 'body-scroll-lock';\n\nconst useDropdownElementBehavior = (\n  /** Ссылка на родительский элемент */\n  targetRef: React.RefObject<HTMLElement>,\n\n  /** Ссылка на дочерний элемент */\n  childRef: React.RefObject<HTMLElement>,\n\n  /** Флаг отображения дочернего элемента поверх родительского  */\n  isOverlayTargetElement = false\n): { dropdownStyle: CSSProperties } => {\n  const [dropdownStyle, setDropdownStyle] = useState<CSSProperties>({});\n  // Флаг-состояние, обозначающее что родительский элемент/ты уже заблокировал/ли прокрутку\n  const [isBodyLocked, setBodyLocked] = useState(false);\n\n  const getDropdownStyle = useCallback(() => {\n    if (targetRef.current && childRef.current) {\n      const targetRectangle: DOMRect = targetRef.current?.getBoundingClientRect();\n      const childRectangle: DOMRect = childRef.current?.getBoundingClientRect();\n\n      const { width: childWidth } = childRectangle;\n\n      const {\n        width: targetWidthInPixels,\n        height: targetHeightInPixels,\n        top: targetTop,\n        left: targetLeft\n      } = targetRectangle;\n      const top = targetTop + (isOverlayTargetElement ? 0 : targetHeightInPixels);\n      const leftShift = (targetWidthInPixels - childWidth) / 2;\n\n      const nextStyle = { top, left: isOverlayTargetElement ? targetLeft : targetLeft + leftShift };\n\n      setDropdownStyle(nextStyle);\n    }\n  }, [\n    childRef,\n    targetRef,\n    isOverlayTargetElement\n  ]);\n\n  const onFocus = useCallback(event => {\n    if (document.body.style.getPropertyValue('overflow') === 'hidden') {\n      setBodyLocked(true);\n    } else {\n      disableBodyScroll(event.target);\n    }\n    getDropdownStyle();\n  }, [getDropdownStyle]);\n\n  const onBlur = useCallback(() => {\n    if (!isBodyLocked) {\n      clearAllBodyScrollLocks();\n    }\n  }, [isBodyLocked]);\n\n  useEffect(() => {\n    const targetElement = targetRef?.current;\n\n    if (targetElement) {\n      targetElement.addEventListener('focusin', onFocus);\n      targetElement.addEventListener('focusout', onBlur);\n    }\n\n    return (): void => {\n      targetElement?.removeEventListener('focusin', onFocus);\n      targetElement?.removeEventListener('focusout', onBlur);\n    };\n  }, [\n    targetRef,\n    childRef,\n    isOverlayTargetElement,\n    isBodyLocked,\n    onFocus,\n    onBlur\n  ]);\n\n  return { dropdownStyle };\n};\n\nexport default useDropdownElementBehavior;\n"],"names":["useDropdownElementBehavior","targetRef","childRef","isOverlayTargetElement","_a","useState","dropdownStyle","setDropdownStyle","_b","isBodyLocked","setBodyLocked","getDropdownStyle","useCallback","current","targetRectangle","getBoundingClientRect","childWidth","targetWidthInPixels","targetHeightInPixels","targetTop","targetLeft","top","left","onFocus","event","document","body","style","getPropertyValue","disableBodyScroll","target","onBlur","clearAllBodyScrollLocks","useEffect","targetElement","addEventListener","removeEventListener"],"mappings":"uJAQMA,EAA6B,SAEjCC,EAGAC,EAGAC,gBAAAA,MAEM,IAAAC,EAAoCC,EAAwB,IAA3DC,OAAeC,OAEhBC,EAAgCH,GAAS,GAAxCI,OAAcC,OAEfC,EAAmBC,GAAY,mBACnC,GAAIX,EAAUY,SAAWX,EAASW,QAAS,CACzC,IAAMC,YAA2Bb,EAAUY,8BAASE,wBAGrCC,aAFiBd,EAASW,8BAASE,+BAKzCE,EAILH,QAHMI,EAGNJ,SAFGK,EAEHL,MADIM,EACJN,OAMJP,EAFkB,CAAEc,IAHRF,GAAahB,EAAyB,EAAIe,GAG7BI,KAAMnB,EAAyBiB,EAAaA,GAFlDH,EAAsBD,GAAc,OAMxD,CACDd,EACAD,EACAE,IAGIoB,EAAUX,GAAY,SAAAY,GAC+B,WAArDC,SAASC,KAAKC,MAAMC,iBAAiB,YACvClB,GAAc,GAEdmB,EAAkBL,EAAMM,QAE1BnB,MACC,CAACA,IAEEoB,EAASnB,GAAY,WACpBH,GACHuB,MAED,CAACvB,IAuBJ,OArBAwB,GAAU,WACR,IAAMC,EAAgBjC,eAAAA,EAAWY,QAOjC,OALIqB,IACFA,EAAcC,iBAAiB,UAAWZ,GAC1CW,EAAcC,iBAAiB,WAAYJ,IAGtC,WACLG,SAAAA,EAAeE,oBAAoB,UAAWb,GAC9CW,SAAAA,EAAeE,oBAAoB,WAAYL,MAEhD,CACD9B,EACAC,EACAC,EACAM,EACAc,EACAQ,IAGK,CAAEzB,gBACX"}