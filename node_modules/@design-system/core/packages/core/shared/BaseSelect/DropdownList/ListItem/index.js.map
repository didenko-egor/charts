{"version":3,"file":"index.js","sources":["../../../../../../../shared/BaseSelect/DropdownList/ListItem/index.tsx"],"sourcesContent":["import React, { forwardRef } from 'react';\nimport { cssDecorator } from '@front-toolkit/utils';\nimport { IconOk } from 'core/src/icons';\nimport { BaseSelectItem, SelectSize } from 'core/types/select';\n\nimport styles from './styles.scss';\n\nconst cd = cssDecorator(styles);\n\nexport interface ListItemProps {\n  /** Массив элементов выпадающего списка */\n  item: BaseSelectItem & { onClick: () => void };\n\n  /** Value активного элемента из выпадающего списка */\n  activeValue?: string | string[];\n\n  /** Флаг открытия или закрытия выпадающего меню */\n  isOpenDropdown?: boolean;\n\n  /** Размер элементов выпадающего списка */\n  size?: SelectSize;\n\n  /** Data атрибут */\n  dataTestId?: string;\n}\n\nexport interface ListPlaceholderProps {\n  /** Размер элемента-заглушки списка */\n  size?: SelectSize;\n}\n\nconst onKeyPress = (event: React.KeyboardEvent<HTMLLIElement>): void => {\n  if (event.key === 'Enter') event.currentTarget.click();\n};\n\nexport const ListItem = forwardRef(({\n  item,\n  activeValue,\n  size,\n  dataTestId\n}: ListItemProps, ref: React.ForwardedRef<HTMLLIElement>) => {\n  const { disabled, value, onClick } = item;\n\n  return (\n    // eslint-disable-next-line jsx-a11y/no-noninteractive-element-interactions\n    <li\n      // При изменении тега заглянуть в компонент FixedDropDown (метод onFocusTracker)\n      tabIndex={ disabled ? -1 : 0 }\n      className={ cd('item', { disabled, small: size === 'small' }) }\n      onClick={ onClick }\n      onKeyPress={ onKeyPress }\n      data-test-id={ dataTestId }\n      ref={ ref }\n    >\n      { (Array.isArray(activeValue) ? activeValue?.includes(value) : activeValue === value) && (\n        <span className={ styles.item__icon }><IconOk /></span>\n      ) }\n      { /* replaceAll() для исправления отображения нескольких пробелов в HTML */ }\n      { item.label.replaceAll(' ', '\\u00a0') }\n    </li>\n  );\n});\n\nListItem.displayName = 'ListItem';\n\nexport const ListPlaceholder: React.FC<ListPlaceholderProps> = ({ size, children }) => (\n  <li className={ cd('placeholder', { small: size === 'small' }) } tabIndex={ -1 }>{ children }</li>\n);\n"],"names":["cd","cssDecorator","styles","onKeyPress","event","key","currentTarget","click","ListItem","forwardRef","_a","ref","item","activeValue","size","dataTestId","disabled","value","onClick","React","tabIndex","className","small","Array","isArray","includes","item__icon","IconOk","label","replaceAll","displayName","ListPlaceholder","children"],"mappings":"oLAOA,IAAMA,EAAKC,EAAaC,GAwBlBC,EAAa,SAACC,GACA,UAAdA,EAAMC,KAAiBD,EAAME,cAAcC,OACjD,EAEaC,EAAWC,GAAW,SAACC,EAKlBC,OAJhBC,SACAC,gBACAC,SACAC,eAEQC,EAA6BJ,WAAnBK,EAAmBL,QAAZM,EAAYN,UAErC,OAEEO,sBAEEC,SAAWJ,GAAY,EAAI,EAC3BK,UAAYrB,EAAG,OAAQ,CAAEgB,WAAUM,MAAgB,UAATR,IAC1CI,QAAUA,EACVf,WAAaA,iBACEY,EACfJ,IAAMA,IAEHY,MAAMC,QAAQX,GAAeA,eAAAA,EAAaY,SAASR,GAASJ,IAAgBI,IAC7EE,wBAAME,UAAYnB,EAAOwB,YAAaP,gBAACQ,SAGvCf,EAAKgB,MAAMC,WAAW,IAAK,KAGnC,IAEArB,EAASsB,YAAc,eAEVC,EAAkD,SAACrB,OAAEI,SAAMkB,aAAe,OACrFb,sBAAIE,UAAYrB,EAAG,cAAe,CAAEsB,MAAgB,UAATR,IAAsBM,UAAY,GAAMY,EADE"}