{"version":3,"file":"index.js","sources":["../../../../../../shared/PageCalendar/YearsPage/index.tsx"],"sourcesContent":["import React, { useMemo } from 'react';\n\nimport { SelectedDate, YearValue } from '../types';\nimport { NavHeader } from '../NavHeader';\nimport { YearsGrid } from './Grid';\nimport { yearDisabled } from './utils';\nimport { getToday } from '../utils';\n\nimport commonStyles from '../styles/common.scss';\n\nexport const START_YEAR_OFFSET = 4;\n\nexport interface YearsPageProps {\n  /** Год, который будет в середине страницы */\n  activeYear: number;\n\n  /** Выбранная дата */\n  selectedDate?: SelectedDate;\n\n  /** Минимальная дата */\n  minDate?: Date;\n\n  /** Максимальная дата */\n  maxDate?: Date;\n\n  /** Показать страницу месяцев для года */\n  onShowMonths?: (year: number) => void;\n\n  /** Показать предыдущую страницу лет */\n  onPrev?: VoidFunction;\n\n  /** Показать следующую страницу лет */\n  onNext?: VoidFunction;\n}\n\n/** Страница годов */\nexport function YearsPage({\n  activeYear,\n  selectedDate,\n  minDate,\n  maxDate,\n  onShowMonths,\n  onPrev,\n  onNext\n}: YearsPageProps): JSX.Element {\n  const years = useMemo(() => {\n    const today = getToday();\n\n    const result: YearValue[] = [];\n    for (let i = 0; i < 12; i += 1) {\n      const yearValue = activeYear - START_YEAR_OFFSET + i;\n      const year: YearValue = {\n        value: yearValue,\n        selected: yearValue === selectedDate?.from.getFullYear(),\n        disabled: yearDisabled(yearValue, minDate, maxDate),\n        today: yearValue === today.getFullYear()\n      };\n      result.push(year);\n    }\n\n    return result;\n  }, [\n    maxDate,\n    minDate,\n    selectedDate?.from,\n    activeYear\n  ]);\n\n  /** Текст заголовка страницы */\n  const text = `${ years[0].value }\\u2009\\u2013\\u2009${ years[years.length - 1].value }`;\n\n  return (\n    <div\n      className={ commonStyles['page-container'] }\n    >\n      <NavHeader\n        onNext={ onNext }\n        onPrev={ onPrev }\n      >\n        <div>{ text }</div>\n      </NavHeader>\n      <YearsGrid\n        items={ years }\n        onChange={ (y): void => {\n          if (onShowMonths) onShowMonths(y.value);\n        } }\n      />\n    </div>\n  );\n}\n"],"names":["START_YEAR_OFFSET","YearsPage","_a","activeYear","selectedDate","minDate","maxDate","onShowMonths","onPrev","onNext","years","useMemo","today","getToday","result","i","yearValue","year","value","selected","from","getFullYear","disabled","yearDisabled","push","text","length","React","className","commonStyles","NavHeader","YearsGrid","items","onChange","y"],"mappings":"8PAUaA,EAAoB,WA0BjBC,EAAUC,OACxBC,eACAC,iBACAC,YACAC,YACAC,iBACAC,WACAC,WAEMC,EAAQC,GAAQ,WAIpB,IAHA,IAAMC,EAAQC,IAERC,EAAsB,GACnBC,EAAI,EAAGA,EAAI,GAAIA,GAAK,EAAG,CAC9B,IAAMC,EAAYb,EAxCS,EAwCwBY,EAC7CE,EAAkB,CACtBC,MAAOF,EACPG,SAAUH,KAAcZ,eAAAA,EAAcgB,KAAKC,eAC3CC,SAAUC,EAAaP,EAAWX,EAASC,GAC3CM,MAAOI,IAAcJ,EAAMS,eAE7BP,EAAOU,KAAKP,GAGd,OAAOH,IACN,CACDR,EACAD,EACAD,eAAAA,EAAcgB,KACdjB,IAIIsB,EAAWf,EAAM,GAAGQ,YAA4BR,EAAMA,EAAMgB,OAAS,GAAGR,MAE9E,OACES,uBACEC,UAAYC,EAAa,mBAEzBF,gBAACG,GACCrB,OAASA,EACTD,OAASA,GAETmB,2BAAOF,IAETE,gBAACI,GACCC,MAAQtB,EACRuB,SAAW,SAACC,GACN3B,GAAcA,EAAa2B,EAAEhB,UAK3C"}