{"version":3,"file":"index.js","sources":["../../../../../../shared/PageCalendar/MonthsPage/index.tsx"],"sourcesContent":["import React from 'react';\nimport { cssDecorator } from '@front-toolkit/utils';\n\nimport { NavHeader } from '../NavHeader';\nimport { DEFAULT_LOCALE_OPTIONS, MonthValue, SelectedDate } from '../types';\nimport { MonthsGrid } from './Grid';\nimport { getToday } from '../utils';\nimport { monthsDisabled } from './utils';\n\nimport commonStyles from '../styles/common.scss';\n\nconst cdCommon = cssDecorator(commonStyles);\n\nexport interface MonthsPageProps {\n  /** Год */\n  activeYear: number;\n\n  /** Названия месяцев */\n  monthsNames?: string[];\n\n  /** Выбранная дата */\n  selectedDate?: SelectedDate;\n\n  /** Минимальная дата */\n  minDate?: Date;\n\n  /** Максимальная дата */\n  maxDate?: Date;\n\n  /** Показать страницу годов */\n  onShowYears?: (year: number) => void;\n\n  /** Показать страницу дней */\n  onShowDays?: (month: number, year: number) => void;\n\n  /** Перейти к следующему году */\n  onPrev?: VoidFunction;\n\n  /** Перейти к предыдущему году */\n  onNext?: VoidFunction;\n}\n\nexport function MonthsPage({\n  activeYear,\n  monthsNames = DEFAULT_LOCALE_OPTIONS.shortMonths,\n  selectedDate,\n  minDate,\n  maxDate,\n  onShowYears,\n  onShowDays,\n  onPrev,\n  onNext\n}: MonthsPageProps): JSX.Element {\n  const today = getToday();\n\n  const months: MonthValue[] = monthsNames.map((name, index) => ({\n    name,\n    value: index,\n    year: activeYear,\n    disabled: monthsDisabled(index, activeYear, minDate, maxDate),\n    selected:\n      selectedDate\n      && selectedDate.from.getFullYear() === activeYear\n      && selectedDate.from.getMonth() === index,\n    today:\n      today.getFullYear() === activeYear && today.getMonth() === index\n  }));\n\n  return (\n    <div\n      className={ commonStyles['page-container'] }\n    >\n      <NavHeader\n        onNext={ onNext }\n        onPrev={ onPrev }\n      >\n        <button\n          type=\"button\"\n          className={ cdCommon('header-item', {}, [commonStyles.button]) }\n          tabIndex={ -1 }\n          onClick={ (): void => {\n            if (onShowYears) onShowYears(months[0].year);\n          } }\n        >\n          { `${ months[0].year }` }\n        </button>\n      </NavHeader>\n      <MonthsGrid\n        items={ months }\n        onChange={ (m): void => {\n          if (onShowDays) onShowDays(m.value, m.year);\n        } }\n      />\n    </div>\n  );\n}\n"],"names":["cdCommon","cssDecorator","commonStyles","MonthsPage","_a","activeYear","_b","monthsNames","DEFAULT_LOCALE_OPTIONS","shortMonths","selectedDate","minDate","maxDate","onShowYears","onShowDays","onPrev","onNext","today","getToday","months","map","name","index","value","year","disabled","monthsDisabled","selected","from","getFullYear","getMonth","React","className","NavHeader","type","button","tabIndex","onClick","MonthsGrid","items","onChange","m"],"mappings":"wVAWA,IAAMA,EAAWC,EAAaC,YA+BdC,EAAWC,OACzBC,eACAC,gBAAAC,aAAcC,EAAuBC,cACrCC,iBACAC,YACAC,YACAC,gBACAC,eACAC,WACAC,WAEMC,EAAQC,IAERC,EAAuBZ,EAAYa,KAAI,SAACC,EAAMC,GAAU,OAC5DD,OACAE,MAAOD,EACPE,KAAMnB,EACNoB,SAAUC,EAAeJ,EAAOjB,EAAYM,EAASC,GACrDe,SACEjB,GACGA,EAAakB,KAAKC,gBAAkBxB,GACpCK,EAAakB,KAAKE,aAAeR,EACtCL,MACEA,EAAMY,gBAAkBxB,GAAcY,EAAMa,aAAeR,MAG/D,OACES,uBACEC,UAAY9B,EAAa,mBAEzB6B,gBAACE,GACCjB,OAASA,EACTD,OAASA,GAETgB,0BACEG,KAAK,SACLF,UAAYhC,EAAS,cAAe,GAAI,CAACE,EAAaiC,SACtDC,UAAY,EACZC,QAAU,WACJxB,GAAaA,EAAYM,EAAO,GAAGK,QAGvC,GAAIL,EAAO,GAAGK,OAGpBO,gBAACO,GACCC,MAAQpB,EACRqB,SAAW,SAACC,GACN3B,GAAYA,EAAW2B,EAAElB,MAAOkB,EAAEjB,SAKhD"}