{"version":3,"file":"helpers.js","sources":["../../../../../../shared/typographyHooks/color/helpers.ts"],"sourcesContent":["import {\n  BackgroundColor,\n  BackgroundColorAliases,\n  ColorBasic,\n  FontColor,\n  FontColorAliases\n} from 'core/types/common';\n\ntype InheritableFontColor = FontColor | 'inherit';\n\ntype AliasMap<T extends FontColorAliases | BackgroundColorAliases> = Record<T, ColorBasic>;\n\ntype GetByAlias<T extends InheritableFontColor | BackgroundColor | undefined> = (color?: T) => T;\n\n/** ▓▓▓▓▓ Color ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ */\n\n// в случае правок следить, чтобы алиасы в js совпадали с алиасами в css (ищи __colorAliasMap)\nconst colorAliasMap: AliasMap<FontColorAliases> = {\n  link_tass: 'tass',\n  text_primary: 'grey_90',\n  link_primary: 'grey_90',\n  primary: 'grey_90',\n  text_secondary: 'grey_54',\n  link_secondary: 'grey_54',\n  secondary: 'grey_54',\n  text_tertiary: 'grey_30',\n  tertiary: 'grey_30',\n  text_disabled: 'grey_20',\n  disabled: 'grey_20',\n  text_primary_inverse: 'primary_inverse'\n};\n\n/** Метод получения имени цвета текста:\n * если значение входит в набор алиасов, будет возвращено имя базового цвета алиаса;\n * если значения нет в наборе алиасов, будет возвращено оно само;\n * */\nexport const getColorNameByAlias: GetByAlias<InheritableFontColor> = color => (\n  colorAliasMap[color as FontColorAliases] ?? color ?? 'inherit'\n);\n\n/** ▓▓▓▓▓ BackgroundColor ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ */\n\n// в случае правок следить, чтобы алиасы в js совпадали с алиасами в css (ищи __colorAliasMap)\nconst backgroundColorAliasMap: AliasMap<BackgroundColorAliases> = {\n  background_tass: 'tass',\n  primary: 'grey_0',\n  background_primary: 'grey_0',\n  secondary: 'grey_5',\n  background_secondary: 'grey_5',\n  background_dark: 'tass_dark_40'\n};\n\n/** Метод получения имени цвета фона:\n * если значение входит в набор алиасов, будет возвращено имя базового цвета алиаса;\n * если значения нет в наборе алиасов, будет возвращено оно само;\n * */\nexport const getColorNameByBackgroundAlias: GetByAlias<BackgroundColor> = color => (\n  backgroundColorAliasMap[color as BackgroundColorAliases] ?? color\n);\n"],"names":["colorAliasMap","link_tass","text_primary","link_primary","primary","text_secondary","link_secondary","secondary","text_tertiary","tertiary","text_disabled","disabled","text_primary_inverse","getColorNameByAlias","color","backgroundColorAliasMap","background_tass","background_primary","background_secondary","background_dark","getColorNameByBackgroundAlias"],"mappings":"AAiBA,IAAMA,EAA4C,CAChDC,UAAW,OACXC,aAAc,UACdC,aAAc,UACdC,QAAS,UACTC,eAAgB,UAChBC,eAAgB,UAChBC,UAAW,UACXC,cAAe,UACfC,SAAU,UACVC,cAAe,UACfC,SAAU,UACVC,qBAAsB,mBAOXC,EAAwD,SAAAC,WAAS,2BAC5Ed,EAAcc,kBAA8BA,iBAAS,WAMjDC,EAA4D,CAChEC,gBAAiB,OACjBZ,QAAS,SACTa,mBAAoB,SACpBV,UAAW,SACXW,qBAAsB,SACtBC,gBAAiB,gBAONC,EAA6D,SAAAN,SAAS,iBACjFC,EAAwBD,kBAAoCA"}