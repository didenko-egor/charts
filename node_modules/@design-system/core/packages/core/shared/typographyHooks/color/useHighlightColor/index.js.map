{"version":3,"file":"index.js","sources":["../../../../../../../shared/typographyHooks/color/useHighlightColor/index.ts"],"sourcesContent":["import { CSSProperties } from 'react';\nimport { ColorBasic, HighLightColors } from 'core/types/common';\n\nimport { getColorNameByBackgroundAlias } from '../helpers';\n\ntype SupportedColorNames = ColorBasic & HighLightColors;\n\n// Важно использовать мапу - при добавлении значений в SupportedColorNames TS напомнит добавить их и сюда.\nconst COLOR_NAME_TO_BACKGROUND: { [key in SupportedColorNames]: string } = {\n  tass_dark_30: '',\n  tass_dark_40: '',\n  tass_dark_50: '',\n  tass_dark_60: '',\n  tass_dark_70: '',\n  tass_dark_80: '',\n  tass_dark_90: '',\n  tass: '',\n  tass_light_87: '',\n  tass_light_85: '',\n  tass_light_70: '',\n  tass_light_60: '',\n  tass_light_55: '',\n  tass_light_50: '',\n  tass_light_40: '',\n  tass_light_35: '',\n  tass_light_30: '',\n  tass_light_20: '',\n  tass_light_10: '',\n  tass_light_5: '',\n  grey_100: '',\n  grey_90: '',\n  grey_80: '',\n  grey_70: '',\n  grey_60: '',\n  grey_54: '',\n  grey_50: '',\n  grey_40: '',\n  grey_30: '',\n  grey_25: '',\n  grey_20: '',\n  grey_15: '',\n  grey_10: '',\n  grey_5: '',\n  grey_3: '',\n  grey_0: '',\n  negative_dark: '',\n  negative_light: '',\n  positive_dark: '',\n  positive_light: '',\n  notification_dark: '',\n  notification_light: '',\n  primary_inverse: ''\n};\n\n// заполнение хэш-мапы готовыми значениями с требуемым значением background\n(Object.keys(COLOR_NAME_TO_BACKGROUND) as SupportedColorNames[]).forEach(colorName => {\n  COLOR_NAME_TO_BACKGROUND[colorName] = `var(--ds-color-${ colorName.replace(/_/g, '-') })`;\n});\n\n/** Хук для добавления фона\n * При получении валидного цвета возвращает style с обновленным backgroundColor\n * При получении невалидного цвета возвращает style без изменений\n * Если аргумент style имеет falsy значение, создает новый style с заданным backgroundColor\n * */\nexport const useHighlightColor = (color?: HighLightColors, style?: CSSProperties): CSSProperties | undefined => {\n  const colorName = getColorNameByBackgroundAlias(color) as SupportedColorNames;\n  const backgroundColor = COLOR_NAME_TO_BACKGROUND[colorName];\n\n  if (backgroundColor) {\n    return Object.assign(style || {}, { backgroundColor });\n  }\n\n  return style;\n};\n\nexport default useHighlightColor;\n"],"names":["COLOR_NAME_TO_BACKGROUND","tass_dark_30","tass_dark_40","tass_dark_50","tass_dark_60","tass_dark_70","tass_dark_80","tass_dark_90","tass","tass_light_87","tass_light_85","tass_light_70","tass_light_60","tass_light_55","tass_light_50","tass_light_40","tass_light_35","tass_light_30","tass_light_20","tass_light_10","tass_light_5","grey_100","grey_90","grey_80","grey_70","grey_60","grey_54","grey_50","grey_40","grey_30","grey_25","grey_20","grey_15","grey_10","grey_5","grey_3","grey_0","negative_dark","negative_light","positive_dark","positive_light","notification_dark","notification_light","primary_inverse","Object","keys","forEach","colorName","replace","useHighlightColor","color","style","getColorNameByBackgroundAlias","backgroundColor","assign"],"mappings":"8DAQA,IAAMA,EAAqE,CACzEC,aAAc,GACdC,aAAc,GACdC,aAAc,GACdC,aAAc,GACdC,aAAc,GACdC,aAAc,GACdC,aAAc,GACdC,KAAM,GACNC,cAAe,GACfC,cAAe,GACfC,cAAe,GACfC,cAAe,GACfC,cAAe,GACfC,cAAe,GACfC,cAAe,GACfC,cAAe,GACfC,cAAe,GACfC,cAAe,GACfC,cAAe,GACfC,aAAc,GACdC,SAAU,GACVC,QAAS,GACTC,QAAS,GACTC,QAAS,GACTC,QAAS,GACTC,QAAS,GACTC,QAAS,GACTC,QAAS,GACTC,QAAS,GACTC,QAAS,GACTC,QAAS,GACTC,QAAS,GACTC,QAAS,GACTC,OAAQ,GACRC,OAAQ,GACRC,OAAQ,GACRC,cAAe,GACfC,eAAgB,GAChBC,cAAe,GACfC,eAAgB,GAChBC,kBAAmB,GACnBC,mBAAoB,GACpBC,gBAAiB,IAIlBC,OAAOC,KAAK7C,GAAoD8C,SAAQ,SAAAC,GACvE/C,EAAyB+C,GAAa,kBAAmBA,EAAUC,QAAQ,KAAM,QACnF,QAOaC,EAAoB,SAACC,EAAyBC,GACzD,IAAMJ,EAAYK,EAA8BF,GAC1CG,EAAkBrD,EAAyB+C,GAEjD,OAAIM,EACKT,OAAOU,OAAOH,GAAS,GAAI,CAAEE,oBAG/BF,CACT"}