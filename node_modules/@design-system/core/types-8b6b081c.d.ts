/// <reference types="react" />
import { FormSize } from "./types-35606b29";
import { CalendarProps } from "./calendar-34bfb291";
type FilterOnChange = (changedActiveItems: FilterBaseItem[]) => void;
type FilterType = 'checkbox' | 'radio' | 'date-range';
interface FilterBaseConfig {
    /** Тип фильтра для выбора компонента в группе */
    type: 'checkbox' | 'radio';
    /** Заголовок фильтра */
    title: string;
    /** Массив элементов фильтра */
    items: FilterBaseItem[];
    /** Префикс для отображения в метках */
    prefix?: string;
    /** Опции для отображения фильтра */
    options?: {
        async?: boolean;
    };
}
type FilterDateRangeConfig = Omit<FilterBaseConfig, 'type' | 'items' | 'options'> & {
    /** Тип фильтра для выбора компонента в группе */
    type: 'date-range';
    /** Массив элементов фильтра */
    items: FilterDateRangeItem[];
    options?: DateRangeOptions;
};
type FilterCheckboxConfig = Omit<FilterBaseConfig, 'type' | 'items'> & {
    /** Тип фильтра для выбора компонента в группе */
    type: 'checkbox';
    /** Массив элементов фильтра */
    items: FilterCheckboxItem[];
};
interface FilterBaseItem {
    /** Уникальное значение элемента фильтра */
    value: string;
    /** Отображаемый лейбл элемента фильтра */
    label: string;
    /** Уникальный идентификатор фильтра, к которому относится элемент */
    filterId?: string | number;
}
type FilterDateRangeItem = FilterBaseItem & {
    range: DateItemRange;
};
type FilterCheckboxItem = FilterBaseItem & {
    /** Название группы для группировки вариантов фильтрации */
    itemGroup?: string;
};
type FilterItem = FilterBaseItem | FilterDateRangeItem | FilterCheckboxItem;
type FilterWrapperProps = {
    /** Название фильтра */
    title: string;
    /** Возможность отдельно установить текст на кнопке фильтра */
    buttonTitle?: string;
    /** Задать специальный текст на кнопке сброса */
    textOnClearButton?: string;
    /** Изменить стандартную иконку на кнопке фильтра */
    customIcon?: JSX.Element;
    /** Расположить иконку слева от текста на кнопке */
    iconLeft?: boolean;
    /** Закрыть фильтр при нажатии на его кнопке? */
    closeOnButtonClick?: boolean;
    /** Внешнее управление видимостью кнопки сброса фильтров */
    allowClearAllAction?: boolean;
    /** Закрывать фильтр при нажатии на кнопке сброса? По умолчанию - true */
    autoCloseOnClearAll?: boolean;
    /** Сделать фильтр неактивным */
    disabled?: boolean;
    /** Флаг (опциональный), если необходимо управлять состоянием выпадающего окна из родителя) true/false,
     * выпадающее окно фильтра открыть/закрыть (например в группе фильтров) */
    isOpen?: boolean;
    /** Скрыть шапку  */
    isHiddenHeader?: boolean;
    /** Количество выбранных элементов фильтра (целое число >= 0) */
    activeCount: number;
    /** z-index выпадающего окна (по умолчанию - 2) */
    zIndex?: number;
    /** Параметры обертки группы фильтров */
    groupWrapperParams?: GroupWrapperParams;
    /** id кнопки открытия для теста */
    dataTestOpenBtnId?: string;
    /** ref элемента при сролле до которого вызывается колбэк onScrolledToEnd */
    loadMoreTriggerElement?: HTMLDivElement | null;
    /** Колбэк скролле до конца списка элементов */
    onScrolledToEnd?: VoidFunction;
    /** Колбэк при открытии/закрытии выпадающего окна фильтра */
    onOpenStatusChange?: (value: boolean) => void;
    /** Колбэк при нажатии кнопки "Сбросить" */
    onClearAll?: VoidFunction;
    /** Колбэк при изменении положения кнопки открытия фильтра относительно вьюпорта */
    onOpenBtnPositionChange?: (value: OpenBtnPosition) => void;
};
/** Информация о позиции кнопки открытия фильтра относительно вьюпорта */
interface OpenBtnPosition {
    bottom: string | number;
    right: string | number;
}
interface GroupWrapperParams {
    /** Идентификатор текущего открытого фильтра в группе */
    currentFilterId: string | number | null;
}
interface GroupItemParams {
    /** Флаг true, если текущий фильтр открыт в группе */
    isCurrentFilter: boolean;
    /** Выбранные элементы текущего фильтра */
    activeCurrentItems: FilterItem[];
    /** Данные по позиции кнопки открытия группы фильтров относительно вьюпорта */
    openBtnPosition?: OpenBtnPosition;
    /** Колбэк при нажатии кнопки "<" (назад) текущего фильтра */
    onBackBtnClick: VoidFunction;
    /** Колбэк при нажатии на кнопку ">" (вперед) текущего фильтра */
    onForwardButtonClick: VoidFunction;
}
type FilterBaseProps = Pick<FilterWrapperProps, 'isOpen' | 'isHiddenHeader' | 'onOpenStatusChange' | 'zIndex' | 'disabled'> & {
    /** Конфиг фильтра */
    config: FilterBaseConfig;
    /** Массив выбранных элементов фильтра */
    activeItems: FilterBaseItem[];
    /** Колбэк при изменении выбранных элементов
       * (в качестве аргумента принимает обновленный массив выбранных элементов) */
    onChange: FilterOnChange;
};
type FilterDateRangeProps = Omit<FilterBaseProps, 'config' | 'activeItems' | 'onChange'> & {
    /** Конфиг фильтра */
    config: FilterDateRangeConfig;
    /** Массив выбранных элементов фильтра */
    activeItems: FilterDateRangeItem[];
    /** Колбэк при изменении выбранных элементов
     * (в качестве аргумента принимает обновленный массив выбранных элементов) */
    onChange: (changedActiveItems: FilterDateRangeItem[]) => void;
};
type FilterCheckboxProps = Omit<FilterBaseProps, 'config' | 'activeItems' | 'onChange'> & {
    /** Конфиг фильтра */
    config: FilterCheckboxConfig;
    /** Массив выбранных элементов фильтра */
    activeItems: FilterCheckboxItem[];
    /** Колбэк при изменении выбранных элементов
     * (в качестве аргумента принимает обновленный массив выбранных элементов) */
    onChange: (changedActiveItems: FilterCheckboxItem[]) => void;
    /** Флаг отображения поисковой строки */
    withSearch?: boolean;
};
/**
 * Описание свойств для начального и конечного выбора даты
 */
interface DateRangeCalendarOptions {
    start: CalendarProps;
    end: CalendarProps;
}
interface DateRangeOptions {
    /** Настройки для календаря. Настройки для начального и конечного выбора даты описаны раздельно */
    calendar?: DateRangeCalendarOptions;
    /** Размер отображаемых элементов: small | default */
    size?: FormSize;
}
/**
 * Структура для работы с выбором диапазона даты
 */
interface DateItemRange {
    /** Свойства начального диапазона */
    start: {
        /** Отображаемый лейбл для выбора начало диапазона */
        displayName: string;
        /** Выбранная дата для начало диапазона. Используется в массиве выбранных элементов */
        value?: Date | string;
    };
    /** Свойства конечного диапазона */
    end: {
        /** Отображаемый лейбл для выбора конца диапазона */
        displayName: string;
        /** Выбранная дата для конца диапазона. Используется в массиве выбранных элементов */
        value?: Date | string;
    };
}
type FilterProps = FilterBaseProps | FilterDateRangeProps | FilterCheckboxProps;
type FilterConfig = FilterBaseConfig | FilterDateRangeConfig | FilterCheckboxConfig;
export { FilterOnChange, FilterType, FilterBaseConfig, FilterDateRangeConfig, FilterCheckboxConfig, FilterBaseItem, FilterDateRangeItem, FilterCheckboxItem, FilterItem, FilterWrapperProps, OpenBtnPosition, GroupWrapperParams, GroupItemParams, FilterBaseProps, FilterDateRangeProps, FilterCheckboxProps, DateRangeCalendarOptions, DateRangeOptions, DateItemRange, FilterProps, FilterConfig };
