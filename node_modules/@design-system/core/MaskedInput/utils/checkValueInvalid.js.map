{"version":3,"file":"checkValueInvalid.js","sources":["../../../src/MaskedInput/utils/checkValueInvalid.ts"],"sourcesContent":["import { checkDateInvalid } from './checkDateInvalid';\nimport { checkTimeInvalid } from './checkTimeInvalid';\nimport { isDateFormat, isTimeFormat } from '../predicates';\nimport { ValidateFormat } from '../types';\n\n/**\n * Функция-контроллер, в зависимости от перденного формата выбирает нужную функцию для валидации\n * @param {string} value строка для валидации\n * @param {ValidateFormat | undefined} format формат, которому должна соответствовать переданная строка\n * @returns результат вызова функций для валидации, либо не валидирует переданное значение (возвращает \"false\"),\n * если в неё не передан формат, либо он не был распознан как допустимый\n */\nconst checkValueInvalid = (value: string, format?: ValidateFormat): boolean => {\n  if (!format) return false;\n\n  if (isDateFormat(format)) {\n    return checkDateInvalid(value, format);\n  }\n\n  if (isTimeFormat(format)) {\n    return checkTimeInvalid(value, format);\n  }\n\n  return false;\n};\n\nexport default checkValueInvalid;\n"],"names":["checkValueInvalid","value","format","isDateFormat","checkDateInvalid","isTimeFormat","checkTimeInvalid"],"mappings":"wLAYMA,EAAoB,SAACC,EAAeC,GACxC,QAAKA,IAEDC,EAAaD,GACRE,EAAiBH,EAAOC,KAG7BG,EAAaH,IACRI,EAAiBL,EAAOC,GAInC"}