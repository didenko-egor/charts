{"version":3,"file":"formatValueByMask.js","sources":["../../../src/MaskedInput/utils/formatValueByMask.ts"],"sourcesContent":["/** Подставляет значения из переданной строки в позиции для значащих символов маски\n * @param {string} value строка для преобразования\n * @param {string} mask маска, в который символы \"#\" - это те, вместо которых будут подставляться значения из \"value\"\n * @returns {string} преобразованная к маске строка\n */\nconst formatValueByMask = (value: string, mask: string): string => {\n  let i = 0; // текущая позиция\n  let lastReplacedIndex = -1;\n\n  // '#' - символ в маске, вместо которого будут подставляться значения из 'value'\n  const formattedValue = mask.replace(/#/g, (_, offset) => {\n    // Если маска длиннее, чем переданная для преобразования строка, возвращаем символ '#' без изменения\n    if (i >= value.length) {\n      return '#';\n    }\n\n    lastReplacedIndex = offset;\n\n    const replacedValue = value[i];\n\n    i += 1;\n\n    return replacedValue;\n  });\n\n  return formattedValue.slice(0, lastReplacedIndex + 1);\n};\n\nexport default formatValueByMask;\n"],"names":["formatValueByMask","value","mask","i","lastReplacedIndex","replace","_","offset","length","replacedValue","slice"],"mappings":"IAKMA,EAAoB,SAACC,EAAeC,GACxC,IAAIC,EAAI,EACJC,GAAqB,EAkBzB,OAfuBF,EAAKG,QAAQ,MAAM,SAACC,EAAGC,GAE5C,GAAIJ,GAAKF,EAAMO,OACb,MAAO,IAGTJ,EAAoBG,EAEpB,IAAME,EAAgBR,EAAME,GAI5B,OAFAA,GAAK,EAEEM,KAGaC,MAAM,EAAGN,EAAoB,EACrD"}