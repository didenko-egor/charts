{"version":3,"file":"index.js","sources":["../../src/AsyncSelect/index.tsx"],"sourcesContent":["import React, {\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState\n} from 'react';\nimport debounce from 'lodash.debounce';\nimport { BaseSelect, InputLabel, InputHint } from 'core/shared';\nimport { BaseSelectItem, AsyncSelectProps } from 'core/types/select';\nimport { BaseInput } from 'shared/BaseInput';\nimport { useFormContext } from 'shared/Form/formContext';\nimport getLabelColor from 'core/utils/getLabelColor';\n\nimport { IconChevronDown, IconSearch } from 'core/src/icons';\n\nimport inputStyles from 'shared/BaseInput/coreStyles.scss';\nimport iconsStyles from 'shared/BaseInput/WithIcons/coreStyles.scss';\n\nconst emptyWrapperStyles = {};\n\nconst AsyncSelect = ({\n  id,\n  items,\n  label,\n  placeholder = '',\n  disabled,\n  isError,\n  showHint,\n  hintMessage,\n  onChange = (): void => undefined,\n  labelAside,\n  activeValue,\n  size = 'default',\n  dataTestId = 'select_input_id',\n  onAsyncChange,\n  labelWidth,\n  fixedModeID,\n  fieldName,\n  inputOnKeyPress,\n  itemDataTestId,\n  hasMoreData,\n  onLoadMoreData,\n  debounceTime = 700,\n  callAsyncChangeOnFocus\n}: AsyncSelectProps): JSX.Element => {\n  const { LABEL_WIDTH, LABEL_ASIDE, SIZE } = useFormContext({ labelWidth, labelAside, size });\n  const [isOpenDropdown, setIsOpenDropdown] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [inputValue, setInputValue] = useState('');\n  const [isFocus, setIsFocus] = useState(false);\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  /** Получаем лэйбл активного элемента\n   * Добавлен метод trim() т.к. есть кейс при котором элементы могут иметь древовидную структуру\n   * путем добавления отступов с помощью символа неразрывного пробела \\u00A0,\n   * но в инпуте эти отступы не нужны\n   */\n  const activeLabel = useMemo(\n    () => items?.find((item: BaseSelectItem) => item.value === activeValue)?.label?.trim(),\n    [activeValue, items]\n  );\n\n  const handleItemClick = useCallback((value: string): void => {\n    onChange(value, fieldName);\n    setIsOpenDropdown(false);\n  }, [fieldName, onChange]);\n\n  // Обертка для получения данных (с debounce)\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const handleFetchData = useCallback(\n    debounce((value): void => {\n      onAsyncChange(value);\n    }, debounceTime),\n    [debounceTime, onAsyncChange]\n  );\n\n  const handleInputKeyPress = useCallback((event: React.KeyboardEvent): void => {\n    if (event.key === 'Enter' && inputValue) {\n      handleFetchData.cancel();\n      onAsyncChange(inputValue);\n    }\n\n    if (inputOnKeyPress) {\n      inputOnKeyPress(event);\n    }\n  }, [\n    inputOnKeyPress,\n    inputValue,\n    onAsyncChange,\n    handleFetchData\n  ]);\n\n  const handleInputChange = useCallback((value: string): void => {\n    setIsOpenDropdown(true);\n    setIsLoading(true);\n    setInputValue(value);\n    handleFetchData(value);\n\n    if (value) return;\n\n    if (activeLabel) {\n      onChange(undefined, fieldName);\n    }\n\n    if (!callAsyncChangeOnFocus) {\n      handleFetchData.cancel();\n      setIsOpenDropdown(false);\n    }\n  }, [\n    activeLabel,\n    callAsyncChangeOnFocus,\n    fieldName,\n    onChange,\n    handleFetchData\n  ]);\n\n  const handleInputBlur = useCallback(() => {\n    setIsFocus(false);\n  }, []);\n\n  const handleClickOutside = useCallback((): void => {\n    if (activeLabel) {\n      setInputValue(activeLabel);\n    }\n\n    setIsOpenDropdown(false);\n    handleInputBlur();\n  }, [activeLabel, handleInputBlur]);\n\n  const handleOpenDropDown = useCallback(() => setIsOpenDropdown(true), []);\n\n  const handleOpenDropdownOnClick = useCallback(() => {\n    inputRef.current?.focus();\n    setIsFocus(true);\n\n    if (callAsyncChangeOnFocus) {\n      handleInputChange(inputValue ?? '');\n      handleOpenDropDown();\n    } else if (items.length) {\n      setIsLoading(false);\n      handleOpenDropDown();\n    }\n  }, [\n    callAsyncChangeOnFocus,\n    items.length,\n    handleInputChange,\n    inputValue,\n    handleOpenDropDown\n  ]);\n\n  const handleLoadMoreData = useCallback(() => {\n    if (hasMoreData && onLoadMoreData) onLoadMoreData();\n  }, [hasMoreData, onLoadMoreData]);\n\n  useEffect(() => {\n    setIsLoading(false);\n  }, [items]);\n\n  useEffect(() => {\n    if (activeLabel) {\n      setInputValue(activeLabel);\n    }\n  }, [activeLabel]);\n\n  const inputIcon = useMemo(() => [\n    {\n      icon: isFocus ? <IconSearch /> : <IconChevronDown />,\n      onClick: handleOpenDropdownOnClick\n    }\n  ], [isFocus, handleOpenDropdownOnClick]);\n\n  const renderedLabel = label\n    ? (\n      <InputLabel\n        color={ getLabelColor(disabled) }\n        text={ label }\n        size={ SIZE }\n        htmlFor={ id }\n      />\n    )\n    : null;\n\n  const renderedHint = showHint\n    ? (\n      <InputHint\n        disabled={ disabled }\n        isError={ isError }\n        hintMessage={ hintMessage }\n      />\n    )\n    : null;\n\n  return (\n    <BaseSelect\n      size={ SIZE }\n      disabled={ disabled }\n      labelAside={ LABEL_ASIDE }\n      label={ renderedLabel }\n      hint={ renderedHint }\n      showHint={ showHint }\n      isError={ isError }\n      items={ items }\n      isOpenDropdown={ isOpenDropdown }\n      activeValue={ activeValue }\n      isLoading={ isLoading }\n      dataTestId={ dataTestId }\n      onItemClick={ handleItemClick }\n      onCloseDropdown={ handleClickOutside }\n      labelWidth={ LABEL_WIDTH }\n      fixedModeID={ fixedModeID }\n      itemDataTestId={ itemDataTestId }\n      onLoadMoreData={ handleLoadMoreData }\n    >\n      <BaseInput\n        id={ id }\n        inputRef={ inputRef }\n        value={ inputValue }\n        placeholder={ placeholder }\n        size={ SIZE }\n        icons={ inputIcon }\n        styles={ inputStyles }\n        isError={ isError }\n        disabled={ disabled }\n        wrapperStyles={ emptyWrapperStyles }\n        iconsStyles={ iconsStyles }\n        onChange={ handleInputChange }\n        onKeyPress={ handleInputKeyPress }\n        onFocus={ handleOpenDropdownOnClick }\n        onBlur={ handleInputBlur }\n      />\n    </BaseSelect>\n  );\n};\n\nexport { AsyncSelect };\n"],"names":["emptyWrapperStyles","AsyncSelect","_a","id","items","label","_b","placeholder","disabled","isError","showHint","hintMessage","_c","onChange","labelAside","activeValue","_d","size","_e","dataTestId","onAsyncChange","labelWidth","fixedModeID","fieldName","inputOnKeyPress","itemDataTestId","hasMoreData","onLoadMoreData","_f","debounceTime","callAsyncChangeOnFocus","_g","useFormContext","LABEL_WIDTH","LABEL_ASIDE","SIZE","_h","useState","isOpenDropdown","setIsOpenDropdown","_j","isLoading","setIsLoading","_k","inputValue","setInputValue","_l","isFocus","setIsFocus","inputRef","useRef","activeLabel","useMemo","find","item","value","trim","handleItemClick","useCallback","handleFetchData","debounce","handleInputKeyPress","event","key","cancel","handleInputChange","undefined","handleInputBlur","handleClickOutside","handleOpenDropDown","handleOpenDropdownOnClick","current","focus","length","handleLoadMoreData","useEffect","inputIcon","icon","React","IconSearch","IconChevronDown","onClick","renderedLabel","InputLabel","color","getLabelColor","text","htmlFor","renderedHint","InputHint","BaseSelect","hint","onItemClick","onCloseDropdown","BaseInput","icons","styles","inputStyles","wrapperStyles","iconsStyles","onKeyPress","onFocus","onBlur"],"mappings":"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"}