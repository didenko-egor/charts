{"version":3,"file":"index.js","sources":["../../src/Breadcrumbs/index.tsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport { CollapsedBreadcrumbs } from 'core/src/Breadcrumbs/CollapsedBreadcrumbs';\nimport BreadcrumbItem from 'core/src/Breadcrumbs/BreadcrumbItem';\nimport { getBreadcrumbsArray, getStrWidth } from './utils';\nimport { BreadcrumbsProps, ICrumb } from './types';\n\nimport styles from './styles.scss';\n\nexport const Breadcrumbs = (({\n  breadcrumbs = [],\n  onlyPath = false,\n  color = 'text_primary',\n  size = 'default',\n  highlightActive = false,\n  dataTestId,\n  renderCrumbLink\n}: BreadcrumbsProps): JSX.Element => {\n  const [removedBreadcrumbs, setRemovedBreadcrumbs] = useState<ICrumb[]>([]);\n  const [crumbs, setCrumbs] = useState<ICrumb[]>([]);\n  const breadcrumbRef = useRef<HTMLOListElement>(null);\n\n  useEffect(() => {\n    const handleResize = (): void => {\n      if (!breadcrumbRef.current) return;\n\n      const totalWidth = getStrWidth(breadcrumbs, size);\n      const breadcrumbsList = breadcrumbRef.current;\n      const breadcrumbsWidth = breadcrumbsList.clientWidth;\n\n      if (totalWidth > breadcrumbsWidth) {\n        const newVisibleBreadcrumbs = [...breadcrumbs];\n        const newRemovedBreadcrumbs: ICrumb[] = [];\n\n        while (getStrWidth(newVisibleBreadcrumbs, size) > breadcrumbsWidth && newVisibleBreadcrumbs.length > 1) {\n          if (newVisibleBreadcrumbs.length === 2) {\n            const removedBreadcrumb = newVisibleBreadcrumbs.splice(0, 1)[0];\n            newRemovedBreadcrumbs.unshift(removedBreadcrumb);\n          } else {\n            const removedBreadcrumb = newVisibleBreadcrumbs.splice(1, 1)[0];\n            newRemovedBreadcrumbs.push(removedBreadcrumb);\n          }\n        }\n        setRemovedBreadcrumbs(newRemovedBreadcrumbs);\n        setCrumbs(getBreadcrumbsArray(newVisibleBreadcrumbs, false));\n      } else {\n        setRemovedBreadcrumbs([]);\n        setCrumbs(getBreadcrumbsArray(breadcrumbs, true));\n      }\n    };\n\n    handleResize();\n\n    window.addEventListener('resize', handleResize);\n\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  }, [breadcrumbs, size]);\n\n  const renderBreadCrumbsArray = (normalBreadcrumbs: ICrumb[]): JSX.Element => (\n    <>\n      { normalBreadcrumbs.map((crumb, index) => {\n        if (crumb?.isCollapsed) {\n          return (\n            <BreadcrumbItem key={ crumb.title } isCollapsed renderCrumbLink={ renderCrumbLink }>\n              <CollapsedBreadcrumbs\n                breadcrumbs={ removedBreadcrumbs }\n                onlyPath={ onlyPath }\n                renderCrumbLink={ renderCrumbLink }\n                size={ size }\n                color={ color }\n              />\n            </BreadcrumbItem>\n          );\n        }\n\n        return (\n          <BreadcrumbItem\n            active={ index === normalBreadcrumbs.length - 1 }\n            href={ crumb.fullPath }\n            color={ color }\n            size={ size }\n            withUnderline={ !onlyPath }\n            onClick={ crumb?.onClick }\n            key={ crumb.title }\n            overflow={ index === normalBreadcrumbs.length - 1 }\n            highlightActive={ highlightActive }\n            renderCrumbLink={ renderCrumbLink }\n          >\n            { crumb?.title }\n          </BreadcrumbItem>\n        );\n      }) }\n    </>\n  );\n\n  return (\n    <nav aria-label=\"breadcrumb\" className={ styles.container }>\n      <ol\n        className={ styles.breadcrumbs }\n        ref={ breadcrumbRef }\n        data-test-id={ dataTestId }\n      >\n        { crumbs.length > 0 && (\n          renderBreadCrumbsArray(crumbs)\n        ) }\n      </ol>\n    </nav>\n  );\n});\n"],"names":["Breadcrumbs","_a","_b","breadcrumbs","_c","onlyPath","_d","color","_e","size","_f","highlightActive","dataTestId","renderCrumbLink","_g","useState","removedBreadcrumbs","setRemovedBreadcrumbs","_h","crumbs","setCrumbs","breadcrumbRef","useRef","useEffect","handleResize","current","totalWidth","getStrWidth","breadcrumbsWidth","clientWidth","newVisibleBreadcrumbs","newRemovedBreadcrumbs","length","removedBreadcrumb","splice","unshift","push","getBreadcrumbsArray","window","addEventListener","removeEventListener","normalBreadcrumbs","React","className","styles","container","ref","map","crumb","index","isCollapsed","BreadcrumbItem","key","title","CollapsedBreadcrumbs","active","href","fullPath","withUnderline","onClick","overflow"],"mappings":"+SAQaA,WAAgBC,OAC3BC,gBAAAC,aAAc,KACdC,aAAAC,gBACAC,UAAAC,aAAQ,iBACRC,SAAAC,aAAO,YACPC,oBAAAC,gBACAC,eACAC,oBAEMC,EAA8CC,EAAmB,IAAhEC,OAAoBC,OACrBC,EAAsBH,EAAmB,IAAxCI,OAAQC,OACTC,EAAgBC,EAAyB,MAE/CC,GAAU,WACR,IAAMC,EAAe,WACnB,GAAKH,EAAcI,QAAnB,CAEA,IAAMC,EAAaC,EAAYxB,EAAaM,GAEtCmB,EADkBP,EAAcI,QACGI,YAEzC,GAAIH,EAAaE,EAAkB,CAIjC,IAHA,IAAME,OAA4B3B,MAC5B4B,EAAkC,GAEjCJ,EAAYG,EAAuBrB,GAAQmB,GAAoBE,EAAsBE,OAAS,GACnG,GAAqC,IAAjCF,EAAsBE,OAAc,CACtC,IAAMC,EAAoBH,EAAsBI,OAAO,EAAG,GAAG,GAC7DH,EAAsBI,QAAQF,OACzB,CACCA,EAAoBH,EAAsBI,OAAO,EAAG,GAAG,GAC7DH,EAAsBK,KAAKH,GAG/BhB,EAAsBc,GACtBX,EAAUiB,EAAoBP,GAAuB,SAErDb,EAAsB,IACtBG,EAAUiB,EAAoBlC,GAAa,MAQ/C,OAJAqB,IAEAc,OAAOC,iBAAiB,SAAUf,GAE3B,WACLc,OAAOE,oBAAoB,SAAUhB,MAEtC,CAACrB,EAAaM,IAEjB,IAAgCgC,EAqChC,OACEC,oCAAgB,aAAaC,UAAYC,EAAOC,WAC9CH,sBACEC,UAAYC,EAAOzC,YACnB2C,IAAMzB,iBACST,GAEbO,EAAOa,OAAS,IA5CQS,EA6CDtB,EA5C7BuB,gCACID,EAAkBM,KAAI,SAACC,EAAOC,GAC9B,OAAID,eAAAA,EAAOE,aAEPR,gBAACS,GAAeC,IAAMJ,EAAMK,MAAQH,eAAYrC,gBAAkBA,GAChE6B,gBAACY,GACCnD,YAAca,EACdX,SAAWA,EACXQ,gBAAkBA,EAClBJ,KAAOA,EACPF,MAAQA,KAOdmC,gBAACS,GACCI,OAASN,IAAUR,EAAkBT,OAAS,EAC9CwB,KAAOR,EAAMS,SACblD,MAAQA,EACRE,KAAOA,EACPiD,eAAiBrD,EACjBsD,QAAUX,eAAAA,EAAOW,QACjBP,IAAMJ,EAAMK,MACZO,SAAWX,IAAUR,EAAkBT,OAAS,EAChDrB,gBAAkBA,EAClBE,gBAAkBA,GAEhBmC,eAAAA,EAAOK,aAoBpB"}