{"version":3,"file":"CollapsedBreadcrumbs.js","sources":["../../src/Breadcrumbs/CollapsedBreadcrumbs.tsx"],"sourcesContent":["import React, { useRef, useState } from 'react';\nimport { cssDecorator } from '@front-toolkit/utils';\nimport { useClickOutside } from '@front-toolkit/hooks';\nimport { Tooltip } from 'core/src/Tooltip';\nimport { IconEllipsis } from 'core/src/icons';\nimport { DropDown } from 'core/shared/BaseSelect/DropdownList/DropDown';\nimport DropdownListCommand from 'core/src/DropdownListCommand';\nimport { ScrollBox } from 'shared/ScrollBox';\n\nimport { getCurrentSize } from './utils';\nimport { BreadcrumbsProps, ICrumb } from './types';\n\nimport styles from './styles.scss';\n\nconst cd = cssDecorator(styles);\n\nexport const CollapsedBreadcrumbs = ({\n  breadcrumbs = [],\n  onlyPath,\n  color,\n  size = 'default',\n  renderCrumbLink\n}: BreadcrumbsProps): JSX.Element => {\n  const [visibleDropdown, setVisibleDropdown] = useState(false);\n  const dropdown = useRef<HTMLUListElement>(null);\n\n  const dropdownClassNames = cd('dropdown', { open: visibleDropdown });\n\n  useClickOutside(dropdown, () => {\n    setVisibleDropdown(false);\n  });\n\n  const changeVisibleDropdown = (): void => {\n    setVisibleDropdown(prevState => !prevState);\n  };\n\n  const currentSize = getCurrentSize(size, onlyPath);\n\n  const renderCrumb = (crumb: ICrumb): JSX.Element => {\n    if (!crumb.fullPath) {\n      return (\n        <DropdownListCommand\n          uncontrolledHover\n          size={ currentSize }\n          label={ crumb.title }\n          width={ 180 }\n          onClick={ changeVisibleDropdown }\n        />\n      );\n    }\n\n    return (\n      <>\n        { renderCrumbLink(crumb.fullPath, <DropdownListCommand\n          uncontrolledHover\n          size={ currentSize }\n          label={ crumb.title }\n          width={ 180 }\n          onClick={ changeVisibleDropdown }\n        />) }\n      </>\n    );\n  };\n\n  return (\n    <span className={ cd('collapsed', { active: visibleDropdown }) }>\n      { /* eslint-disable-next-line jsx-a11y/click-events-have-key-events,jsx-a11y/no-static-element-interactions */ }\n      <span\n        onClick={ changeVisibleDropdown }\n        data-test-id=\"collapsed\"\n      >\n        { onlyPath ? (\n          <Tooltip text={ breadcrumbs?.map(el => el.title).join('\\n') } placement=\"top\" size={ currentSize }>\n            <IconEllipsis color={ `var(--ds-color-${ color?.replace('_', '-') })` } />\n          </Tooltip>\n        ) : (\n          <IconEllipsis color={ `var(--ds-color-${ color?.replace('_', '-') })` } />\n        ) }\n      </span>\n      { (visibleDropdown && !onlyPath) && (\n        <span data-test-id=\"dropdown\">\n          <DropDown isOpen={ visibleDropdown } fixedModeID=\"fixed_test\">\n            <ScrollBox maxHeight={ currentSize === 'default' ? 368 : 336 } width={ 180 } overrideWrapperClassName={ dropdownClassNames }>\n              <ul className={ styles.dropdown__list } ref={ dropdown }>\n                { breadcrumbs.map(crumb => (\n                  <React.Fragment key={ crumb.title }>\n                    { renderCrumb(crumb) }\n                  </React.Fragment>\n                )) }\n              </ul>\n            </ScrollBox>\n          </DropDown>\n        </span>\n      ) }\n    </span>\n  );\n};\n"],"names":["cd","cssDecorator","styles","CollapsedBreadcrumbs","_a","_b","breadcrumbs","onlyPath","color","_c","size","renderCrumbLink","_d","useState","visibleDropdown","setVisibleDropdown","dropdown","useRef","dropdownClassNames","open","useClickOutside","changeVisibleDropdown","prevState","currentSize","getCurrentSize","React","className","active","onClick","Tooltip","text","map","el","title","join","placement","IconEllipsis","replace","DropDown","isOpen","fixedModeID","ScrollBox","maxHeight","width","overrideWrapperClassName","dropdown__list","ref","crumb","Fragment","key","fullPath","DropdownListCommand","uncontrolledHover","label","renderCrumb"],"mappings":"qgBAcA,IAAMA,EAAKC,EAAaC,GAEXC,EAAuB,SAACC,OACnCC,gBAAAC,aAAc,KACdC,aACAC,UACAC,SAAAC,aAAO,YACPC,oBAEMC,EAAwCC,GAAS,GAAhDC,OAAiBC,OAClBC,EAAWC,EAAyB,MAEpCC,EAAqBlB,EAAG,WAAY,CAAEmB,KAAML,IAElDM,EAAgBJ,GAAU,WACxBD,GAAmB,MAGrB,IAAMM,EAAwB,WAC5BN,GAAmB,SAAAO,GAAa,OAACA,MAG7BC,EAAcC,EAAed,EAAMH,GA4BzC,OACEkB,wBAAMC,UAAY1B,EAAG,YAAa,CAAE2B,OAAQb,KAE1CW,wBACEG,QAAUP,iBACG,aAEXd,EACAkB,gBAACI,GAAQC,KAAOxB,eAAAA,EAAayB,KAAI,SAAAC,GAAM,OAAAA,EAAGC,SAAOC,KAAK,MAAQC,UAAU,MAAMzB,KAAOa,GACnFE,gBAACW,GAAa5B,MAAQ,mBAAmBA,eAAAA,EAAO6B,QAAQ,IAAK,aAG/DZ,gBAACW,GAAa5B,MAAQ,mBAAmBA,eAAAA,EAAO6B,QAAQ,IAAK,aAG9DvB,IAAoBP,GACrBkB,uCAAmB,YACjBA,gBAACa,GAASC,OAASzB,EAAkB0B,YAAY,cAC/Cf,gBAACgB,GAAUC,UAA4B,YAAhBnB,EAA4B,IAAM,IAAMoB,MAAQ,IAAMC,yBAA2B1B,GACtGO,sBAAIC,UAAYxB,EAAO2C,eAAiBC,IAAM9B,GAC1CV,EAAYyB,KAAI,SAAAgB,GAAS,OACzBtB,gBAACA,EAAMuB,UAASC,IAAMF,EAAMd,OA/CxB,SAACc,GACnB,OAAKA,EAAMG,SAaTzB,gCACId,EAAgBoC,EAAMG,SAAUzB,gBAAC0B,GACjCC,qBACA1C,KAAOa,EACP8B,MAAQN,EAAMd,MACdU,MAAQ,IACRf,QAAUP,MAjBZI,gBAAC0B,GACCC,qBACA1C,KAAOa,EACP8B,MAAQN,EAAMd,MACdU,MAAQ,IACRf,QAAUP,IAwCEiC,CAAYP,WAUlC"}