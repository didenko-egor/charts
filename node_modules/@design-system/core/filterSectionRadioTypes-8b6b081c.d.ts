import { FilterBaseConfig, FilterBaseItem, FilterBaseProps } from "./types-8b6b081c";
/** Режимы сортировки */
type SortingMode = 'asc' | 'desc';
/** Конфигурация режима сортировки */
type FilterSectionRadioModeItem = Omit<FilterBaseItem, 'value'> & {
    value: SortingMode;
};
/** Выбранное значение сортировки */
type FilterSectionRadioItem = FilterBaseItem & {
    /** Режим сортировки */
    mode: SortingMode;
};
/** Конфигурация элемента сортировки */
type FilterSectionRadioConfigItem = FilterBaseItem & {
    /** Режимы сортировки */
    modes: FilterSectionRadioModeItem[];
    /** Режим сортировки по умолчанию, если не задан, считается первым в списке.
     * Используется если первой в списке должно быть одно, а по умолчанию - другое
     */
    defaultMode?: SortingMode;
};
/** Настройки сортировки */
type FilterSectionRadioConfig = Omit<FilterBaseConfig, 'type' | 'options' | 'items'> & {
    /** Тип фильтра */
    type: 'section-radio';
    /** Элементы фильтра */
    items: FilterSectionRadioConfigItem[];
};
/** Пропсы сортировки */
type FilterSectionRadioProps = Omit<FilterBaseProps, 'config' | 'activeItems' | 'onChange'> & {
    /** Конфиг фильтра */
    config: FilterSectionRadioConfig;
    /** Выбранные по умолчанию значения.
     * Если не задано, будет использоваться первое из конфигурации
     */
    defaultValue?: FilterSectionRadioItem;
    /** Выбранный пункт сортировки. В массиве учитывается только первый элемент */
    activeItems: FilterSectionRadioItem[];
    /** Колбэк при изменении сортировки. В массиве всегда один элемент */
    onChange: (activeItems: FilterSectionRadioItem[]) => void;
};
export { SortingMode, FilterSectionRadioModeItem, FilterSectionRadioItem, FilterSectionRadioConfigItem, FilterSectionRadioConfig, FilterSectionRadioProps };
