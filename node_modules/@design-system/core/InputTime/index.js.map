{"version":3,"file":"index.js","sources":["../../src/InputTime/index.tsx"],"sourcesContent":["import React, {\n  useMemo,\n  useCallback,\n  useRef,\n  FocusEventHandler\n} from 'react';\nimport { MaskedInput } from 'core/src/MaskedInput';\nimport classNames from 'classnames/bind';\nimport { InputProps } from 'core/src/Input';\nimport { useDropdownElementBehavior } from 'core/hooks';\n\nimport { IconTime } from '../icons';\nimport { List } from './List';\nimport { TIME_REGEX, getTimes } from './utils';\n\nimport styles from './styles.scss';\n\nconst cn = classNames.bind(styles);\n\nconst HOURS = [\n  '00', '01', '02', '03', '04', '05',\n  '06', '07', '08', '09', '10', '11',\n  '12', '13', '14', '15', '16', '17',\n  '18', '19', '20', '21', '22', '23'\n];\n\nconst MINUTES = [\n  '00', '01', '02', '03', '04', '05',\n  '06', '07', '08', '09', '10', '11',\n  '12', '13', '14', '15', '16', '17',\n  '18', '19', '20', '21', '22', '23',\n  '24', '25', '26', '27', '28', '29',\n  '30', '31', '32', '33', '34', '35',\n  '36', '37', '38', '39', '40', '41',\n  '42', '43', '44', '45', '46', '47',\n  '48', '49', '50', '51', '52', '53',\n  '54', '55', '56', '57', '58', '59'\n];\n\nconst TIME_ICONS = [{ icon: <IconTime /> }];\n\nexport interface InputTimeProps extends InputProps {\n  /** Id инпута для тестов */\n  dataTestId?: string;\n\n  /** Id опций в дропдауне для тестов */\n  dataTestOptionId?: string;\n\n  /** Значение, используемое в качестве плейсхолдера для инпута и маски для ввода */\n  placeholderMask?: string;\n}\n\nconst DEFAULT_PROPS: Partial<InputTimeProps> = {\n  dataTestId: 'time_input',\n  dataTestOptionId: 'time_option',\n  size: 'default'\n};\n\n/**\n * @deprecated Компонент более не поддерживается и будет удален.\n * Используйте новый: {@link @design-system/core/CalendarV2}\n * */\nexport const InputTime: React.FC<InputTimeProps> = ({\n  id,\n  placeholderMask = 'чч:мм',\n  value,\n  onChange,\n  onBlur,\n  dataTestId = DEFAULT_PROPS.dataTestId as string,\n  dataTestOptionId = DEFAULT_PROPS.dataTestOptionId as string,\n  fieldName,\n  size = 'default',\n  ...rest\n}) => {\n  const [activeHours, activeMinutes] = useMemo(() => getTimes(value), [value]);\n\n  const targetRef = useRef<HTMLInputElement>(null);\n  const childRef = useRef<HTMLDivElement>(null);\n\n  const { dropdownStyle } = useDropdownElementBehavior(targetRef, childRef);\n\n  const onHoursChange = useCallback(hour => {\n    if (onChange) {\n      onChange(`${ hour }:00`, fieldName);\n    }\n  }, [fieldName, onChange]);\n\n  const onMinutesChange = useCallback(minute => {\n    if (onChange) {\n      onChange(`${ activeHours || '00' }:${ minute }`, fieldName);\n    }\n  }, [activeHours, fieldName, onChange]);\n\n  const onBlurWithValidate: FocusEventHandler = useCallback(event => {\n    /** Очищаем инпут, если введено невалидное значение (например, вручную) */\n    if (onChange && value && !TIME_REGEX.test(value)) {\n      onChange('', fieldName);\n    }\n\n    if (onBlur) {\n      onBlur(event);\n    }\n  }, [onChange, value, onBlur, fieldName]);\n\n  return (\n    <div\n      className={ cn('time_input', { [`time_input--${ size }`]: size }) }\n      data-test-id={ dataTestId }\n      ref={ targetRef }\n    >\n      <MaskedInput\n        { ...rest }\n        id={ id }\n        value={ value }\n        onBlur={ onBlurWithValidate }\n        placeholderMask={ placeholderMask }\n        onChange={ onChange }\n        icons={ TIME_ICONS }\n        dataTestId={ dataTestId }\n        size={ size }\n        withoutDefaultMinWidth\n      />\n      <div\n        className={ styles.dropdown }\n        style={ dropdownStyle }\n        ref={ childRef }\n      >\n        <List\n          items={ HOURS }\n          value={ activeHours }\n          onChange={ onHoursChange }\n          dataTestId={ dataTestOptionId }\n        />\n\n        <List\n          items={ MINUTES }\n          value={ activeMinutes }\n          onChange={ onMinutesChange }\n          dataTestId={ dataTestOptionId }\n        />\n      </div>\n    </div>\n  );\n};\n"],"names":["cn","classNames","bind","styles","HOURS","MINUTES","TIME_ICONS","icon","React","IconTime","DEFAULT_PROPS","InputTime","_a","id","_c","placeholderMask","value","onChange","onBlur","_d","dataTestId","_e","dataTestOptionId","fieldName","_f","size","rest","_g","useMemo","getTimes","activeHours","activeMinutes","targetRef","useRef","childRef","dropdownStyle","useDropdownElementBehavior","onHoursChange","useCallback","hour","onMinutesChange","minute","onBlurWithValidate","event","TIME_REGEX","test","className","_b","ref","MaskedInput","icons","withoutDefaultMinWidth","dropdown","style","List","items"],"mappings":"gbAiBA,IAAMA,EAAKC,EAAWC,KAAKC,GAErBC,EAAQ,CACZ,KAAM,KAAM,KAAM,KAAM,KAAM,KAC9B,KAAM,KAAM,KAAM,KAAM,KAAM,KAC9B,KAAM,KAAM,KAAM,KAAM,KAAM,KAC9B,KAAM,KAAM,KAAM,KAAM,KAAM,MAG1BC,EAAU,CACd,KAAM,KAAM,KAAM,KAAM,KAAM,KAC9B,KAAM,KAAM,KAAM,KAAM,KAAM,KAC9B,KAAM,KAAM,KAAM,KAAM,KAAM,KAC9B,KAAM,KAAM,KAAM,KAAM,KAAM,KAC9B,KAAM,KAAM,KAAM,KAAM,KAAM,KAC9B,KAAM,KAAM,KAAM,KAAM,KAAM,KAC9B,KAAM,KAAM,KAAM,KAAM,KAAM,KAC9B,KAAM,KAAM,KAAM,KAAM,KAAM,KAC9B,KAAM,KAAM,KAAM,KAAM,KAAM,KAC9B,KAAM,KAAM,KAAM,KAAM,KAAM,MAG1BC,EAAa,CAAC,CAAEC,KAAMC,gBAACC,UAavBC,EACQ,aADRA,EAEc,cAQPC,EAAsC,SAACC,SAClDC,OACAC,oBAAAC,aAAkB,UAClBC,UACAC,aACAC,WACAC,eAAAC,aAAaV,IACbW,qBAAAC,aAAmBZ,IACnBa,cACAC,SAAAC,aAAO,YACJC,MAV+C,yGAY5CC,EAA+BC,GAAQ,WAAM,OAAAC,EAASb,KAAQ,CAACA,IAA9Dc,OAAaC,OAEdC,EAAYC,EAAyB,MACrCC,EAAWD,EAAuB,MAEhCE,EAAkBC,EAA2BJ,EAAWE,iBAE1DG,EAAgBC,GAAY,SAAAC,GAC5BtB,GACFA,EAAasB,QAAYhB,KAE1B,CAACA,EAAWN,IAETuB,EAAkBF,GAAY,SAAAG,GAC9BxB,GACFA,GAAaa,GAAe,UAAUW,EAAWlB,KAElD,CAACO,EAAaP,EAAWN,IAEtByB,EAAwCJ,GAAY,SAAAK,GAEpD1B,GAAYD,IAAU4B,EAAWC,KAAK7B,IACxCC,EAAS,GAAIM,GAGXL,GACFA,EAAOyB,KAER,CAAC1B,EAAUD,EAAOE,EAAQK,IAE7B,OACEf,uBACEsC,UAAY9C,EAAG,mBAAgB+C,EAAC,eAAgBtB,GAAUA,qBAC3CL,EACf4B,IAAMhB,GAENxB,gBAACyC,OACMvB,GACLb,GAAKA,EACLG,MAAQA,EACRE,OAASwB,EACT3B,gBAAkBA,EAClBE,SAAWA,EACXiC,MAAQ5C,EACRc,WAAaA,EACbK,KAAOA,EACP0B,6BAEF3C,uBACEsC,UAAY3C,EAAOiD,SACnBC,MAAQlB,EACRa,IAAMd,GAEN1B,gBAAC8C,GACCC,MAAQnD,EACRY,MAAQc,EACRb,SAAWoB,EACXjB,WAAaE,IAGfd,gBAAC8C,GACCC,MAAQlD,EACRW,MAAQe,EACRd,SAAWuB,EACXpB,WAAaE,KAKvB"}